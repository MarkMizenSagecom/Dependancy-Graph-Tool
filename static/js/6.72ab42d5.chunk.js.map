{"version":3,"sources":["../../src/core/storage/DOMStorageWrapper.ts","../../src/core/storage/MemoryStorage.ts","../../src/core/storage/storage.ts","../../src/core/util/util.ts","../../src/core/util/Path.ts","../../src/realtime/Constants.ts","../../src/core/RepoInfo.ts","../../src/core/util/libs/parser.ts","../../src/core/snap/snap.ts","../../src/core/util/validation.ts","../../src/core/snap/LeafNode.ts","../../src/core/snap/indexes/PriorityIndex.ts","../../src/core/util/SortedMap.ts","../../src/core/snap/Node.ts","../../src/core/snap/indexes/Index.ts","../../src/core/snap/indexes/KeyIndex.ts","../../src/core/snap/IndexMap.ts","../../src/core/snap/ChildrenNode.ts","../../src/core/snap/childSet.ts","../../src/core/snap/comparators.ts","../../src/core/snap/nodeFromJSON.ts","../../src/core/operation/Operation.ts","../../src/core/operation/AckUserWrite.ts","../../src/core/util/ImmutableTree.ts","../../src/core/operation/ListenComplete.ts","../../src/core/operation/Overwrite.ts","../../src/core/operation/Merge.ts","../../src/core/view/CacheNode.ts","../../src/core/view/ViewCache.ts","../../src/core/view/Change.ts","../../src/core/view/filter/IndexedFilter.ts","../../src/core/view/ChildChangeAccumulator.ts","../../src/core/CompoundWrite.ts","../../src/core/WriteTree.ts","../../src/core/view/CompleteChildSource.ts","../../src/core/view/ViewProcessor.ts","../../src/core/view/EventGenerator.ts","../../src/core/util/NextPushId.ts","../../src/core/snap/indexes/ValueIndex.ts","../../src/core/snap/indexes/PathIndex.ts","../../src/core/view/filter/RangedFilter.ts","../../src/core/view/filter/LimitedFilter.ts","../../src/core/view/QueryParams.ts","../../src/core/view/View.ts","../../src/core/SyncPoint.ts","../../src/core/SyncTree.ts","../../src/core/util/ServerValues.ts","../../src/core/SparseSnapshotTree.ts","../../src/core/SnapshotHolder.ts","../../src/core/stats/StatsCollection.ts","../../src/core/stats/StatsManager.ts","../../src/core/stats/StatsListener.ts","../../src/core/stats/StatsReporter.ts","../../src/core/view/EventQueue.ts","../../src/core/util/EventEmitter.ts","../../src/core/util/VisibilityMonitor.ts","../../src/core/util/OnlineMonitor.ts","../../src/realtime/polling/PacketReceiver.ts","../../src/realtime/BrowserPollConnection.ts","../../src/core/version.ts","../../src/realtime/WebSocketConnection.ts","../../src/realtime/TransportManager.ts","../../src/realtime/Connection.ts","../../src/core/ServerActions.ts","../../src/core/PersistentConnection.ts","../../src/core/ReadonlyRestClient.ts","../../src/api/DataSnapshot.ts","../../src/core/util/Tree.ts","../../src/core/Repo.ts","../../src/api/Query.ts","../../src/api/onDisconnect.ts","../../src/api/TransactionResult.ts","../../src/core/view/Event.ts","../../src/core/view/EventRegistration.ts","../../src/api/Reference.ts","../../src/core/AuthTokenProvider.ts","../../src/core/RepoManager.ts","../../src/api/Database.ts","../../src/api/internal.ts","../../src/api/test_access.ts","../../index.ts"],"names":["domStorage_","prefix_","set","key","value","this","removeItem","prefixedName_","setItem","get","storedVal","getItem","remove","name","toString","cache_","isInMemoryStorage","createStoragefor","domStorageName","window","domStorage","DOMStorageWrapper","e","MemoryStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","str","utf8Bytes","update","sha1Bytes","digest","encodeByteArray","buildLogMessage_","message","i","varArgs","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","logLevel","VERBOSE","log","bind","logWrapper","prefix","error","fatal","Error","warn","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","fn","hasOwnProperty","doubleToIEEE754String","v","s","f","ln","bias","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","test","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","pathString","newEmptyPath","Path","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","encodeURIComponent","String","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","j","pathContains","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","PROTOCOL_VERSION","FORGE_DOMAIN_RE","WEBSOCKET","LONG_POLLING","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","indexOf","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","type","params","connURL","repoInfoNeedsQueryParam","pairs","MAX_NODE","parseRepoInfo","dataURL","parsedUrl","parseDatabaseURL","domain","location","scheme","RepoInfo","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","replace","decodePath","queryParams","queryString","results","charAt","segment","kv","decodeQuery","hostWithoutPort","dotInd","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidPriority","priority","validateFirebaseDataArg","fnName","argumentNumber","optional","undefined","validateFirebaseData","errorPrefixFxn","errorPrefix","path_","ValidationPath","child","last","pop","validationPathPop","validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateRootPathString","validateWritablePath","validateUrl","isValidRootPathString","validateBoolean","bool","__childrenNodeConstructor","nodeFromJSON","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","val","isEmpty","getPriority","value_","priorityNode_","LeafNode","EMPTY_NODE","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","index","action","exportFormat","getValue","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","node","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","result","hasNext","peek","color","LLRBNode","RED","SortedMap","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","SortedMapIterator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LLRBEmptyNode","Wrap","NamedNode","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","_defaultIndexMap","PRIORITY_INDEX","aPriority","bPriority","indexCmp","isDefinedOn","maxPost","makePost","indexValue","Index","KEY_INDEX","KeyIndex","LOG_2","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","Base12Num","fallbackObject","indexes_","indexSet_","IndexMap","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","newIndex","sawIndexedValue","iter","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","children_","indexMap_","ChildrenNode","Default","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","Object","defineProperties","MAX","setPriorityMaxNode","OperationType","json","childData","childSet","sortedChildSet","newOperationSourceServerTaggedQuery","queryId","fromUser","fromServer","tagged","setNodeFromJSON","emptyChildrenSingleton","affectedTree","revert","ACK_USER_WRITE","source","operationForChild","children","subtree","AckUserWrite","fromObject","tree","ImmutableTree","childPath","childSnap","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","childKey","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","LISTEN_COMPLETE","ListenComplete","snap","OVERWRITE","Overwrite","MERGE","Merge","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","newViewCache","eventCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","filtered","CacheNode","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","index_","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","getIndex","changeMap","Map","change","oldChange","oldType","delete","getChanges","from","values","writeTree_","empty","CompoundWrite","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","writeTreeChildWrites","newWriteTreeRef","writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","splice","removedWriteWasVisible","visible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","write","writes","filter","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","merge","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","forEach","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","getChildAfterChild","writes_","viewCache_","optCompleteServerCache_","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","filterServerNode","accumulator","ChildChangeAccumulator","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","WriteTreeCompleteChildSource","oldEventCache","newEventCache","serverChildren","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","changes","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","query_","getQueryParams","eventGeneratorGenerateEventsForType","eventGenerator","events","registrations","filteredChanges","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","PUSH_CHARS","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","random","successor","keyAsInt","sourcePlusOne","repeat","VALUE_INDEX","valueNode","indexPath_","extractChild","aChild","bChild","indexedFilter_","IndexedFilter","startPost_","RangedFilter","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","foundStartPost","changeAccumulator","newChildNamedNode","windowBoundary","inRange","oldChildSnap","compareNext","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasStartAfter","hasEndBefore","hasLimit","hasAnchoredLimit","loadsAllData","isDefault","QueryParams","queryParamsLimitToFirst","newLimit","newParams","queryParamsLimitToLast","queryParamsStartAt","queryParamsStartAfter","queryParamsEndAt","queryParamsEndBefore","queryParamsOrderBy","queryParamsToRestQueryStringParameters","orderBy","qs","PathIndex","referenceConstructor","initialViewCache","eventRegistrations_","indexFilter","LimitedFilter","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","EventGenerator","viewGetCompleteServerCache","view","cache","viewIsEmpty","viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","views","syncPointApplyOperation","syncPoint","optCompleteServerCache","syncPointGetView","serverCacheComplete","queryIdentifier","eventCacheComplete","View","syncPointAddEventRegistration","has","viewAddEventRegistration","initialChanges","viewGetInitialEvents","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","entries","viewQueryId","repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeNextQueryTag_","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","writeTreeAddMerge","changeTree","syncTreeAckUserWrite","record","writeTreeGetWrite","syncTreeApplyServerOverwrite","syncTreeRemoveEventRegistration","maybeSyncPoint","removedAndEvents","size","removingDefault","covered","parentSyncPoint","newViews","maybeChildSyncPoint","childMap","_key","childViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","listener","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery_","hashFn","onComplete","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","queries","removedQuery","removedQueryKey","removedQueryTag","syncTreeRemoveTags_","syncTreeAddEventRegistration","foundAncestorDefaultView","pathToSyncPoint","sp","SyncPoint","childSyncPoint","viewAlreadyExists","queryKey","tag","queriesToStop","map","childQueries","queryToStop","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","syncTreeGetServerValue","serverCacheNode","viewGetCompleteNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","viewGetServerCache","status","syncTreeQueryKeyForTag_","r","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeApplyTaggedListenComplete","syncTreeApplyListenComplete","code","reason","toUpperCase","errorForServerCode","splitIndex","getRef","ExistingValueProvider","syncTree_","DeferredValueProvider","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","stringify","op","unused","delta","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForget","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","rootNode_","updateSnapshot","newSnapshotNode","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","StatsCollection","collection_","last_","newStats","stat","collection","server_","statsToReport_","statsListener_","StatsListener","reportStats_","stats","reportedStats","haveStatsToReport","reportStats","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventData","eventFn","getEventRunner","allowedEvents_","listeners_","trigger","listeners","callback","context","on","validateEventType_","getInitialEvent","off","find","et","hidden","visibilityChange","document","addEventListener","visible_","getInstance","VisibilityMonitor","EventEmitter","online_","OnlineMonitor","currentlyOnline","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","connId","applicationId","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","PacketReceiver","isClosed_","connectTimeoutTimer_","onClosed_","readyState","body","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","BrowserPollConnection","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","href","Windows","UI","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","iframeContents","doc","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","theURL","curDataString","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","async","onload","onreadystatechange","rstate","parentNode","onerror","SDK_VERSION","setSDKVersion","version","WebSocketImpl","MozWebSocket","WebSocket","keepaliveTimer","frames","totalFrames","WebSocketConnection","connectionURL_","device","options","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","userAgent","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","TransportManager","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","repoInfo_","applicationId_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","put","refreshAuthToken","token","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","RECONNECT_MIN_DELAY","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","PersistentConnection","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","deferred","request","p","q","queryObject","outstandingGet","resolve","reject","sendGet_","promise","listen","currentHashFn","listenSpec","sendListen_","req","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","authMethod","requestData","cred","res","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","nextConnectionId_","forceRefresh","getToken","then","accessToken","Connection","interrupt","resume","serverTimeOffset","normalizedPathString","statusCode","explanation","notifyForInvalidToken","console","clientName","ServerActions","listens_","getListenId_","listenId","ReadonlyRestClient","thisListen","queryStringParameters","restRequest_","authTokenData","authToken","xhr","XMLHttpRequest","responseText","ref_","arguments","exportVal","toJSON","exists","childPathString","childRef","DataSnapshot","hasChildren","getKey","parent","childCount","treeSubTree","pathObj","Tree","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INTERRUPT_REASON","forceRestClient_","app","dataUpdateCount","eventQueue_","EventQueue","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","authOverride","appId","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","addTokenChangeListener","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","StatsReporter","infoData_","SnapshotHolder","infoSyncTree_","SyncTree","infoEvents","serverSyncTree_","repoServerTime","offset","repoGenerateServerValues","taggedChildren","raw","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoUpdate","childrenToMerge","changedKey","changedValue","repoOnDisconnectCancel","repoOnDisconnectSet","repoOnDisconnectSetWithPriority","repoOnDisconnectUpdate","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoResume","repoGetDatabase","__database","Database","repoStartTransaction","transactionUpdate","applyLocally","valueCallback","watchRef","Reference","transaction","order","retryCount","unwatcher","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","repoGetLatestState","snapshot","queueNode","nodeQueue","priorityForNode","repoSendReadyTransactions","excludeSets","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","setsToIgnore","txn","latestState","snapToSend","latestHash","dataToSend","pathToSend","callbacks","ref","repoSendTransactionQueue","rootMostTransactionNode","repoGetAncestorTransactionNode","abortTransaction","currentNode","newDataNode","oldWriteId","newNodeResolved","lastInput","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","__referenceConstructor","repo_","cancel","wrapCallback","setWithPriority","objectToMerge","newObjectToMerge","committed","getParent","getEventType","callback_","cancelCallback_","context_","DataEvent","ctx","call","CancelEvent","ValueEventRegistration","callbacks_","eventToCheck","ChildEventRegistration","otherKeys","thisKeys","otherCount","otherKey","thisKey","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit_","validateNoPreviousOrderByCall_","Query","cancelCallbackOrContext","ret","getCancelAndContextArgs_","onValueEvent","onChildEvent","cancelCallback","container","cached","Promise","err","repoGetValue","once","userCallback","failureCallbackOrContext","firstCall","catch","onceCallback","limitToFirst","limit","limitToLast","orderByChild","parsedPath","orderByKey","orderByPriority","orderByValue","startAt","startAfter","endAt","endBefore","equalTo","viewFrom","queryParamsGetQueryObject","isEqual","sameRepo","samePath","sameQueryIdentifier","cancelOrContext","Repo","parentPath","getRoot","databaseProp","promiseComplete","TransactionResult","setPriority","thennablePushRef","pushRef","OnDisconnect","syncPointSetReferenceConstructor","app_","authProvider_","auth_","getImmediate","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorAdminTokenProvider","EMULATOR_AUTH_TOKEN","repos","useRestClient","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","FirebaseAuthTokenProvider","appRepos","repoManagerCreateRepo","repoInternal_","instanceStarted_","INTERNAL","checkDeleted_","repoManagerDeleteRepo","rootInternal_","useEmulator","repoManagerApplyEmulatorSettings","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP","increment","showDelta","longestName","reduce","previousValue","currentValue","paddedStat","repoStats","metric","reporter","repoStatsIncrementCounter","repoInterceptServerData","customAuthImpl","setComponent","instance","DataConnection","prototype","simpleListen","echo","onEcho","RealTimeConnection","ConnectionTarget","newHash","oldPut","forceRestClient","repoManagerForceRestClient","registerComponent","getProvider","setServiceProps","TEST_ACCESS","setMultipleInstances","registerVersion","module","exports","registerDatabase"],"mappings":";sLA4BA,aAOE,WAAoBA,GAAA,KAAAA,cALZ,KAAAC,QAAU,YA4CpB,OAjCE,YAAAC,IAAA,SAAIC,EAAaC,GACF,MAATA,EACFC,KAAKL,YAAYM,WAAWD,KAAKE,cAAcJ,IAE/CE,KAAKL,YAAYQ,QAAQH,KAAKE,cAAcJ,GAAM,YAAUC,KAOhE,YAAAK,IAAA,SAAIN,GACF,IAAMO,EAAYL,KAAKL,YAAYW,QAAQN,KAAKE,cAAcJ,IAC9D,OAAiB,MAAbO,EACK,KAEA,YAASA,IAIpB,YAAAE,OAAA,SAAOT,GACLE,KAAKL,YAAYM,WAAWD,KAAKE,cAAcJ,KAKjD,YAAAI,cAAA,SAAcM,GACZ,OAAOR,KAAKJ,QAAUY,GAGxB,YAAAC,SAAA,WACE,OAAOT,KAAKL,YAAYc,YAE5B,EA9CA,GCLA,0BACU,KAAAC,OAAmC,GAqB3C,KAAAC,mBAAoB,EACtB,OApBE,YAAAd,IAAA,SAAIC,EAAaC,GACF,MAATA,SACKC,KAAKU,OAAOZ,GAEnBE,KAAKU,OAAOZ,GAAOC,GAIvB,YAAAK,IAAA,SAAIN,GACF,OAAI,YAASE,KAAKU,OAAQZ,GACjBE,KAAKU,OAAOZ,GAEd,MAGT,YAAAS,OAAA,SAAOT,UACEE,KAAKU,OAAOZ,IAIvB,EAvBA,GCQMc,EAAmB,SACvBC,GAEA,IAGE,GACoB,qBAAXC,QAC2B,qBAA3BA,OAAOD,GACd,CAEA,IAAME,EAAaD,OAAOD,GAG1B,OAFAE,EAAWZ,QAAQ,oBAAqB,SACxCY,EAAWd,WAAW,qBACf,IAAIe,EAAkBD,IAE/B,MAAOE,IAIT,OAAO,IAAIC,GAIAC,EAAoBP,EAAiB,gBAGrCQ,EAAiBR,EAAiB,kBCzBzCS,EAAY,IAAI,IAAO,sBAKhBC,EAA+B,WAC1C,IAAIC,EAAK,EACT,OAAO,WACL,OAAOA,KAHiC,GAY/BC,EAAO,SAAUC,GAC5B,IAAMC,EAAY,YAAkBD,GAC9BD,EAAO,IAAI,IACjBA,EAAKG,OAAOD,GACZ,IAAME,EAAYJ,EAAKK,SACvB,OAAO,IAAOC,gBAAgBF,IAG1BG,EAAmB,SAAnBA,I,IAA6B,sDAEjC,IADA,IAAIC,EAAU,GACLC,EAAI,EAAGA,EAAIC,EAAQC,OAAQF,IAAK,CACvC,IAAMG,EAAMF,EAAQD,GAElBI,MAAMC,QAAQF,IACbA,GACgB,kBAARA,GAEwB,kBAAvBA,EAAYD,OAEtBH,GAAWD,EAAiBQ,MAAM,KAAMH,GAExCJ,GADwB,kBAARI,EACL,YAAUA,GAEVA,EAEbJ,GAAW,IAGb,OAAOA,GAMEQ,EAAuC,KAK9CC,GAAY,EAOHC,EAAgB,SAC3BC,EACAC,GAEA,aACGA,IAA0B,IAAZD,IAAgC,IAAZA,EACnC,+CAEc,IAAZA,GACFtB,EAAUwB,SAAW,IAASC,QAC9BN,EAASnB,EAAU0B,IAAIC,KAAK3B,GACxBuB,GACFxB,EAAevB,IAAI,mBAAmB,IAEZ,oBAAZ8C,EAChBH,EAASG,GAETH,EAAS,KACTpB,EAAeb,OAAO,qBAIbwC,EAAM,W,IAAU,sDAQ3B,IAPkB,IAAdN,IACFA,GAAY,EACG,OAAXD,IAA6D,IAA1CpB,EAAehB,IAAI,oBACxCsC,GAAc,IAIdF,EAAQ,CACV,IAAMR,EAAUD,EAAiBQ,MAAM,KAAML,GAC7CM,EAAOR,KAIEiB,EAAa,SACxBC,GAEA,OAAO,W,IAAU,sDACfH,EAAG,0BAACG,GAAM,YAAKhB,OAINiB,EAAQ,W,IAAU,sDAC7B,IAAMnB,EAAU,4BAA8BD,EAAgB,wCAAIG,KAClEb,EAAU8B,MAAMnB,IAGLoB,EAAQ,W,IAAU,sDAC7B,IAAMpB,EAAU,yBAAyBD,EAAgB,wCAAIG,KAE7D,MADAb,EAAU8B,MAAMnB,GACV,IAAIqB,MAAMrB,IAGLsB,EAAO,W,IAAU,sDAC5B,IAAMtB,EAAU,qBAAuBD,EAAgB,wCAAIG,KAC3Db,EAAUiC,KAAKtB,IAiCJuB,EAAsB,SAAUC,GAC3C,MACkB,kBAATA,IACNA,IAASA,GACRA,IAASC,OAAOC,mBAChBF,IAASC,OAAOE,oBAmDTC,EAAW,aAKXC,EAAW,aAKXC,EAAc,SAAUC,EAAWC,GAC9C,GAAID,IAAMC,EACR,OAAO,EACF,GAAID,IAAMH,GAAYI,IAAMH,EACjC,OAAQ,EACH,GAAIG,IAAMJ,GAAYG,IAAMF,EACjC,OAAO,EAEP,IAAMI,EAASC,EAAYH,GACzBI,EAASD,EAAYF,GAEvB,OAAe,OAAXC,EACa,OAAXE,EACKF,EAASE,IAAW,EAAIJ,EAAE5B,OAAS6B,EAAE7B,OAAS8B,EAASE,GAEtD,EAEU,OAAXA,EACF,EAEAJ,EAAIC,GAAK,EAAI,GAQbI,EAAgB,SAAUL,EAAWC,GAChD,OAAID,IAAMC,EACD,EACED,EAAIC,GACL,EAED,GAIEK,EAAa,SACxBvE,EACAwE,GAEA,GAAIA,GAAOxE,KAAOwE,EAChB,OAAOA,EAAIxE,GAEX,MAAM,IAAIuD,MACR,yBAA2BvD,EAAM,gBAAkB,YAAUwE,KAKtDC,EAAoB,SAApBA,EAA8BD,GACzC,GAAmB,kBAARA,GAA4B,OAARA,EAC7B,OAAO,YAAUA,GAGnB,IAAME,EAAO,GAEb,IAAK,IAAMC,KAAKH,EACdE,EAAKE,KAAKD,GAIZD,EAAKG,OAEL,IADA,IAAI7E,EAAM,IACDmC,EAAI,EAAGA,EAAIuC,EAAKrC,OAAQF,IACrB,IAANA,IACFnC,GAAO,KAETA,GAAO,YAAU0E,EAAKvC,IACtBnC,GAAO,IACPA,GAAOyE,EAAkBD,EAAIE,EAAKvC,KAIpC,OADAnC,GAAO,KAUI8E,EAAoB,SAC/BnD,EACAoD,GAEA,IAAMC,EAAMrD,EAAIU,OAEhB,GAAI2C,GAAOD,EACT,MAAO,CAACpD,GAIV,IADA,IAAMsD,EAAW,GACRC,EAAI,EAAGA,EAAIF,EAAKE,GAAKH,EACxBG,EAAIH,EAAUC,EAChBC,EAASL,KAAKjD,EAAIwD,UAAUD,EAAGF,IAE/BC,EAASL,KAAKjD,EAAIwD,UAAUD,EAAGA,EAAIH,IAGvC,OAAOE,G,SASOG,EAAKZ,EAAaa,GAChC,IAAK,IAAMrF,KAAOwE,EACZA,EAAIc,eAAetF,IACrBqF,EAAGrF,EAAKwE,EAAIxE,IAyBX,IAAMuF,EAAwB,SAAUC,GAC7C,aAAQ/B,EAAoB+B,GAAI,uBAEhC,IAGIC,EAAGtE,EAAGuE,EAAGC,EAAIxD,EADXyD,EAAO,KAKH,IAANJ,GACFrE,EAAI,EACJuE,EAAI,EACJD,EAAI,EAAID,KAAOK,IAAW,EAAI,IAE9BJ,EAAID,EAAI,GACRA,EAAIM,KAAKC,IAAIP,KAEJM,KAAKE,IAAI,GAAG,OAGnB7E,GADAwE,EAAKG,KAAKG,IAAIH,KAAKI,MAAMJ,KAAK7C,IAAIuC,GAAKM,KAAKK,KAAMP,IACzCA,EACTF,EAAII,KAAKM,MAAMZ,EAAIM,KAAKE,IAAI,EAlBtB,GAkBiCL,GAAMG,KAAKE,IAAI,EAlBhD,OAqBN7E,EAAI,EACJuE,EAAII,KAAKM,MAAMZ,EAAIM,KAAKE,IAAI,GAAG,SAKnC,IAAMK,EAAO,GACb,IAAKlE,EA5BK,GA4BMA,EAAGA,GAAK,EACtBkE,EAAKzB,KAAKc,EAAI,EAAI,EAAI,GACtBA,EAAII,KAAKI,MAAMR,EAAI,GAErB,IAAKvD,EAjCS,GAiCEA,EAAGA,GAAK,EACtBkE,EAAKzB,KAAKzD,EAAI,EAAI,EAAI,GACtBA,EAAI2E,KAAKI,MAAM/E,EAAI,GAErBkF,EAAKzB,KAAKa,EAAI,EAAI,GAClBY,EAAKC,UACL,IAAM3E,EAAM0E,EAAKE,KAAK,IAGlBC,EAAgB,GACpB,IAAKrE,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAG,CAC1B,IAAIsE,EAAUC,SAAS/E,EAAIgF,OAAOxE,EAAG,GAAI,GAAGxB,SAAS,IAC9B,IAAnB8F,EAAQpE,SACVoE,EAAU,IAAMA,GAElBD,GAAgCC,EAElC,OAAOD,EAAcI,eAkDVC,EAAkB,IAAIC,OAAO,qBAK7BC,GAAkB,WAKlBC,EAAiB,WAKjB5C,EAAc,SAAUzC,GACnC,GAAIkF,EAAgBI,KAAKtF,GAAM,CAC7B,IAAMuF,EAASvD,OAAOhC,GACtB,GAAIuF,GAAUH,GAAkBG,GAAUF,EACxC,OAAOE,EAGX,OAAO,MAoBIC,EAAiB,SAAU9B,GACtC,IACEA,IACA,MAAOlE,GAEPiG,YAAW,WAKT,IAAMC,EAAQlG,EAAEkG,OAAS,GAEzB,MADA7D,EAAK,yCAA0C6D,GACzClG,IACL2E,KAAKI,MAAM,MAiELoB,EAAwB,SACnCjC,EACAkC,GAEA,IAAMC,EAA2BJ,WAAW/B,EAAIkC,GAMhD,MAJuB,kBAAZC,GAAyBA,EAAe,OAEhDA,EAAe,QAEXA,GChlBT,aAQE,WAAYC,EAAiCC,GAC3C,QAAiB,IAAbA,EAAqB,CACvBxH,KAAKyH,QAAWF,EAAwBG,MAAM,KAI9C,IADA,IAAIC,EAAS,EACJ1F,EAAI,EAAGA,EAAIjC,KAAKyH,QAAQtF,OAAQF,IACnCjC,KAAKyH,QAAQxF,GAAGE,OAAS,IAC3BnC,KAAKyH,QAAQE,GAAU3H,KAAKyH,QAAQxF,GACpC0F,KAGJ3H,KAAKyH,QAAQtF,OAASwF,EAEtB3H,KAAK4H,UAAY,OAEjB5H,KAAKyH,QAAUF,EACfvH,KAAK4H,UAAYJ,EAcvB,OAVE,YAAA/G,SAAA,WAEE,IADA,IAAIoH,EAAa,GACR5F,EAAIjC,KAAK4H,UAAW3F,EAAIjC,KAAKyH,QAAQtF,OAAQF,IAC5B,KAApBjC,KAAKyH,QAAQxF,KACf4F,GAAc,IAAM7H,KAAKyH,QAAQxF,IAIrC,OAAO4F,GAAc,KAEzB,EAvCA,G,SAyCgBC,IACd,OAAO,IAAIC,EAAK,I,SAGFC,EAAaC,GAC3B,OAAIA,EAAKL,WAAaK,EAAKR,QAAQtF,OAC1B,KAGF8F,EAAKR,QAAQQ,EAAKL,W,SAMXM,EAAcD,GAC5B,OAAOA,EAAKR,QAAQtF,OAAS8F,EAAKL,U,SAGpBO,EAAaF,GAC3B,IAAIT,EAAWS,EAAKL,UAIpB,OAHIJ,EAAWS,EAAKR,QAAQtF,QAC1BqF,IAEK,IAAIO,EAAKE,EAAKR,QAASD,G,SAGhBY,EAAYH,GAC1B,OAAIA,EAAKL,UAAYK,EAAKR,QAAQtF,OACzB8F,EAAKR,QAAQQ,EAAKR,QAAQtF,OAAS,GAGrC,K,SAGOkG,EAAuBJ,GAErC,IADA,IAAIJ,EAAa,GACR5F,EAAIgG,EAAKL,UAAW3F,EAAIgG,EAAKR,QAAQtF,OAAQF,IAC5B,KAApBgG,EAAKR,QAAQxF,KACf4F,GAAc,IAAMS,mBAAmBC,OAAON,EAAKR,QAAQxF,MAI/D,OAAO4F,GAAc,I,SAOPW,EAAUP,EAAYQ,GACpC,YADoC,IAAAA,MAAA,GAC7BR,EAAKR,QAAQiB,MAAMT,EAAKL,UAAYa,G,SAG7BE,EAAWV,GACzB,GAAIA,EAAKL,WAAaK,EAAKR,QAAQtF,OACjC,OAAO,KAIT,IADA,IAAMyG,EAAS,GACN3G,EAAIgG,EAAKL,UAAW3F,EAAIgG,EAAKR,QAAQtF,OAAS,EAAGF,IACxD2G,EAAOlE,KAAKuD,EAAKR,QAAQxF,IAG3B,OAAO,IAAI8F,EAAKa,EAAQ,G,SAGVC,EAAUZ,EAAYa,GAEpC,IADA,IAAMF,EAAS,GACN3G,EAAIgG,EAAKL,UAAW3F,EAAIgG,EAAKR,QAAQtF,OAAQF,IACpD2G,EAAOlE,KAAKuD,EAAKR,QAAQxF,IAG3B,GAAI6G,aAAwBf,EAC1B,IAAS9F,EAAI6G,EAAalB,UAAW3F,EAAI6G,EAAarB,QAAQtF,OAAQF,IACpE2G,EAAOlE,KAAKoE,EAAarB,QAAQxF,QAGnC,KAAM8G,EAAcD,EAAapB,MAAM,KACvC,IAASzF,EAAI,EAAGA,EAAI8G,EAAY5G,OAAQF,IAClC8G,EAAY9G,GAAGE,OAAS,GAC1ByG,EAAOlE,KAAKqE,EAAY9G,IAK9B,OAAO,IAAI8F,EAAKa,EAAQ,G,SAMVI,EAAYf,GAC1B,OAAOA,EAAKL,WAAaK,EAAKR,QAAQtF,O,SAMxB8G,EAAgBC,EAAiBC,GAC/C,IAAMC,EAAQpB,EAAakB,GACzBG,EAAQrB,EAAamB,GACvB,GAAc,OAAVC,EACF,OAAOD,EACF,GAAIC,IAAUC,EACnB,OAAOJ,EAAgBd,EAAae,GAAYf,EAAagB,IAE7D,MAAM,IAAI9F,MACR,8BACE8F,EADF,8BAIED,EACA,K,SAQQI,EAAYC,EAAYC,GAGtC,IAFA,IAAMC,EAAWjB,EAAUe,EAAM,GAC3BG,EAAYlB,EAAUgB,EAAO,GAC1BvH,EAAI,EAAGA,EAAIwH,EAAStH,QAAUF,EAAIyH,EAAUvH,OAAQF,IAAK,CAChE,IAAM0H,EAAM7F,EAAY2F,EAASxH,GAAIyH,EAAUzH,IAC/C,GAAY,IAAR0H,EACF,OAAOA,EAGX,OAAIF,EAAStH,SAAWuH,EAAUvH,OACzB,EAEFsH,EAAStH,OAASuH,EAAUvH,QAAU,EAAI,E,SAMnCyH,GAAW3B,EAAY4B,GACrC,GAAI3B,EAAcD,KAAUC,EAAc2B,GACxC,OAAO,EAGT,IACE,IAAI5H,EAAIgG,EAAKL,UAAWkC,EAAID,EAAMjC,UAClC3F,GAAKgG,EAAKR,QAAQtF,OAClBF,IAAK6H,IAEL,GAAI7B,EAAKR,QAAQxF,KAAO4H,EAAMpC,QAAQqC,GACpC,OAAO,EAIX,OAAO,E,SAMOC,GAAa9B,EAAY4B,GACvC,IAAI5H,EAAIgG,EAAKL,UACTkC,EAAID,EAAMjC,UACd,GAAIM,EAAcD,GAAQC,EAAc2B,GACtC,OAAO,EAET,KAAO5H,EAAIgG,EAAKR,QAAQtF,QAAQ,CAC9B,GAAI8F,EAAKR,QAAQxF,KAAO4H,EAAMpC,QAAQqC,GACpC,OAAO,IAEP7H,IACA6H,EAEJ,OAAO,EAaT,OASE,SAAY7B,EAAmB+B,GAAA,KAAAA,eAC7BhK,KAAKiK,OAASzB,EAAUP,EAAM,GAE9BjI,KAAKkK,YAActE,KAAKuE,IAAI,EAAGnK,KAAKiK,OAAO9H,QAE3C,IAAK,IAAIF,EAAI,EAAGA,EAAIjC,KAAKiK,OAAO9H,OAAQF,IACtCjC,KAAKkK,aAAe,YAAalK,KAAKiK,OAAOhI,IAE/CmI,GAAyBpK,OA0B7B,SAASoK,GAAyBC,GAChC,GAAIA,EAAeH,YAvRS,IAwR1B,MAAM,IAAI7G,MACRgH,EAAeL,aAAfK,yCAIEA,EAAeH,YACf,MAGN,GAAIG,EAAeJ,OAAO9H,OApSL,GAqSnB,MAAM,IAAIkB,MACRgH,EAAeL,aAAfK,gGAIEC,GAA4BD,I,SAQpBC,GACdD,GAEA,OAAqC,IAAjCA,EAAeJ,OAAO9H,OACjB,GAEF,gBAAkBkI,EAAeJ,OAAO5D,KAAK,KAAO,IC5TtD,IAAMkE,GAAmB,IAYnBC,GAAkB,6EAMlBC,GAAY,YAEZC,GAAe,eCZ5B,cAaE,WACEC,EACgBC,EACAC,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,OAAA,QACA,IAAAC,MAAA,SACA,IAAAC,OAAA,GALA,KAAAL,SACA,KAAAC,YACA,KAAAC,gBACA,KAAAC,YACA,KAAAC,iBACA,KAAAC,gCAEhBjL,KAAKkL,MAAQP,EAAKjE,cAClB1G,KAAKmL,QAAUnL,KAAKkL,MAAMzE,OAAOzG,KAAKkL,MAAME,QAAQ,KAAO,GAC3DpL,KAAKqL,aACFlK,EAAkBf,IAAI,QAAUuK,IAAoB3K,KAAKkL,MA0ChE,OAvCE,YAAAI,gBAAA,WACE,MAA0C,OAAnCtL,KAAKqL,aAAa5E,OAAO,EAAG,IAGrC,YAAA8E,aAAA,WACE,MACmB,mBAAjBvL,KAAKmL,SACY,wBAAjBnL,KAAKmL,SAIT,sBAAI,mBAAI,C,IAAR,WACE,OAAOnL,KAAKkL,O,IAGd,SAASM,GACHA,IAAYxL,KAAKqL,eACnBrL,KAAKqL,aAAeG,EAChBxL,KAAKsL,mBACPnK,EAAkBtB,IAAI,QAAUG,KAAKkL,MAAOlL,KAAKqL,gB,gCAKvD,YAAA5K,SAAA,WACE,IAAIgB,EAAMzB,KAAKyL,cAIf,OAHIzL,KAAKgL,iBACPvJ,GAAO,IAAMzB,KAAKgL,eAAiB,KAE9BvJ,GAGT,YAAAgK,YAAA,WACE,IAAMC,EAAW1L,KAAK4K,OAAS,WAAa,UACtCe,EAAQ3L,KAAKiL,8BACf,OAAOjL,KAAK6K,UACZ,GACJ,MAAO,GAAGa,EAAW1L,KAAK2K,KAAI,IAAIgB,GAEtC,EAnEA,G,SAoFgBC,GACdC,EACAC,EACAC,GAKA,IAAIC,EACJ,GAJA,YAAuB,kBAATF,EAAmB,8BACjC,YAAyB,kBAAXC,EAAqB,gCAG/BD,IAASrB,GACXuB,GACGH,EAASjB,OAAS,SAAW,SAAWiB,EAASR,aAAe,YAC9D,IAAIS,IAASpB,GAMlB,MAAM,IAAIrH,MAAM,4BAA8ByI,GAL9CE,GACGH,EAASjB,OAAS,WAAa,WAChCiB,EAASR,aACT,SA/BN,SAAiCQ,GAC/B,OACEA,EAASlB,OAASkB,EAASR,cAC3BQ,EAASN,gBACTM,EAASZ,+BA+BPgB,CAAwBJ,KAC1BE,EAAM,GAASF,EAAShB,WAG1B,IAAMqB,EAAkB,GAMxB,OAJAhH,EAAK6G,GAAQ,SAACjM,EAAaC,GACzBmM,EAAMxH,KAAK5E,EAAM,IAAMC,MAGlBiM,EAAUE,EAAM7F,KAAK,KCjFvB,ICnCH8F,GDmCSC,GAAgB,SAC3BC,EACAtB,GAEA,IAAMuB,EAAYC,GAAiBF,GACjCxB,EAAYyB,EAAUzB,UAEC,iBAArByB,EAAUE,QACZpJ,EACEkJ,EAAU3B,KAAV2B,8EAQAzB,GAA2B,cAAdA,GACM,cAArByB,EAAUE,QAEVpJ,EACE,gFAICkJ,EAAU1B,QJgFK,qBAAX9J,QACPA,OAAO2L,UACP3L,OAAO2L,SAASf,WACgC,IAAhD5K,OAAO2L,SAASf,SAASN,QAAQ,WAEjC9H,EACE,6FIlFJ,IAAMwH,EAAqC,OAArBwB,EAAUI,QAAwC,QAArBJ,EAAUI,OAE7D,MAAO,CACLb,SAAU,IAAIc,GACZL,EAAU3B,KACV2B,EAAU1B,OACVC,EACAE,EACAD,EACoB,GACeD,IAAcyB,EAAUM,WAE7D3E,KAAM,IAAIF,EAAKuE,EAAUzE,cAIhB0E,GAAmB,SAC9BF,GAYA,IAAI1B,EAAO,GACT6B,EAAS,GACTI,EAAY,GACZ/E,EAAa,GACbgD,EAAY,GAGVD,GAAS,EACX8B,EAAS,QACTG,EAAO,IAGT,GAAuB,kBAAZR,EAAsB,CAE/B,IAAIS,EAAWT,EAAQjB,QAAQ,MAC3B0B,GAAY,IACdJ,EAASL,EAAQpH,UAAU,EAAG6H,EAAW,GACzCT,EAAUA,EAAQpH,UAAU6H,EAAW,IAIzC,IAAIC,EAAWV,EAAQjB,QAAQ,MACb,IAAd2B,IACFA,EAAWV,EAAQlK,QAErB,IAAI6K,EAAkBX,EAAQjB,QAAQ,MACb,IAArB4B,IACFA,EAAkBX,EAAQlK,QAE5BwI,EAAO0B,EAAQpH,UAAU,EAAGW,KAAKG,IAAIgH,EAAUC,IAC3CD,EAAWC,IAEbnF,EA/HN,SAAoBA,GAGlB,IAFA,IAAIoF,EAAoB,GAClBrE,EAASf,EAAWH,MAAM,KACvBzF,EAAI,EAAGA,EAAI2G,EAAOzG,OAAQF,IACjC,GAAI2G,EAAO3G,GAAGE,OAAS,EAAG,CACxB,IAAI+K,EAAQtE,EAAO3G,GACnB,IACEiL,EAAQC,mBAAmBD,EAAME,QAAQ,MAAO,MAChD,MAAOnM,IACTgM,GAAqB,IAAMC,EAG/B,OAAOD,EAmHUI,CAAWhB,EAAQpH,UAAU8H,EAAUC,KAEtD,IAAMM,EA/GV,SAAqBC,G,QACbC,EAAU,GACc,MAA1BD,EAAYE,OAAO,KACrBF,EAAcA,EAAYtI,UAAU,I,IAEtC,IAAsB,kBAAAsI,EAAY7F,MAAM,MAAI,8BAAE,CAAzC,IAAMgG,EAAO,QAChB,GAAuB,IAAnBA,EAAQvL,OAAZ,CAGA,IAAMwL,EAAKD,EAAQhG,MAAM,KACP,IAAdiG,EAAGxL,OACLqL,EAAQL,mBAAmBQ,EAAG,KAAOR,mBAAmBQ,EAAG,IAE3DrK,EAAK,0BAA0BoK,EAAO,eAAeH,EAAW,O,iGAGpE,OAAOC,EA+FeI,CAClBvB,EAAQpH,UAAUW,KAAKG,IAAIsG,EAAQlK,OAAQ6K,MAI7CF,EAAWnC,EAAKS,QAAQ,OACR,GACdR,EAAoB,UAAX8B,GAAiC,QAAXA,EAC/BG,EAAOrG,SAASmE,EAAK1F,UAAU6H,EAAW,GAAI,KAE9CA,EAAWnC,EAAKxI,OAGlB,IAAM0L,EAAkBlD,EAAKjC,MAAM,EAAGoE,GACtC,GAAsC,cAAlCe,EAAgBnH,cAClB8F,EAAS,iBACJ,GAAIqB,EAAgBnG,MAAM,KAAKvF,QAAU,EAC9CqK,EAASqB,MACJ,CAEL,IAAMC,EAASnD,EAAKS,QAAQ,KAC5BwB,EAAYjC,EAAK1F,UAAU,EAAG6I,GAAQpH,cACtC8F,EAAS7B,EAAK1F,UAAU6I,EAAS,GAEjCjD,EAAY+B,EAGV,OAAQU,IACVzC,EAAYyC,EAAW,IAI3B,MAAO,CACL3C,KAAI,EACJkC,KAAI,EACJL,OAAM,EACNI,UAAS,EACThC,OAAM,EACN8B,OAAM,EACN7E,WAAU,EACVgD,UAAS,IEnJAkD,GAAqB,iCAMrBC,GAAsB,+BAKtBC,GAAiB,SAEjBC,GAAa,SAAUpO,GAClC,MACiB,kBAARA,GAAmC,IAAfA,EAAIqC,SAAiB4L,GAAmBhH,KAAKjH,IAI/DqO,GAAoB,SAAUtG,GACzC,MACwB,kBAAfA,GACe,IAAtBA,EAAW1F,SACV6L,GAAoBjH,KAAKc,IAajBuG,GAAkB,SAAUC,GACvC,OACe,OAAbA,GACoB,kBAAbA,GACc,kBAAbA,IAA0B9K,EAAoB8K,IACrDA,GACqB,kBAAbA,GAEP,YAASA,EAAiB,QAOnBC,GAA0B,SACrCC,EACAC,EACAhL,EACAyE,EACAwG,GAEIA,QAAqBC,IAATlL,GAIhBmL,GACEC,YAAeL,EAAQC,EAAgBC,GACvCjL,EACAyE,IAOS0G,GAAuB,SAAvBA,EACXE,EACArL,EACAsL,GAEA,IAAM7G,EACJ6G,aAAiB/G,EAAO,IAAIgH,GAAeD,EAAOD,GAAeC,EAEnE,QAAaJ,IAATlL,EACF,MAAM,IAAIH,MACRwL,EAAc,sBAAwBvE,GAA4BrC,IAGtE,GAAoB,oBAATzE,EACT,MAAM,IAAIH,MACRwL,EACE,uBACAvE,GAA4BrC,GAC5B,oBACAzE,EAAK/C,YAGX,GAAI8C,EAAoBC,GACtB,MAAM,IAAIH,MACRwL,EACE,YACArL,EAAK/C,WACL,IACA6J,GAA4BrC,IAKlC,GACkB,kBAATzE,GACPA,EAAKrB,OAAS8L,GAAiB,GAC/B,YAAazK,GAAQyK,GAErB,MAAM,IAAI5K,MACRwL,EACE,kCADFA,uBAIEvE,GAA4BrC,GAC5B,MACAzE,EAAKyB,UAAU,EAAG,IAClB,SAMN,GAAIzB,GAAwB,kBAATA,EAAmB,CACpC,IAAI,GAAc,EACd,GAAiB,EAwBrB,GAvBA0B,EAAK1B,GAAM,SAAC1D,EAAaC,GACvB,GAAY,WAARD,EACF,GAAc,OACT,GAAY,cAARA,GAA+B,QAARA,IAChC,GAAiB,GACZoO,GAAWpO,IACd,MAAM,IAAIuD,MACRwL,EACE,6BACA/O,EACA,KACAwK,GAA4BrC,GAJ9B4G,wF,ILwGVxE,EACA2E,IK9F6BlP,GL6F7BuK,EK7FuBpC,GLiGJgC,OAAO9H,OAAS,IACjCkI,EAAeH,aAAe,GAEhCG,EAAeJ,OAAOvF,KAAKsK,GAC3B3E,EAAeH,aAAe,YAAa8E,GAC3C5E,GAAyBC,GKrGrBsE,EAAqBE,EAAa9O,EAAOkI,G,SLwGboC,GAChC,IAAM4E,EAAO5E,EAAeJ,OAAOiF,MACnC7E,EAAeH,aAAe,YAAa+E,GAEvC5E,EAAeJ,OAAO9H,OAAS,IACjCkI,EAAeH,aAAe,GK5G5BiF,CAAkBlH,MAGhB,GAAe,EACjB,MAAM,IAAI5E,MACRwL,EACE,4BACAvE,GAA4BrC,GAC5B,sCA0DGmH,GAA+B,SAC1Cb,EACAC,EACAhL,EACAyE,EACAwG,GAEA,IAAIA,QAAqBC,IAATlL,EAAhB,CAIA,IAAMqL,EAAcD,YAAeL,EAAQC,EAAgBC,GAE3D,IAAMjL,GAAwB,kBAATA,GAAsBnB,MAAMC,QAAQkB,GACvD,MAAM,IAAIH,MACRwL,EAAc,0DAIlB,IAAMQ,EAAqB,GAC3BnK,EAAK1B,GAAM,SAAC1D,EAAaC,GACvB,IAAMuP,EAAU,IAAIvH,EAAKjI,GAEzB,GADA6O,GAAqBE,EAAa9O,EAAO8I,EAAUZ,EAAMqH,IAC5B,cAAzBlH,EAAYkH,KACTlB,GAAgBrO,GACnB,MAAM,IAAIsD,MACRwL,EACE,kCACAS,EAAQ7O,WAFVoO,gGAQNQ,EAAW3K,KAAK4K,MAnFsB,SACxCT,EACAQ,GAEA,IAAIpN,EAAGqN,EACP,IAAKrN,EAAI,EAAGA,EAAIoN,EAAWlN,OAAQF,IAGjC,IADA,IAAMuC,EAAOgE,EADb8G,EAAUD,EAAWpN,IAEZ6H,EAAI,EAAGA,EAAItF,EAAKrC,OAAQ2H,IAC/B,GAAgB,cAAZtF,EAAKsF,IAAsBA,IAAMtF,EAAKrC,OAAS,QAE5C,IAAK+L,GAAW1J,EAAKsF,IAC1B,MAAM,IAAIzG,MACRwL,EACE,4BACArK,EAAKsF,GACL,aACAwF,EAAQ7O,WAJVoO,uFAeRQ,EAAW1K,KAAK2E,GAChB,IAAIiG,EAAwB,KAC5B,IAAKtN,EAAI,EAAGA,EAAIoN,EAAWlN,OAAQF,IAAK,CAEtC,GADAqN,EAAUD,EAAWpN,GACJ,OAAbsN,GAAqBxF,GAAawF,EAAUD,GAC9C,MAAM,IAAIjM,MACRwL,EACE,mBACAU,EAAS9O,WACT,qCACA6O,EAAQ7O,YAGd8O,EAAWD,GA4CbE,CAA2BX,EAAaQ,KAG7BI,GAAmB,SAC9BlB,EACAC,EACAH,EACAI,GAEA,IAAIA,QAAyBC,IAAbL,EAAhB,CAGA,GAAI9K,EAAoB8K,GACtB,MAAM,IAAIhL,MACRuL,YAAeL,EAAQC,EAAgBC,GACrC,MACAJ,EAAS5N,WAFXmO,6FAQJ,IAAKR,GAAgBC,GACnB,MAAM,IAAIhL,MACRuL,YAAeL,EAAQC,EAAgBC,GAAvCG,yFAOOc,GAAoB,SAC/BnB,EACAC,EACAmB,EACAlB,GAEA,IAAIA,QAA0BC,IAAdiB,EAIhB,OAAQA,GACN,IAAK,QACL,IAAK,cACL,IAAK,gBACL,IAAK,gBACL,IAAK,cACH,MACF,QACE,MAAM,IAAItM,MACRuL,YAAeL,EAAQC,EAAgBC,GAAvCG,8GAOKgB,GAAc,SACzBrB,EACAC,EACA1O,EACA2O,GAEA,KAAIA,QAAoBC,IAAR5O,KAGXoO,GAAWpO,GACd,MAAM,IAAIuD,MACRuL,YAAeL,EAAQC,EAAgBC,GACrC,yBACA3O,EAFF8O,qGASOiB,GAAqB,SAChCtB,EACAC,EACA3G,EACA4G,GAEA,KAAIA,QAA2BC,IAAf7G,KAIXsG,GAAkBtG,GACrB,MAAM,IAAIxE,MACRuL,YAAeL,EAAQC,EAAgBC,GACrC,0BACA5G,EAFF+G,qFASOkB,GAAyB,SACpCvB,EACAC,EACA3G,EACA4G,GAEI5G,IAEFA,EAAaA,EAAWuF,QAAQ,mBAAoB,MAGtDyC,GAAmBtB,EAAQC,EAAgB3G,EAAY4G,IAG5CsB,GAAuB,SAAUxB,EAAgBtG,GAC5D,GAA2B,UAAvBD,EAAaC,GACf,MAAM,IAAI5E,MAAMkL,EAAS,8CAIhByB,GAAc,SACzBzB,EACAC,EACAlC,GAGA,IAAMzE,EAAayE,EAAUrE,KAAKxH,WAClC,GACuC,kBAA5B6L,EAAUT,SAASlB,MACO,IAAnC2B,EAAUT,SAASlB,KAAKxI,SACtB+L,GAAW5B,EAAUT,SAAShB,YACY,cAA1CyB,EAAUT,SAASlB,KAAKjD,MAAM,KAAK,IACd,IAAtBG,EAAW1F,SAhWqB,SAAU0F,GAM7C,OALIA,IAEFA,EAAaA,EAAWuF,QAAQ,mBAAoB,MAG/Ce,GAAkBtG,GA0VMoI,CAAsBpI,GAEnD,MAAM,IAAIxE,MACRuL,YAAeL,EAAQC,GAAgB,GAAvCI,yFAwBOsB,GAAkB,SAC7B3B,EACAC,EACA2B,EACA1B,GAEA,KAAIA,QAAqBC,IAATyB,IAGI,mBAATA,EACT,MAAM,IAAI9M,MACRuL,YAAeL,EAAQC,EAAgBC,GAAY,uBD/alD,IEGH2B,GCVAC,GACAlE,GHMSmE,GAAmB,SAAUjC,GACxC,MAAwB,kBAAbA,EACF,UAAYhJ,EAAsBgJ,GAElC,UAAYA,GAOVkC,GAAuB,SAAUC,GAC5C,GAAIA,EAAaC,aAAc,CAC7B,IAAMC,EAAMF,EAAaE,MACzB,YACiB,kBAARA,GACU,kBAARA,GACS,kBAARA,GAAoB,YAASA,EAAkB,OACzD,6CAGF,YACEF,IAAiBrE,IAAYqE,EAAaG,UAC1C,gCAIJ,YACEH,IAAiBrE,IAAYqE,EAAaI,cAAcD,UACxD,uDEnBJ,cAsBE,WACmBE,EACTC,QAAA,IAAAA,MAAsBC,EAASX,0BAA0BY,YADhD,KAAAH,SACT,KAAAC,gBATF,KAAAG,UAA2B,KAWjC,iBACkBvC,IAAhB1O,KAAK6Q,QAAwC,OAAhB7Q,KAAK6Q,OAClC,4DAGFN,GAAqBvQ,KAAK8Q,eAiO9B,OA/PE,sBAAW,8BAAyB,C,IAIpC,WACE,OAAOV,I,IALT,SAAqCM,GACnCN,GAA4BM,G,gCAiC9B,YAAAD,WAAA,WACE,OAAO,GAIT,YAAAG,YAAA,WACE,OAAO5Q,KAAK8Q,eAId,YAAAI,eAAA,SAAeC,GACb,OAAO,IAAIJ,EAAS/Q,KAAK6Q,OAAQM,IAInC,YAAAC,kBAAA,SAAkBC,GAEhB,MAAkB,cAAdA,EACKrR,KAAK8Q,cAELC,EAASX,0BAA0BY,YAK9C,YAAAM,SAAA,SAASrJ,GACP,OAAIe,EAAYf,GACPjI,KACyB,cAAvBgI,EAAaC,GACfjI,KAAK8Q,cAELC,EAASX,0BAA0BY,YAO9C,YAAAO,SAAA,WACE,OAAO,GAIT,YAAAC,wBAAA,SAAwBH,EAAmBI,GACzC,OAAO,MAIT,YAAAC,qBAAA,SAAqBL,EAAmBM,GACtC,MAAkB,cAAdN,EACKrR,KAAKkR,eAAeS,GAClBA,EAAahB,WAA2B,cAAdU,EAC5BrR,KAEA+Q,EAASX,0BAA0BY,WAAWU,qBACnDL,EACAM,GACAT,eAAelR,KAAK8Q,gBAK1B,YAAAc,YAAA,SAAY3J,EAAY0J,GACtB,IAAME,EAAQ7J,EAAaC,GAC3B,OAAc,OAAV4J,EACKF,EACEA,EAAahB,WAAuB,cAAVkB,EAC5B7R,MAEP,YACY,cAAV6R,GAAiD,IAAxB3J,EAAcD,GACvC,8CAGKjI,KAAK0R,qBACVG,EACAd,EAASX,0BAA0BY,WAAWY,YAC5CzJ,EAAaF,GACb0J,MAOR,YAAAhB,QAAA,WACE,OAAO,GAIT,YAAAmB,YAAA,WACE,OAAO,GAIT,YAAAC,aAAA,SAAaC,EAAcC,GACzB,OAAO,GAMT,YAAAvB,IAAA,SAAIwB,GACF,OAAIA,IAAiBlS,KAAK4Q,cAAcD,UAC/B,CACL,SAAU3Q,KAAKmS,WACf,YAAanS,KAAK4Q,cAAcF,OAG3B1Q,KAAKmS,YAKhB,YAAAC,KAAA,WACE,GAAuB,OAAnBpS,KAAKiR,UAAoB,CAC3B,IAAIoB,EAAS,GACRrS,KAAK8Q,cAAcH,YACtB0B,GACE,YACA/B,GAAiBtQ,KAAK8Q,cAAcJ,OACpC,KAGJ,IAAM5E,SAAc9L,KAAK6Q,OACzBwB,GAAUvG,EAAO,IAEfuG,GADW,WAATvG,EACQzG,EAAsBrF,KAAK6Q,QAE3B7Q,KAAK6Q,OAEjB7Q,KAAKiR,UAAYzP,EAAK6Q,GAExB,OAAOrS,KAAKiR,WAOd,YAAAkB,SAAA,WACE,OAAOnS,KAAK6Q,QAMd,YAAAyB,UAAA,SAAUzI,GACR,OAAIA,IAAUkH,EAASX,0BAA0BY,WACxC,EACEnH,aAAiBkH,EAASX,2BAC3B,GAER,YAAOvG,EAAM4G,aAAc,qBACpBzQ,KAAKuS,mBAAmB1I,KAO3B,YAAA0I,mBAAR,SAA2BC,GACzB,IAAMC,SAAuBD,EAAU3B,OACjC6B,SAAsB1S,KAAK6Q,OAC3B8B,EAAa5B,EAAS6B,iBAAiBxH,QAAQqH,GAC/CI,EAAY9B,EAAS6B,iBAAiBxH,QAAQsH,GAGpD,OAFA,YAAOC,GAAc,EAAG,sBAAwBF,GAChD,YAAOI,GAAa,EAAG,sBAAwBH,GAC3CC,IAAeE,EAEI,WAAjBH,EAEK,EAGH1S,KAAK6Q,OAAS2B,EAAU3B,QAClB,EACC7Q,KAAK6Q,SAAW2B,EAAU3B,OAC5B,EAEA,EAIJgC,EAAYF,GAOvB,YAAAG,UAAA,WACE,OAAO9S,MAMT,YAAA+S,UAAA,WACE,OAAO,GAMT,YAAAC,OAAA,SAAOnJ,GAIL,GAAIA,IAAU7J,KACZ,OAAO,EACF,GAAI6J,EAAM4G,aAAc,CAC7B,IAAM+B,EAAY3I,EAClB,OACE7J,KAAK6Q,SAAW2B,EAAU3B,QAC1B7Q,KAAK8Q,cAAckC,OAAOR,EAAU1B,eAGtC,OAAO,GAhPJ,EAAA8B,iBAAmB,CAAC,SAAU,UAAW,SAAU,UAmP5D,EAhQA,GEGA,cAQE,WACEK,EACAC,EACAC,EACQC,EACAC,QAAA,IAAAA,MAAA,MADA,KAAAD,aACA,KAAAC,mBAZF,KAAAC,WAA0D,GAehE,IADA,IAAI3J,EAAM,GACFsJ,EAAKtC,WAQX,GAPAsC,EAAOA,EACPtJ,EAAMuJ,EAAWC,EAAWF,EAAKnT,IAAKoT,GAAY,EAE9CE,IACFzJ,IAAQ,GAGNA,EAAM,EAGNsJ,EADEjT,KAAKoT,WACAH,EAAK1J,KAEL0J,EAAKzJ,UAET,IAAY,IAARG,EAAW,CAEpB3J,KAAKsT,WAAW5O,KAAKuO,GACrB,MAGAjT,KAAKsT,WAAW5O,KAAKuO,GAEnBA,EADEjT,KAAKoT,WACAH,EAAKzJ,MAELyJ,EAAK1J,MAoDtB,OA9CE,YAAAgK,QAAA,WACE,GAA+B,IAA3BvT,KAAKsT,WAAWnR,OAClB,OAAO,KAGT,IACIqR,EADAP,EAAOjT,KAAKsT,WAAWpE,MAQ3B,GALEsE,EADExT,KAAKqT,iBACErT,KAAKqT,iBAAiBJ,EAAKnT,IAAKmT,EAAKlT,OAEpC,CAAED,IAAKmT,EAAKnT,IAAKC,MAAOkT,EAAKlT,OAGrCC,KAAKoT,WAEP,IADAH,EAAOA,EAAK1J,MACJ0J,EAAKtC,WACX3Q,KAAKsT,WAAW5O,KAAKuO,GACrBA,EAAOA,EAAKzJ,WAId,IADAyJ,EAAOA,EAAKzJ,OACJyJ,EAAKtC,WACX3Q,KAAKsT,WAAW5O,KAAKuO,GACrBA,EAAOA,EAAK1J,KAIhB,OAAOiK,GAGT,YAAAC,QAAA,WACE,OAAOzT,KAAKsT,WAAWnR,OAAS,GAGlC,YAAAuR,KAAA,WACE,GAA+B,IAA3B1T,KAAKsT,WAAWnR,OAClB,OAAO,KAGT,IAAM8Q,EAAOjT,KAAKsT,WAAWtT,KAAKsT,WAAWnR,OAAS,GACtD,OAAInC,KAAKqT,iBACArT,KAAKqT,iBAAiBJ,EAAKnT,IAAKmT,EAAKlT,OAEpC,CAAED,IAAKmT,EAAKnT,IAAKC,MAAOkT,EAAKlT,QAG3C,EA7FA,GAkGA,cAYE,WACSD,EACAC,EACP4T,EACApK,EACAC,GAJO,KAAA1J,MACA,KAAAC,QAKPC,KAAK2T,MAAiB,MAATA,EAAgBA,EAAQC,EAASC,IAC9C7T,KAAKuJ,KACK,MAARA,EAAeA,EAAQuK,GAAU9C,WACnChR,KAAKwJ,MACM,MAATA,EAAgBA,EAASsK,GAAU9C,WA0SzC,OA1RE,YAAA+C,KAAA,SACEjU,EACAC,EACA4T,EACApK,EACAC,GAEA,OAAO,IAAIoK,EACF,MAAP9T,EAAcA,EAAME,KAAKF,IAChB,MAATC,EAAgBA,EAAQC,KAAKD,MACpB,MAAT4T,EAAgBA,EAAQ3T,KAAK2T,MACrB,MAARpK,EAAeA,EAAOvJ,KAAKuJ,KAClB,MAATC,EAAgBA,EAAQxJ,KAAKwJ,QAOjC,YAAAwK,MAAA,WACE,OAAOhU,KAAKuJ,KAAKyK,QAAU,EAAIhU,KAAKwJ,MAAMwK,SAM5C,YAAArD,QAAA,WACE,OAAO,GAYT,YAAAsD,iBAAA,SAAiBhC,GACf,OACEjS,KAAKuJ,KAAK0K,iBAAiBhC,MACzBA,EAAOjS,KAAKF,IAAKE,KAAKD,QACxBC,KAAKwJ,MAAMyK,iBAAiBhC,IAYhC,YAAAiC,iBAAA,SAAiBjC,GACf,OACEjS,KAAKwJ,MAAM0K,iBAAiBjC,IAC5BA,EAAOjS,KAAKF,IAAKE,KAAKD,QACtBC,KAAKuJ,KAAK2K,iBAAiBjC,IAOvB,YAAAkC,KAAR,WACE,OAAInU,KAAKuJ,KAAKoH,UACL3Q,KAECA,KAAKuJ,KAAwB4K,QAOzC,YAAAC,OAAA,WACE,OAAOpU,KAAKmU,OAAOrU,KAMrB,YAAAuU,OAAA,WACE,OAAIrU,KAAKwJ,MAAMmH,UACN3Q,KAAKF,IAELE,KAAKwJ,MAAM6K,UAUtB,YAAAC,OAAA,SAAOxU,EAAQC,EAAUoT,GACvB,IAAIoB,EAAoBvU,KAClB2J,EAAMwJ,EAAWrT,EAAKyU,EAAEzU,KAc9B,OAZEyU,EADE5K,EAAM,EACJ4K,EAAER,KAAK,KAAM,KAAM,KAAMQ,EAAEhL,KAAK+K,OAAOxU,EAAKC,EAAOoT,GAAa,MACnD,IAARxJ,EACL4K,EAAER,KAAK,KAAMhU,EAAO,KAAM,KAAM,MAEhCwU,EAAER,KACJ,KACA,KACA,KACA,KACAQ,EAAE/K,MAAM8K,OAAOxU,EAAKC,EAAOoT,KAGtBqB,UAMH,YAAAC,WAAR,WACE,GAAIzU,KAAKuJ,KAAKoH,UACZ,OAAOmD,GAAU9C,WAEnB,IAAIuD,EAAoBvU,KAKxB,OAJKuU,EAAEhL,KAAKmL,UAAaH,EAAEhL,KAAKA,KAAKmL,WACnCH,EAAIA,EAAEI,iBAERJ,EAAIA,EAAER,KAAK,KAAM,KAAM,KAAOQ,EAAEhL,KAAwBkL,aAAc,OAC7DD,UAQX,YAAAjU,OAAA,SACET,EACAqT,GAEA,IAAIoB,EAAGK,EAEP,GAAIzB,EAAWrT,GADfyU,EAAIvU,MACkBF,KAAO,EACtByU,EAAEhL,KAAKoH,WAAc4D,EAAEhL,KAAKmL,UAAaH,EAAEhL,KAAKA,KAAKmL,WACxDH,EAAIA,EAAEI,gBAERJ,EAAIA,EAAER,KAAK,KAAM,KAAM,KAAMQ,EAAEhL,KAAKhJ,OAAOT,EAAKqT,GAAa,UACxD,CAOL,GANIoB,EAAEhL,KAAKmL,WACTH,EAAIA,EAAEM,gBAEHN,EAAE/K,MAAMmH,WAAc4D,EAAE/K,MAAMkL,UAAaH,EAAE/K,MAAMD,KAAKmL,WAC3DH,EAAIA,EAAEO,iBAEuB,IAA3B3B,EAAWrT,EAAKyU,EAAEzU,KAAY,CAChC,GAAIyU,EAAE/K,MAAMmH,UACV,OAAOmD,GAAU9C,WAEjB4D,EAAYL,EAAE/K,MAAyB2K,OACvCI,EAAIA,EAAER,KACJa,EAAS9U,IACT8U,EAAS7U,MACT,KACA,KACCwU,EAAE/K,MAAyBiL,cAIlCF,EAAIA,EAAER,KAAK,KAAM,KAAM,KAAM,KAAMQ,EAAE/K,MAAMjJ,OAAOT,EAAKqT,IAEzD,OAAOoB,EAAEC,UAMX,YAAAE,OAAA,WACE,OAAO1U,KAAK2T,OAMN,YAAAa,OAAR,WACE,IAAID,EAAoBvU,KAUxB,OATIuU,EAAE/K,MAAMkL,WAAaH,EAAEhL,KAAKmL,WAC9BH,EAAIA,EAAEQ,eAEJR,EAAEhL,KAAKmL,UAAYH,EAAEhL,KAAKA,KAAKmL,WACjCH,EAAIA,EAAEM,gBAEJN,EAAEhL,KAAKmL,UAAYH,EAAE/K,MAAMkL,WAC7BH,EAAIA,EAAES,cAEDT,GAMD,YAAAI,aAAR,WACE,IAAIJ,EAAIvU,KAAKgV,aAYb,OAXIT,EAAE/K,MAAMD,KAAKmL,WASfH,GADAA,GAPAA,EAAIA,EAAER,KACJ,KACA,KACA,KACA,KACCQ,EAAE/K,MAAyBqL,iBAExBE,eACAC,cAEDT,GAMD,YAAAO,cAAR,WACE,IAAIP,EAAIvU,KAAKgV,aAKb,OAJIT,EAAEhL,KAAKA,KAAKmL,WAEdH,GADAA,EAAIA,EAAEM,gBACAG,cAEDT,GAMD,YAAAQ,YAAR,WACE,IAAME,EAAKjV,KAAK+T,KAAK,KAAM,KAAMH,EAASC,IAAK,KAAM7T,KAAKwJ,MAAMD,MAChE,OAAOvJ,KAAKwJ,MAAMuK,KAAK,KAAM,KAAM/T,KAAK2T,MAAOsB,EAAI,OAM7C,YAAAJ,aAAR,WACE,IAAMK,EAAKlV,KAAK+T,KAAK,KAAM,KAAMH,EAASC,IAAK7T,KAAKuJ,KAAKC,MAAO,MAChE,OAAOxJ,KAAKuJ,KAAKwK,KAAK,KAAM,KAAM/T,KAAK2T,MAAO,KAAMuB,IAM9C,YAAAF,WAAR,WACE,IAAMzL,EAAOvJ,KAAKuJ,KAAKwK,KAAK,KAAM,MAAO/T,KAAKuJ,KAAKoK,MAAO,KAAM,MAC1DnK,EAAQxJ,KAAKwJ,MAAMuK,KAAK,KAAM,MAAO/T,KAAKwJ,MAAMmK,MAAO,KAAM,MACnE,OAAO3T,KAAK+T,KAAK,KAAM,MAAO/T,KAAK2T,MAAOpK,EAAMC,IAQ1C,YAAA2L,eAAR,WACE,IAAMC,EAAapV,KAAKqV,SACxB,OAAOzP,KAAKE,IAAI,EAAKsP,IAAepV,KAAKgU,QAAU,GAGrD,YAAAqB,OAAA,WACE,GAAIrV,KAAK0U,UAAY1U,KAAKuJ,KAAKmL,SAC7B,MAAM,IAAIrR,MACR,0BAA4BrD,KAAKF,IAAM,IAAME,KAAKD,MAAQ,KAG9D,GAAIC,KAAKwJ,MAAMkL,SACb,MAAM,IAAIrR,MACR,mBAAqBrD,KAAKF,IAAM,IAAME,KAAKD,MAAQ,YAGvD,IAAMqV,EAAapV,KAAKuJ,KAAK8L,SAC7B,GAAID,IAAepV,KAAKwJ,MAAM6L,SAC5B,MAAM,IAAIhS,MAAM,uBAEhB,OAAO+R,GAAcpV,KAAK0U,SAAW,EAAI,IApStC,EAAAb,KAAM,EACN,EAAAyB,OAAQ,EAsSjB,EAjUA,GAsUA,4BAqGA,OAzFE,YAAAvB,KAAA,SACEjU,EACAC,EACA4T,EACApK,EACAC,GAEA,OAAOxJ,MAWT,YAAAsU,OAAA,SAAOxU,EAAQC,EAAUoT,GACvB,OAAO,IAAIS,GAAS9T,EAAKC,EAAO,OAUlC,YAAAQ,OAAA,SAAOT,EAAQqT,GACb,OAAOnT,MAMT,YAAAgU,MAAA,WACE,OAAO,GAMT,YAAArD,QAAA,WACE,OAAO,GAWT,YAAAsD,iBAAA,SAAiBhC,GACf,OAAO,GAWT,YAAAiC,iBAAA,SAAiBjC,GACf,OAAO,GAGT,YAAAmC,OAAA,WACE,OAAO,MAGT,YAAAC,OAAA,WACE,OAAO,MAGT,YAAAgB,OAAA,WACE,OAAO,GAMT,YAAAX,OAAA,WACE,OAAO,GAEX,EArGA,GA2GA,cAUE,WACUa,EACAC,QAAA,IAAAA,MAEkB1B,EAAU9C,YAH5B,KAAAuE,cACA,KAAAC,QA0MZ,OA7LE,YAAAlB,OAAA,SAAOxU,EAAQC,GACb,OAAO,IAAI+T,EACT9T,KAAKuV,YACLvV,KAAKwV,MACFlB,OAAOxU,EAAKC,EAAOC,KAAKuV,aACxBxB,KAAK,KAAM,KAAMH,GAAS0B,MAAO,KAAM,QAU9C,YAAA/U,OAAA,SAAOT,GACL,OAAO,IAAIgU,EACT9T,KAAKuV,YACLvV,KAAKwV,MACFjV,OAAOT,EAAKE,KAAKuV,aACjBxB,KAAK,KAAM,KAAMH,GAAS0B,MAAO,KAAM,QAW9C,YAAAlV,IAAA,SAAIN,GAGF,IAFA,IAAI6J,EACAsJ,EAAOjT,KAAKwV,OACRvC,EAAKtC,WAAW,CAEtB,GAAY,KADZhH,EAAM3J,KAAKuV,YAAYzV,EAAKmT,EAAKnT,MAE/B,OAAOmT,EAAKlT,MACH4J,EAAM,EACfsJ,EAAOA,EAAK1J,KACHI,EAAM,IACfsJ,EAAOA,EAAKzJ,OAGhB,OAAO,MAQT,YAAAiM,kBAAA,SAAkB3V,GAIhB,IAHA,IAAI6J,EACFsJ,EAAOjT,KAAKwV,MACZE,EAAc,MACRzC,EAAKtC,WAAW,CAEtB,GAAY,KADZhH,EAAM3J,KAAKuV,YAAYzV,EAAKmT,EAAKnT,MAClB,CACb,GAAKmT,EAAK1J,KAAKoH,UAMR,OAAI+E,EACFA,EAAY5V,IAEZ,KAPP,IADAmT,EAAOA,EAAK1J,MACJ0J,EAAKzJ,MAAMmH,WACjBsC,EAAOA,EAAKzJ,MAEd,OAAOyJ,EAAKnT,IAML6J,EAAM,EACfsJ,EAAOA,EAAK1J,KACHI,EAAM,IACf+L,EAAczC,EACdA,EAAOA,EAAKzJ,OAIhB,MAAM,IAAInG,MACR,0EAOJ,YAAAsN,QAAA,WACE,OAAO3Q,KAAKwV,MAAM7E,WAMpB,YAAAqD,MAAA,WACE,OAAOhU,KAAKwV,MAAMxB,SAMpB,YAAAI,OAAA,WACE,OAAOpU,KAAKwV,MAAMpB,UAMpB,YAAAC,OAAA,WACE,OAAOrU,KAAKwV,MAAMnB,UAYpB,YAAAJ,iBAAA,SAAiBhC,GACf,OAAOjS,KAAKwV,MAAMvB,iBAAiBhC,IAWrC,YAAAiC,iBAAA,SAAiBjC,GACf,OAAOjS,KAAKwV,MAAMtB,iBAAiBjC,IAOrC,YAAA0D,YAAA,SACEC,GAEA,OAAO,IAAIC,GACT7V,KAAKwV,MACL,KACAxV,KAAKuV,aACL,EACAK,IAIJ,YAAAE,gBAAA,SACEhW,EACA8V,GAEA,OAAO,IAAIC,GACT7V,KAAKwV,MACL1V,EACAE,KAAKuV,aACL,EACAK,IAIJ,YAAAG,uBAAA,SACEjW,EACA8V,GAEA,OAAO,IAAIC,GACT7V,KAAKwV,MACL1V,EACAE,KAAKuV,aACL,EACAK,IAIJ,YAAAI,mBAAA,SACEJ,GAEA,OAAO,IAAIC,GACT7V,KAAKwV,MACL,KACAxV,KAAKuV,aACL,EACAK,IA/MG,EAAA5E,WAAa,IAAIiF,GAkN1B,EAtNA,GC7aA,cACE,WAAmBzV,EAAqByS,GAArB,KAAAzS,OAAqB,KAAAyS,OAK1C,OAHS,EAAAiD,KAAP,SAAY1V,EAAcyS,GACxB,OAAO,IAAIkD,EAAU3V,EAAMyS,IAE/B,EANA,GC3HA,4BA+CA,OAtCE,YAAAmD,WAAA,WACE,OAAOpW,KAAKqW,QAAQrT,KAAKhD,OAU3B,YAAAsW,oBAAA,SAAoBC,EAAeC,GACjC,IAAMC,EAAa,IAAIN,GAAUvS,EAAU2S,GACrCG,EAAa,IAAIP,GAAUvS,EAAU4S,GAC3C,OAAgD,IAAzCxW,KAAKqW,QAAQI,EAAYC,IAOlC,YAAAC,QAAA,WAEE,OAAQR,GAAkBS,KAe9B,EA/CA,GHYA,IIVIC,GCGAC,GCkBA9F,GN8CS+F,GAAiB,IAzD9B,yB,+CAuDA,OAvDmC,iBAIjC,YAAAV,QAAA,SAAQtS,EAAcC,GACpB,IAAMgT,EAAYjT,EAAEkP,KAAKrC,cACnBqG,EAAYjT,EAAEiP,KAAKrC,cACnBsG,EAAWF,EAAU1E,UAAU2E,GACrC,OAAiB,IAAbC,EACKpT,EAAYC,EAAEvD,KAAMwD,EAAExD,MAEtB0W,GAOX,YAAAC,YAAA,SAAYlE,GACV,OAAQA,EAAKrC,cAAcD,WAM7B,YAAA2F,oBAAA,SAAoBC,EAAeC,GACjC,OAAQD,EAAQ3F,cAAcoC,OAAOwD,EAAQ5F,gBAM/C,YAAA+F,QAAA,WAEE,OAAQR,GAAkBS,KAM5B,YAAAQ,QAAA,WACE,OAAO,IAAIjB,GAAUtS,EAAU,IAAIkN,GAAS,kBAAmB5E,MAGjE,YAAAkL,SAAA,SAASC,EAAqB9W,GAC5B,IAAMgQ,EAAeH,GAAaiH,GAClC,OAAO,IAAInB,GAAU3V,EAAM,IAAIuQ,GAAS,kBAAmBP,KAM7D,YAAA/P,SAAA,WACE,MAAO,aAEX,EAvDA,CAAmC8W,KIRnC,4B,+CAgEA,OAhE8B,iBAC5B,sBAAW,iBAAY,C,IAAvB,WACE,OAAOV,I,IAGT,SAAwBnG,GACtBmG,GAAenG,G,gCAMjB,YAAA2F,QAAA,SAAQtS,EAAcC,GACpB,OAAOF,EAAYC,EAAEvD,KAAMwD,EAAExD,OAM/B,YAAA2W,YAAA,SAAYlE,GAGV,MAAM,YAAe,oDAMvB,YAAAqD,oBAAA,SAAoBC,EAAeC,GACjC,OAAO,GAMT,YAAAG,QAAA,WAEE,OAAQR,GAAkBS,KAM5B,YAAAQ,QAAA,WAGE,OAAO,IAAIjB,GAAUtS,EAAUgT,KAGjC,YAAAQ,SAAA,SAASC,EAAoB9W,GAM3B,OALA,YACwB,kBAAf8W,EACP,gDAGK,IAAInB,GAAUmB,EAAYT,KAMnC,YAAApW,SAAA,WACE,MAAO,QAEX,EAhEA,CAA8B8W,IAkEjBC,GAAY,IAAIC,GGtEvBC,GAAQ9R,KAAK7C,IAAI,GAEvB,cAKE,WAAYZ,GACV,IAAkBwV,EAIlB3X,KAAKgU,OAJa2D,EAIIxV,EAAS,EAF7BqE,SAAUZ,KAAK7C,IAAI4U,GAAOD,GAAe,KAG3C1X,KAAK4X,SAAW5X,KAAKgU,MAAQ,EAC7B,IAHiB7N,EAGX0R,GAHW1R,EAGInG,KAAKgU,MAHQxN,SAASnE,MAAM8D,EAAO,GAAGE,KAAK,KAAM,IAItErG,KAAK8X,MAAS3V,EAAS,EAAK0V,EAShC,OANE,YAAAE,aAAA,WAEE,IAAMvE,IAAWxT,KAAK8X,MAAS,GAAO9X,KAAK4X,UAE3C,OADA5X,KAAK4X,WACEpE,GAEX,EAtBA,GAqCawE,GAAgB,SAC3BC,EACAtO,EACAuO,EACAC,GAEAF,EAAUtT,KAAKgF,GAEf,IAAMyO,EAAoB,SAApBA,EACJC,EACAC,GAEA,IACIC,EACAzY,EAFEqC,EAASmW,EAAOD,EAGtB,GAAe,IAAXlW,EACF,OAAO,KACF,GAAe,IAAXA,EAGT,OAFAoW,EAAYN,EAAUI,GACtBvY,EAAMoY,EAAQA,EAAMK,GAAeA,EAC5B,IAAI3E,GACT9T,EACCyY,EAAUtF,KACXW,GAAS0B,MACT,KACA,MAIF,IAAMkD,EAAShS,SAAUrE,EAAS,EAAW,IAAMkW,EAC7C9O,EAAO6O,EAAkBC,EAAKG,GAC9BhP,EAAQ4O,EAAkBI,EAAS,EAAGF,GAG5C,OAFAC,EAAYN,EAAUO,GACtB1Y,EAAMoY,EAAQA,EAAMK,GAAeA,EAC5B,IAAI3E,GACT9T,EACCyY,EAAUtF,KACXW,GAAS0B,MACT/L,EACAC,IAsDAiP,EAjDmB,SAAUC,GAiCjC,IAhCA,IAAIzF,EAAuB,KACvBwF,EAAO,KACPzG,EAAQiG,EAAU9V,OAEhBwW,EAAe,SAAUC,EAAmBjF,GAChD,IAAM0E,EAAMrG,EAAQ4G,EACdN,EAAOtG,EACbA,GAAS4G,EACT,IAAMC,EAAYT,EAAkBC,EAAM,EAAGC,GACvCC,EAAYN,EAAUI,GACtBvY,EAASoY,EAAQA,EAAMK,GAAeA,EAC5CO,EACE,IAAIlF,GACF9T,EACCyY,EAAUtF,KACXU,EACA,KACAkF,KAKAC,EAAgB,SAAUC,GAC1B9F,GACFA,EAAK1J,KAAOwP,EACZ9F,EAAO8F,IAEPN,EAAOM,EACP9F,EAAO8F,IAIF9W,EAAI,EAAGA,EAAIyW,EAAO1E,QAAS/R,EAAG,CACrC,IAAM+W,EAAQN,EAAOX,eAEfa,EAAYhT,KAAKE,IAAI,EAAG4S,EAAO1E,OAAS/R,EAAI,IAC9C+W,EACFL,EAAaC,EAAWhF,GAAS0B,QAGjCqD,EAAaC,EAAWhF,GAAS0B,OACjCqD,EAAaC,EAAWhF,GAASC,MAGrC,OAAO4E,EAIIQ,CADE,IAAIC,GAAUjB,EAAU9V,SAGvC,OAAO,IAAI2R,GAAgBqE,GAAcxO,EAAa8O,IF/HlDU,GAAiB,GAEvB,cAkBE,WACUC,EAGAC,GAHA,KAAAD,WAGA,KAAAC,YAgIZ,OAlJE,sBAAW,YAAO,C,IAAlB,WAWE,OAVA,YACEF,IAAkBpC,GAClB,uCAEFD,GACEA,IACA,IAAIwC,EACF,CAAE,YAAaH,IACf,CAAE,YAAapC,M,gCAYrB,YAAA3W,IAAA,SAAImZ,GACF,IAAMC,EAAY,YAAQxZ,KAAKoZ,SAAUG,GACzC,IAAKC,EACH,MAAM,IAAInW,MAAM,wBAA0BkW,GAG5C,OAAIC,aAAqB1F,GAChB0F,EAIA,MAIX,YAAAC,SAAA,SAASC,GACP,OAAO,YAAS1Z,KAAKqZ,UAAWK,EAAgBjZ,aAGlD,YAAAkZ,SAAA,SACED,EACAE,GAEA,YACEF,IAAoBlC,GACpB,uEAMF,IAJA,IAUIqC,EAVE5B,EAAY,GACd6B,GAAkB,EAChBC,EAAOH,EAAiBjE,YAAYQ,GAAUD,MAChD8D,EAAOD,EAAKxG,UACTyG,GACLF,EACEA,GAAmBJ,EAAgBvC,YAAY6C,EAAK/G,MACtDgF,EAAUvT,KAAKsV,GACfA,EAAOD,EAAKxG,UAIZsG,EADEC,EACS9B,GAAcC,EAAWyB,EAAgBtD,cAEzC+C,GAEb,IAAMc,EAAYP,EAAgBjZ,WAC5ByZ,EAAc,OAAH,IAAG,CAAH,GAAQla,KAAKqZ,WAC9Ba,EAAYD,GAAaP,EACzB,IAAMS,EAAa,OAAH,IAAG,CAAH,GAAQna,KAAKoZ,UAE7B,OADAe,EAAWF,GAAaJ,EACjB,IAAIP,EAASa,EAAYD,IAMlC,YAAAE,aAAA,SACE7B,EACAqB,GAFF,WAwCE,OAAO,IAAIN,EApCQ,YACjBtZ,KAAKoZ,UACL,SAACiB,EAA6CJ,GAC5C,IAAMjI,EAAQ,YAAQ,EAAKqH,UAAWY,GAEtC,GADA,YAAOjI,EAAO,oCAAsCiI,GAChDI,IAAoBlB,GAAgB,CAEtC,GAAInH,EAAMmF,YAAYoB,EAAUtF,MAAO,CAKrC,IAHA,IAAMgF,EAAY,GACZ8B,EAAOH,EAAiBjE,YAAYQ,GAAUD,MAChD8D,EAAOD,EAAKxG,UACTyG,GACDA,EAAKxZ,OAAS+X,EAAU/X,MAC1ByX,EAAUvT,KAAKsV,GAEjBA,EAAOD,EAAKxG,UAGd,OADA0E,EAAUvT,KAAK6T,GACRP,GAAcC,EAAWjG,EAAMoE,cAGtC,OAAO+C,GAGT,IAAMmB,EAAeV,EAAiBxZ,IAAImY,EAAU/X,MAChD+Z,EAAcF,EAMlB,OALIC,IACFC,EAAcA,EAAYha,OACxB,IAAI4V,GAAUoC,EAAU/X,KAAM8Z,KAG3BC,EAAYjG,OAAOiE,EAAWA,EAAUtF,SAIrBjT,KAAKqZ,YAMvC,YAAAmB,kBAAA,SACEjC,EACAqB,GAqBA,OAAO,IAAIN,EAnBQ,YACjBtZ,KAAKoZ,UACL,SAACiB,GACC,GAAIA,IAAoBlB,GAEtB,OAAOkB,EAEP,IAAMC,EAAeV,EAAiBxZ,IAAImY,EAAU/X,MACpD,OAAI8Z,EACKD,EAAgB9Z,OACrB,IAAI4V,GAAUoC,EAAU/X,KAAM8Z,IAIzBD,KAKiBra,KAAKqZ,YAEzC,EAtJA,G,SGVgBoB,GAAqBlR,EAAiBC,GACpD,OAAO1F,EAAYyF,EAAK/I,KAAMgJ,EAAMhJ,M,SAGtBka,GAAgBnR,EAAcC,GAC5C,OAAO1F,EAAYyF,EAAMC,GF0B3B,kBAkBE,WACmBmR,EACA7J,EACT8J,GAFS,KAAAD,YACA,KAAA7J,gBACT,KAAA8J,YApBF,KAAA3J,UAA2B,KA2B7BjR,KAAK8Q,eACPP,GAAqBvQ,KAAK8Q,eAGxB9Q,KAAK2a,UAAUhK,WACjB,aACG3Q,KAAK8Q,eAAiB9Q,KAAK8Q,cAAcH,UAC1C,wCA6YR,OA7aE,sBAAW,eAAU,C,IAArB,WACE,OACEK,KACCA,GAAa,IAAI6J,EAChB,IAAI/G,GAAwB4G,IAC5B,KACApB,GAASwB,W,gCAgCf,YAAArK,WAAA,WACE,OAAO,GAIT,YAAAG,YAAA,WACE,OAAO5Q,KAAK8Q,eAAiBE,IAI/B,YAAAE,eAAA,SAAeC,GACb,OAAInR,KAAK2a,UAAUhK,UAEV3Q,KAEA,IAAI6a,EAAa7a,KAAK2a,UAAWxJ,EAAiBnR,KAAK4a,YAKlE,YAAAxJ,kBAAA,SAAkBC,GAEhB,GAAkB,cAAdA,EACF,OAAOrR,KAAK4Q,cAEZ,IAAM5B,EAAQhP,KAAK2a,UAAUva,IAAIiR,GACjC,OAAiB,OAAVrC,EAAiBgC,GAAahC,GAKzC,YAAAsC,SAAA,SAASrJ,GACP,IAAM4J,EAAQ7J,EAAaC,GAC3B,OAAc,OAAV4J,EACK7R,KAGFA,KAAKoR,kBAAkBS,GAAOP,SAASnJ,EAAaF,KAI7D,YAAAsJ,SAAA,SAASF,GACP,OAAyC,OAAlCrR,KAAK2a,UAAUva,IAAIiR,IAI5B,YAAAK,qBAAA,SAAqBL,EAAmBM,GAEtC,GADA,YAAOA,EAAc,8CACH,cAAdN,EACF,OAAOrR,KAAKkR,eAAeS,GAE3B,IAAM4G,EAAY,IAAIpC,GAAU9E,EAAWM,GACvC4I,OAAW,EAAEQ,OAAW,EACxBpJ,EAAahB,WACf4J,EAAcva,KAAK2a,UAAUpa,OAAO8Q,GACpC0J,EAAc/a,KAAK4a,UAAUJ,kBAC3BjC,EACAvY,KAAK2a,aAGPJ,EAAcva,KAAK2a,UAAUrG,OAAOjD,EAAWM,GAC/CoJ,EAAc/a,KAAK4a,UAAUR,aAAa7B,EAAWvY,KAAK2a,YAG5D,IAAMK,EAAcT,EAAY5J,UAC5BK,GACAhR,KAAK8Q,cACT,OAAO,IAAI+J,EAAaN,EAAaS,EAAaD,IAKtD,YAAAnJ,YAAA,SAAY3J,EAAY0J,GACtB,IAAME,EAAQ7J,EAAaC,GAC3B,GAAc,OAAV4J,EACF,OAAOF,EAEP,YACyB,cAAvB3J,EAAaC,IAAiD,IAAxBC,EAAcD,GACpD,8CAEF,IAAMgT,EAAoBjb,KAAKoR,kBAAkBS,GAAOD,YACtDzJ,EAAaF,GACb0J,GAEF,OAAO3R,KAAK0R,qBAAqBG,EAAOoJ,IAK5C,YAAAtK,QAAA,WACE,OAAO3Q,KAAK2a,UAAUhK,WAIxB,YAAAmB,YAAA,WACE,OAAO9R,KAAK2a,UAAU3G,SAMxB,YAAAtD,IAAA,SAAIwB,GACF,GAAIlS,KAAK2Q,UACP,OAAO,KAGT,IAAMrM,EAAgC,GAClC4W,EAAU,EACZ7G,EAAS,EACT8G,GAAiB,EAYnB,GAXAnb,KAAK+R,aAAagF,IAAgB,SAACjX,EAAa2R,GAC9CnN,EAAIxE,GAAO2R,EAAUf,IAAIwB,GAEzBgJ,IACIC,GAAkBN,EAAalU,gBAAgBI,KAAKjH,GACtDuU,EAASzO,KAAKuE,IAAIkK,EAAQ5Q,OAAO3D,IAEjCqb,GAAiB,MAIhBjJ,GAAgBiJ,GAAkB9G,EAAS,EAAI6G,EAAS,CAE3D,IAAME,EAAmB,GAEzB,IAAK,IAAMtb,KAAOwE,EAChB8W,EAAOtb,GAA6BwE,EAAIxE,GAG1C,OAAOsb,EAKP,OAHIlJ,IAAiBlS,KAAK4Q,cAAcD,YACtCrM,EAAI,aAAetE,KAAK4Q,cAAcF,OAEjCpM,GAKX,YAAA8N,KAAA,WACE,GAAuB,OAAnBpS,KAAKiR,UAAoB,CAC3B,IAAI,EAAS,GACRjR,KAAK4Q,cAAcD,YACtB,GACE,YACAL,GAAiBtQ,KAAK4Q,cAAcF,OACpC,KAGJ1Q,KAAK+R,aAAagF,IAAgB,SAACjX,EAAK2R,GACtC,IAAM4J,EAAY5J,EAAUW,OACV,KAAdiJ,IACF,GAAU,IAAMvb,EAAM,IAAMub,MAIhCrb,KAAKiR,UAAuB,KAAX,EAAgB,GAAKzP,EAAK,GAE7C,OAAOxB,KAAKiR,WAId,YAAAO,wBAAA,SACEH,EACAI,EACAO,GAEA,IAAMsJ,EAAMtb,KAAKub,cAAcvJ,GAC/B,GAAIsJ,EAAK,CACP,IAAME,EAAcF,EAAI7F,kBACtB,IAAIU,GAAU9E,EAAWI,IAE3B,OAAO+J,EAAcA,EAAYhb,KAAO,KAExC,OAAOR,KAAK2a,UAAUlF,kBAAkBpE,IAI5C,YAAAoK,kBAAA,SAAkB/B,GAChB,IAAM4B,EAAMtb,KAAKub,cAAc7B,GAC/B,GAAI4B,EAAK,CACP,IAAMlH,EAASkH,EAAIlH,SACnB,OAAOA,GAAUA,EAAO5T,KAExB,OAAOR,KAAK2a,UAAUvG,UAI1B,YAAAsH,cAAA,SAAchC,GACZ,IAAMtF,EAASpU,KAAKyb,kBAAkB/B,GACtC,OAAItF,EACK,IAAI+B,GAAU/B,EAAQpU,KAAK2a,UAAUva,IAAIgU,IAEzC,MAOX,YAAAuH,iBAAA,SAAiBjC,GACf,IAAM4B,EAAMtb,KAAKub,cAAc7B,GAC/B,GAAI4B,EAAK,CACP,IAAMjH,EAASiH,EAAIjH,SACnB,OAAOA,GAAUA,EAAO7T,KAExB,OAAOR,KAAK2a,UAAUtG,UAI1B,YAAAuH,aAAA,SAAalC,GACX,IAAMrF,EAASrU,KAAK2b,iBAAiBjC,GACrC,OAAIrF,EACK,IAAI8B,GAAU9B,EAAQrU,KAAK2a,UAAUva,IAAIiU,IAEzC,MAOX,YAAAtC,aAAA,SACEC,EACAC,GAEA,IAAMqJ,EAAMtb,KAAKub,cAAcvJ,GAC/B,OAAIsJ,EACKA,EAAIrH,kBAAiB,SAAA4H,GAC1B,OAAO5J,EAAO4J,EAAYrb,KAAMqb,EAAY5I,SAGvCjT,KAAK2a,UAAU1G,iBAAiBhC,IAI3C,YAAA0D,YAAA,SACE+D,GAEA,OAAO1Z,KAAK8V,gBAAgB4D,EAAgB/C,UAAW+C,IAGzD,YAAA5D,gBAAA,SACEgG,EACApC,GAEA,IAAM4B,EAAMtb,KAAKub,cAAc7B,GAC/B,GAAI4B,EACF,OAAOA,EAAIxF,gBAAgBgG,GAAW,SAAAhc,GAAO,OAAAA,KAO7C,IALA,IAAMic,EAAW/b,KAAK2a,UAAU7E,gBAC9BgG,EAAUtb,KACV2V,GAAUD,MAER8D,EAAO+B,EAASrI,OACL,MAARsG,GAAgBN,EAAgBrD,QAAQ2D,EAAM8B,GAAa,GAChEC,EAASxI,UACTyG,EAAO+B,EAASrI,OAElB,OAAOqI,GAIX,YAAA/F,mBAAA,SACE0D,GAEA,OAAO1Z,KAAK+V,uBACV2D,EAAgBtC,UAChBsC,IAIJ,YAAA3D,uBAAA,SACEiG,EACAtC,GAEA,IAAM4B,EAAMtb,KAAKub,cAAc7B,GAC/B,GAAI4B,EACF,OAAOA,EAAIvF,uBAAuBiG,GAAS,SAAAlc,GACzC,OAAOA,KAQT,IALA,IAAMic,EAAW/b,KAAK2a,UAAU5E,uBAC9BiG,EAAQxb,KACR2V,GAAUD,MAER8D,EAAO+B,EAASrI,OACL,MAARsG,GAAgBN,EAAgBrD,QAAQ2D,EAAMgC,GAAW,GAC9DD,EAASxI,UACTyG,EAAO+B,EAASrI,OAElB,OAAOqI,GAOX,YAAAzJ,UAAA,SAAUzI,GACR,OAAI7J,KAAK2Q,UACH9G,EAAM8G,UACD,GAEC,EAED9G,EAAM4G,cAAgB5G,EAAM8G,UAC9B,EACE9G,IAAUsC,IACX,EAGD,GAOX,YAAA2G,UAAA,SAAU4G,GACR,GACEA,IAAoBlC,IACpBxX,KAAK4a,UAAUnB,SAASC,GAExB,OAAO1Z,KAEP,IAAM+a,EAAc/a,KAAK4a,UAAUjB,SACjCD,EACA1Z,KAAK2a,WAEP,OAAO,IAAIE,EAAa7a,KAAK2a,UAAW3a,KAAK8Q,cAAeiK,IAOhE,YAAAhI,UAAA,SAAUf,GACR,OAAOA,IAAUwF,IAAaxX,KAAK4a,UAAUnB,SAASzH,IAMxD,YAAAgB,OAAA,SAAOnJ,GACL,GAAIA,IAAU7J,KACZ,OAAO,EACF,GAAI6J,EAAM4G,aACf,OAAO,EAEP,IAAMwL,EAAoBpS,EAC1B,GAAK7J,KAAK4Q,cAAcoC,OAAOiJ,EAAkBrL,eAE1C,IACL5Q,KAAK2a,UAAU3G,UAAYiI,EAAkBtB,UAAU3G,QACvD,CAKA,IAJA,IAAMkI,EAAWlc,KAAK2V,YAAYoB,IAC5BoF,EAAYF,EAAkBtG,YAAYoB,IAC5CqF,EAAcF,EAAS3I,UACvB8I,EAAeF,EAAU5I,UACtB6I,GAAeC,GAAc,CAClC,GACED,EAAY5b,OAAS6b,EAAa7b,OACjC4b,EAAYnJ,KAAKD,OAAOqJ,EAAapJ,MAEtC,OAAO,EAETmJ,EAAcF,EAAS3I,UACvB8I,EAAeF,EAAU5I,UAE3B,OAAuB,OAAhB6I,GAAyC,OAAjBC,EAE/B,OAAO,EApBP,OAAO,GA8BL,YAAAd,cAAR,SACE7B,GAEA,OAAIA,IAAoBlC,GACf,KAEAxX,KAAK4a,UAAUxa,IAAIsZ,EAAgBjZ,aAjS/B,EAAAkG,gBAAkB,iBAoSnC,EAhbA,GAwdawF,GAAW,IAtCxB,YACE,a,OACE,YACE,IAAI2H,GAAwB4G,IAC5BG,GAAa7J,WACbsI,GAASwB,UACV,KA2BL,OAjC6B,iBAS3B,YAAAxI,UAAA,SAAUzI,GACR,OAAIA,IAAU7J,KACL,EAEA,GAIX,YAAAgT,OAAA,SAAOnJ,GAEL,OAAOA,IAAU7J,MAGnB,YAAA4Q,YAAA,WACE,OAAO5Q,MAGT,YAAAoR,kBAAA,SAAkBC,GAChB,OAAOwJ,GAAa7J,YAGtB,YAAAL,QAAA,WACE,OAAO,GAEX,EAjCA,CAA6BkK,KAkD7ByB,OAAOC,iBAAiBpG,GAAW,CACjCS,IAAK,CACH7W,MAAO,IAAIoW,GAAUvS,EAAUiX,GAAa7J,aAE9CwL,IAAK,CACHzc,MAAO,IAAIoW,GAAUtS,EAAUsI,OAOnCsL,GAASZ,aAAegE,GAAa7J,WACrCD,GAASX,0BAA4ByK,GT1gBnC1O,GS2gBSA,G,SNxgBgBuE,GACzBvE,GAAWuE,EMwgBb+L,CAAmBtQ,IGxgBnB,ICPYuQ,G,SDeIrM,GACdsM,EACAtO,GAEA,QAFA,IAAAA,MAAA,MAEa,OAATsO,EACF,OAAO9B,GAAa7J,WAoBtB,GAjBoB,kBAAT2L,GAAqB,cAAeA,IAC7CtO,EAAWsO,EAAK,cAGlB,YACe,OAAbtO,GACsB,kBAAbA,GACa,kBAAbA,GACc,kBAAbA,GAAyB,QAAUA,EAC7C,uCAAyCA,GAGvB,kBAATsO,GAAqB,WAAYA,GAA2B,OAAnBA,EAAK,YACvDA,EAAOA,EAAK,WAIM,kBAATA,GAAqB,QAASA,EAEvC,OAAO,IAAI5L,GADM4L,EACatM,GAAahC,IAG7C,GAAMsO,aAAgBta,MA8Cf,CACL,IAAI,EAAawY,GAAa7J,WAa9B,OAZA9L,EAAKyX,GAAM,SAAC7c,EAAa8c,GACvB,GAAI,YAASD,EAAgB7c,IACC,MAAxBA,EAAImF,UAAU,EAAG,GAAY,CAE/B,IAAMwM,EAAYpB,GAAauM,IAC3BnL,EAAUhB,cAAiBgB,EAAUd,YACvC,EAAO,EAAKe,qBAAqB5R,EAAK2R,QAMvC,EAAKP,eAAeb,GAAahC,IA3DxC,IAAM,EAAwB,GAC1B,GAAuB,EAc3B,GAZAnJ,EADqByX,GACF,SAAC7c,EAAKkP,GACvB,GAA4B,MAAxBlP,EAAImF,UAAU,EAAG,GAAY,CAE/B,IAAMwM,EAAYpB,GAAarB,GAC1ByC,EAAUd,YACb,EACE,IAAyBc,EAAUb,cAAcD,UACnD,EAASjM,KAAK,IAAIyR,GAAUrW,EAAK2R,SAKf,IAApB,EAAStP,OACX,OAAO0Y,GAAa7J,WAGtB,IAAM6L,EAAW7E,GACf,EACAyC,IACA,SAAAlC,GAAa,OAAAA,EAAU/X,OACvBka,IAEF,GAAI,EAAsB,CACxB,IAAMoC,EAAiB9E,GACrB,EACAjB,GAAeX,cAEjB,OAAO,IAAIyE,GACTgC,EACAxM,GAAahC,GACb,IAAIiL,GACF,CAAE,YAAawD,GACf,CAAE,YAAa/F,MAInB,OAAO,IAAI8D,GACTgC,EACAxM,GAAahC,GACbiL,GAASwB,S,SC3CDiC,GACdC,GAEA,MAAO,CACLC,UAAU,EACVC,YAAY,EACZF,QAAO,EACPG,QAAQ,I,SVlDoBzM,GAC9BL,GAAeK,ES0GjB0M,CAAgB/M,IC7GhB,SAAYqM,GACV,6BACA,qBACA,uCACA,yCAJF,CAAYA,QAAa,KCKzB,ICAIW,GDAJ,cAUE,WAC4BpV,EACAqV,EACAC,GAFA,KAAAtV,OACA,KAAAqV,eACA,KAAAC,SAX5B,KAAAzR,KAAO4Q,GAAcc,eAGrB,KAAAC,ODkBO,CACLR,UAAU,EACVC,YAAY,EACZF,QAAS,KACTG,QAAQ,GCeZ,OAvBE,YAAAO,kBAAA,SAAkBrM,GAChB,GAAKrI,EAAYhJ,KAAKiI,MAUf,IAA+B,MAA3BjI,KAAKsd,aAAavd,MAM3B,OALA,YACEC,KAAKsd,aAAaK,SAAShN,UAC3B,4DAGK3Q,KAEP,IAAM6Y,EAAY7Y,KAAKsd,aAAaM,QAAQ,IAAI7V,EAAKsJ,IACrD,OAAO,IAAIwM,EAAa/V,IAAgB+Q,EAAW7Y,KAAKud,QAdxD,OAJA,YACEvV,EAAahI,KAAKiI,QAAUoJ,EAC5B,iDAEK,IAAIwM,EACT1V,EAAanI,KAAKiI,MAClBjI,KAAKsd,aACLtd,KAAKud,SAcb,EA1CA,GCkBA,cASE,WACkBxd,EACA4d,QAAA,IAAAA,IAtBbN,KACHA,GAAyB,IAAIvJ,GAC3B1P,IAoBcuZ,EAjBXN,IAgBW,KAAAtd,QACA,KAAA4d,WA+SpB,OAzTS,EAAAG,WAAP,SAAqBxZ,GACnB,IAAIyZ,EAAyB,IAAIC,EAAiB,MAIlD,OAHA9Y,EAAKZ,GAAK,SAAC2Z,EAAmBC,GAC5BH,EAAOA,EAAKle,IAAI,IAAIkI,EAAKkW,GAAYC,MAEhCH,GAcT,YAAApN,QAAA,WACE,OAAsB,OAAf3Q,KAAKD,OAAkBC,KAAK2d,SAAShN,WAa9C,YAAAwN,iCAAA,SACEC,EACAC,GAEA,GAAkB,MAAdre,KAAKD,OAAiBse,EAAUre,KAAKD,OACvC,MAAO,CAAEkI,KAAMH,IAAgB/H,MAAOC,KAAKD,OAE3C,GAAIiJ,EAAYoV,GACd,OAAO,KAEP,IAAMvM,EAAQ7J,EAAaoW,GACrBpP,EAAQhP,KAAK2d,SAASvd,IAAIyR,GAChC,GAAc,OAAV7C,EAAgB,CAClB,IAAMsP,EAA4BtP,EAAMmP,iCACtChW,EAAaiW,GACbC,GAEF,OAAiC,MAA7BC,EAKK,CAAErW,KAJQY,EACf,IAAId,EAAK8J,GACTyM,EAA0BrW,MAEHlI,MAAOue,EAA0Bve,OAEnD,KAGT,OAAO,MAUf,YAAAwe,yBAAA,SACEH,GAEA,OAAOpe,KAAKme,iCAAiCC,GAAc,WAAM,aAMnE,YAAAR,QAAA,SAAQQ,GACN,GAAIpV,EAAYoV,GACd,OAAOpe,KAEP,IAAM6R,EAAQ7J,EAAaoW,GACrBvF,EAAY7Y,KAAK2d,SAASvd,IAAIyR,GACpC,OAAkB,OAAdgH,EACKA,EAAU+E,QAAQzV,EAAaiW,IAE/B,IAAIJ,EAAiB,OAYlC,YAAAne,IAAA,SAAIue,EAAoBI,GACtB,GAAIxV,EAAYoV,GACd,OAAO,IAAIJ,EAAcQ,EAAOxe,KAAK2d,UAErC,IAAM9L,EAAQ7J,EAAaoW,GAErBK,GADQze,KAAK2d,SAASvd,IAAIyR,IAAU,IAAImM,EAAiB,OACxCne,IAAIsI,EAAaiW,GAAeI,GACjDjE,EAAcva,KAAK2d,SAASrJ,OAAOzC,EAAO4M,GAChD,OAAO,IAAIT,EAAche,KAAKD,MAAOwa,IAUzC,YAAAha,OAAA,SAAO6d,GACL,GAAIpV,EAAYoV,GACd,OAAIpe,KAAK2d,SAAShN,UACT,IAAIqN,EAAiB,MAErB,IAAIA,EAAc,KAAMhe,KAAK2d,UAGtC,IAAM9L,EAAQ7J,EAAaoW,GACrBpP,EAAQhP,KAAK2d,SAASvd,IAAIyR,GAChC,GAAI7C,EAAO,CACT,IAAMyP,EAAWzP,EAAMzO,OAAO4H,EAAaiW,IACvC7D,OAAW,EAMf,OAJEA,EADEkE,EAAS9N,UACG3Q,KAAK2d,SAASpd,OAAOsR,GAErB7R,KAAK2d,SAASrJ,OAAOzC,EAAO4M,GAEzB,OAAfze,KAAKD,OAAkBwa,EAAY5J,UAC9B,IAAIqN,EAAiB,MAErB,IAAIA,EAAche,KAAKD,MAAOwa,GAGvC,OAAOva,MAWb,YAAAI,IAAA,SAAIge,GACF,GAAIpV,EAAYoV,GACd,OAAOpe,KAAKD,MAEZ,IAAM8R,EAAQ7J,EAAaoW,GACrBpP,EAAQhP,KAAK2d,SAASvd,IAAIyR,GAChC,OAAI7C,EACKA,EAAM5O,IAAI+H,EAAaiW,IAEvB,MAYb,YAAAM,QAAA,SAAQN,EAAoBO,GAC1B,GAAI3V,EAAYoV,GACd,OAAOO,EAEP,IAAM9M,EAAQ7J,EAAaoW,GAErBK,GADQze,KAAK2d,SAASvd,IAAIyR,IAAU,IAAImM,EAAiB,OACxCU,QAAQvW,EAAaiW,GAAeO,GACvDpE,OAAW,EAMf,OAJEA,EADEkE,EAAS9N,UACG3Q,KAAK2d,SAASpd,OAAOsR,GAErB7R,KAAK2d,SAASrJ,OAAOzC,EAAO4M,GAErC,IAAIT,EAAche,KAAKD,MAAOwa,IASzC,YAAAqE,KAAA,SAAQzZ,GACN,OAAOnF,KAAK6e,MAAM/W,IAAgB3C,IAM5B,YAAA0Z,MAAR,SACEC,EACA3Z,GAEA,IAAM4Z,EAA4B,GAMlC,OALA/e,KAAK2d,SAAS1J,kBACZ,SAAC+K,EAAkBnG,GACjBkG,EAAMC,GAAYnG,EAAUgG,MAAMhW,EAAUiW,EAAWE,GAAW7Z,MAG/DA,EAAG2Z,EAAW9e,KAAKD,MAAOgf,IAMnC,YAAAE,WAAA,SAAchX,EAAYzC,GACxB,OAAOxF,KAAKkf,YAAYjX,EAAMH,IAAgBtC,IAGxC,YAAA0Z,YAAR,SACEC,EACAL,EACAtZ,GAEA,IAAMgO,IAASxT,KAAKD,OAAQyF,EAAEsZ,EAAW9e,KAAKD,OAC9C,GAAIyT,EACF,OAAOA,EAEP,GAAIxK,EAAYmW,GACd,OAAO,KAEP,IAAMtN,EAAQ7J,EAAamX,GACrBC,EAAYpf,KAAK2d,SAASvd,IAAIyR,GACpC,OAAIuN,EACKA,EAAUF,YACf/W,EAAagX,GACbtW,EAAUiW,EAAWjN,GACrBrM,GAGK,MAMf,YAAA6Z,cAAA,SACEpX,EACAzC,GAEA,OAAOxF,KAAKsf,eAAerX,EAAMH,IAAgBtC,IAG3C,YAAA8Z,eAAR,SACEH,EACAI,EACA/Z,GAEA,GAAIwD,EAAYmW,GACd,OAAOnf,KAEHA,KAAKD,OACPyF,EAAE+Z,EAAqBvf,KAAKD,OAE9B,IAAM8R,EAAQ7J,EAAamX,GACrBC,EAAYpf,KAAK2d,SAASvd,IAAIyR,GACpC,OAAIuN,EACKA,EAAUE,eACfnX,EAAagX,GACbtW,EAAU0W,EAAqB1N,GAC/BrM,GAGK,IAAIwY,EAAiB,OAWlC,YAAAwB,QAAA,SAAQha,GACNxF,KAAKyf,SAAS3X,IAAgBtC,IAGxB,YAAAia,SAAR,SACEF,EACA/Z,GAEAxF,KAAK2d,SAAS1J,kBAAiB,SAAC5C,EAAWwH,GACzCA,EAAU4G,SAAS5W,EAAU0W,EAAqBlO,GAAY7L,MAE5DxF,KAAKD,OACPyF,EAAE+Z,EAAqBvf,KAAKD,QAIhC,YAAA2f,aAAA,SAAala,GACXxF,KAAK2d,SAAS1J,kBACZ,SAAC5C,EAAmBwH,GACdA,EAAU9Y,OACZyF,EAAE6L,EAAWwH,EAAU9Y,WAKjC,EA1TA,GC1BA,cAIE,WAAmB0d,EAAgCxV,GAAhC,KAAAwV,SAAgC,KAAAxV,OAFnD,KAAA6D,KAAO4Q,GAAciD,gBAWvB,OAPE,YAAAjC,kBAAA,SAAkBrM,GAChB,OAAIrI,EAAYhJ,KAAKiI,MACZ,IAAI2X,EAAe5f,KAAKyd,OAAQ3V,KAEhC,IAAI8X,EAAe5f,KAAKyd,OAAQtV,EAAanI,KAAKiI,QAG/D,EAbA,GCCA,cAIE,WACSwV,EACAxV,EACA4X,GAFA,KAAApC,SACA,KAAAxV,OACA,KAAA4X,OALT,KAAA/T,KAAO4Q,GAAcoD,UAmBvB,OAXE,YAAApC,kBAAA,SAAkBrM,GAChB,OAAIrI,EAAYhJ,KAAKiI,MACZ,IAAI8X,EACT/f,KAAKyd,OACL3V,IACA9H,KAAK6f,KAAKzO,kBAAkBC,IAGvB,IAAI0O,EAAU/f,KAAKyd,OAAQtV,EAAanI,KAAKiI,MAAOjI,KAAK6f,OAGtE,EArBA,GCSA,cAIE,WAC4BpC,EACAxV,EACA0V,GAFA,KAAAF,SACA,KAAAxV,OACA,KAAA0V,WAL5B,KAAA7R,KAAO4Q,GAAcsD,MA+CvB,OApCE,YAAAtC,kBAAA,SAAkBrM,GAChB,GAAIrI,EAAYhJ,KAAKiI,MAAO,CAC1B,IAAM4Q,EAAY7Y,KAAK2d,SAASC,QAAQ,IAAI7V,EAAKsJ,IACjD,OAAIwH,EAAUlI,UAEL,KACEkI,EAAU9Y,MAEZ,IAAIggB,GAAU/f,KAAKyd,OAAQ3V,IAAgB+Q,EAAU9Y,OAGrD,IAAIkgB,EAAMjgB,KAAKyd,OAAQ3V,IAAgB+Q,GAOhD,OAJA,YACE7Q,EAAahI,KAAKiI,QAAUoJ,EAC5B,kEAEK,IAAI4O,EAAMjgB,KAAKyd,OAAQtV,EAAanI,KAAKiI,MAAOjI,KAAK2d,WAOhE,YAAAld,SAAA,WACE,MACE,aACAT,KAAKiI,KACL,KACAjI,KAAKyd,OAAOhd,WACZ,WACAT,KAAK2d,SAASld,WACd,KAGN,EAjDA,GCJA,cACE,WACUyf,EACAC,EACAC,GAFA,KAAAF,QACA,KAAAC,oBACA,KAAAC,YAmCZ,OA7BE,YAAAC,mBAAA,WACE,OAAOrgB,KAAKmgB,mBAMd,YAAAG,WAAA,WACE,OAAOtgB,KAAKogB,WAGd,YAAAG,kBAAA,SAAkBtY,GAChB,GAAIe,EAAYf,GACd,OAAOjI,KAAKqgB,uBAAyBrgB,KAAKogB,UAG5C,IAAMpB,EAAWhX,EAAaC,GAC9B,OAAOjI,KAAKwgB,mBAAmBxB,IAGjC,YAAAwB,mBAAA,SAAmB1gB,GACjB,OACGE,KAAKqgB,uBAAyBrgB,KAAKogB,WAAcpgB,KAAKkgB,MAAM3O,SAASzR,IAI1E,YAAA2gB,QAAA,WACE,OAAOzgB,KAAKkgB,OAEhB,EAvCA,G,SCIgBQ,GACdC,EACAC,GAEA,MAAO,CAAED,WAAU,EAAEC,YAAW,G,SAGlBC,GACdC,EACAC,EACAC,EACAC,GAEA,OAAOP,GACL,IAAIQ,GAAUH,EAAWC,EAAUC,GACnCH,EAAUF,a,SAIEO,GACdL,EACAM,EACAJ,EACAC,GAEA,OAAOP,GACLI,EAAUH,WACV,IAAIO,GAAUE,EAAYJ,EAAUC,I,SAIxBI,GACdP,GAEA,OAAOA,EAAUH,WAAWN,qBACxBS,EAAUH,WAAWF,UACrB,K,SAGUa,GACdR,GAEA,OAAOA,EAAUF,YAAYP,qBACzBS,EAAUF,YAAYH,UACtB,K,SC7BUc,GAAYC,GAC1B,MAAO,CAAE1V,KAAM,QAAkB0V,aAAY,G,SAG/BC,GACdpQ,EACAmQ,GAEA,MAAO,CAAE1V,KAAM,cAAwB0V,aAAY,EAAEnQ,UAAS,G,SAGhDqQ,GACdrQ,EACAmQ,GAEA,MAAO,CAAE1V,KAAM,gBAA0B0V,aAAY,EAAEnQ,UAAS,G,SAGlDsQ,GACdtQ,EACAmQ,EACAI,GAEA,MAAO,CACL9V,KAAM,gBACN0V,aAAY,EACZnQ,UAAS,EACTuQ,QAAO,GCrCX,kBACE,WAA6BC,GAAA,KAAAA,SAgI/B,OA9HE,YAAAjQ,YAAA,SACEiO,EACA/f,EACA2e,EACAqD,EACArE,EACAsE,GAEA,YACElC,EAAK9M,UAAU/S,KAAK6hB,QACpB,qDAEF,IAAMG,EAAWnC,EAAKzO,kBAAkBtR,GAExC,OACEkiB,EAAS1Q,SAASwQ,GAAc9O,OAAOyL,EAASnN,SAASwQ,KAKrDE,EAASrR,YAAc8N,EAAS9N,UAK3BkP,GAIiB,MAAxBkC,IACEtD,EAAS9N,UACPkP,EAAKtO,SAASzR,GAChBiiB,EAAqBE,iBACnBP,GAAmB5hB,EAAKkiB,IAG1B,YACEnC,EAAKpP,aACL,uEAGKuR,EAASrR,UAClBoR,EAAqBE,iBAAiBR,GAAiB3hB,EAAK2e,IAE5DsD,EAAqBE,iBACnBN,GAAmB7hB,EAAK2e,EAAUuD,KAIpCnC,EAAKpP,cAAgBgO,EAAS9N,UACzBkP,EAGAA,EAAKnO,qBAAqB5R,EAAK2e,GAAU3L,UAAU9S,KAAK6hB,UAOnE,YAAAK,eAAA,SACEN,EACAO,EACAJ,GA6BA,OA3B4B,MAAxBA,IACGH,EAAQnR,cACXmR,EAAQ7P,aAAagF,IAAgB,SAACjX,EAAK2R,GACpC0Q,EAAQ5Q,SAASzR,IACpBiiB,EAAqBE,iBACnBP,GAAmB5hB,EAAK2R,OAK3B0Q,EAAQ1R,cACX0R,EAAQpQ,aAAagF,IAAgB,SAACjX,EAAK2R,GACzC,GAAImQ,EAAQrQ,SAASzR,GAAM,CACzB,IAAMkiB,EAAWJ,EAAQxQ,kBAAkBtR,GACtCkiB,EAAShP,OAAOvB,IACnBsQ,EAAqBE,iBACnBN,GAAmB7hB,EAAK2R,EAAWuQ,SAIvCD,EAAqBE,iBACnBR,GAAiB3hB,EAAK2R,QAMzB0Q,EAAQrP,UAAU9S,KAAK6hB,SAMhC,YAAA3Q,eAAA,SAAe0Q,EAAe5G,GAC5B,OAAI4G,EAAQjR,UACHkK,GAAa7J,WAEb4Q,EAAQ1Q,eAAe8J,IAOlC,YAAAoH,aAAA,WACE,OAAO,GAMT,YAAAC,iBAAA,WACE,OAAOriB,MAMT,YAAAsiB,SAAA,WACE,OAAOtiB,KAAK6hB,QAEhB,EAjIA,GCTA,2BACmB,KAAAU,UAAiC,IAAIC,IA2ExD,OAzEE,YAAAP,iBAAA,SAAiBQ,GACf,IAAM3W,EAAO2W,EAAO3W,KACdkT,EAAWyD,EAAOpR,UACxB,YACW,gBAATvF,GACW,kBAATA,GACS,kBAATA,EACF,6CAEF,YACe,cAAbkT,EACA,mDAEF,IAAM0D,EAAY1iB,KAAKuiB,UAAUniB,IAAI4e,GACrC,GAAI0D,EAAW,CACb,IAAMC,EAAUD,EAAU5W,KAC1B,GACW,gBAATA,GACY,kBAAZ6W,EAEA3iB,KAAKuiB,UAAU1iB,IACbmf,EACA2C,GACE3C,EACAyD,EAAOjB,aACPkB,EAAUlB,oBAGT,GACI,kBAAT1V,GACY,gBAAZ6W,EAEA3iB,KAAKuiB,UAAUK,OAAO5D,QACjB,GACI,kBAATlT,GACY,kBAAZ6W,EAEA3iB,KAAKuiB,UAAU1iB,IACbmf,EACA0C,GAAmB1C,EAAU0D,EAAUd,eAEpC,GACI,kBAAT9V,GACY,gBAAZ6W,EAEA3iB,KAAKuiB,UAAU1iB,IACbmf,EACAyC,GAAiBzC,EAAUyD,EAAOjB,mBAE/B,IACI,kBAAT1V,GACY,kBAAZ6W,EAOA,MAAM,YACJ,mCACEF,EACA,mBACAC,GATJ1iB,KAAKuiB,UAAU1iB,IACbmf,EACA2C,GAAmB3C,EAAUyD,EAAOjB,aAAckB,EAAUd,gBAWhE5hB,KAAKuiB,UAAU1iB,IAAImf,EAAUyD,IAIjC,YAAAI,WAAA,WACE,OAAOxgB,MAAMygB,KAAK9iB,KAAKuiB,UAAUQ,WAErC,EA5EA,GCWA,cACE,WAAmBC,GAAA,KAAAA,aAKrB,OAHS,EAAAC,MAAP,WACE,OAAO,IAAIC,EAAc,IAAIlF,GAAc,QAE/C,EANA,G,SAQgBmF,GACdC,EACAnb,EACAgL,GAEA,GAAIjK,EAAYf,GACd,OAAO,IAAIib,GAAc,IAAIlF,GAAc/K,IAE3C,IAAMoQ,EAAWD,EAAcJ,WAAWzE,yBAAyBtW,GACnE,GAAgB,MAAZob,EAAkB,CACpB,IAAMC,EAAeD,EAASpb,KAC1BlI,EAAQsjB,EAAStjB,MACfqe,EAAenV,EAAgBqa,EAAcrb,GAEnD,OADAlI,EAAQA,EAAM6R,YAAYwM,EAAcnL,GACjC,IAAIiQ,GACTE,EAAcJ,WAAWnjB,IAAIyjB,EAAcvjB,IAG7C,IAAM6d,EAAU,IAAII,GAAc/K,GAC5BsQ,EAAeH,EAAcJ,WAAWtE,QAAQzW,EAAM2V,GAC5D,OAAO,IAAIsF,GAAcK,G,SAKfC,GACdJ,EACAnb,EACAwb,GAEA,IAAIC,EAAWN,EAIf,OAHAle,EAAKue,GAAS,SAACzE,EAAkB/L,GAC/ByQ,EAAWP,GAAsBO,EAAU7a,EAAUZ,EAAM+W,GAAW/L,MAEjEyQ,E,SAWOC,GACdP,EACAnb,GAEA,GAAIe,EAAYf,GACd,OAAOib,GAAcD,QAErB,IAAMM,EAAeH,EAAcJ,WAAWtE,QAC5CzW,EACA,IAAI+V,GAAoB,OAE1B,OAAO,IAAIkF,GAAcK,G,SAYbK,GACdR,EACAnb,GAEA,OAA4D,MAArD4b,GAA6BT,EAAenb,G,SAWrC4b,GACdT,EACAnb,GAEA,IAAMob,EAAWD,EAAcJ,WAAWzE,yBAAyBtW,GACnE,OAAgB,MAAZob,EACKD,EAAcJ,WAClB5iB,IAAIijB,EAASpb,MACbqJ,SAASrI,EAAgBoa,EAASpb,KAAMA,IAEpC,K,SAUK6b,GACdV,GAEA,IAAMzF,EAAwB,GACxB1K,EAAOmQ,EAAcJ,WAAWjjB,MAoBtC,OAnBY,MAARkT,EAEGA,EAAKxC,cACPwC,EAAsBlB,aACrBgF,IACA,SAAC1F,EAAWI,GACVkM,EAASjZ,KAAK,IAAIyR,GAAU9E,EAAWI,OAK7C2R,EAAcJ,WAAWrF,SAAS1J,kBAChC,SAAC5C,EAAWwH,GACa,MAAnBA,EAAU9Y,OACZ4d,EAASjZ,KAAK,IAAIyR,GAAU9E,EAAWwH,EAAU9Y,WAKlD4d,E,SAGOoG,GACdX,EACAnb,GAEA,GAAIe,EAAYf,GACd,OAAOmb,EAEP,IAAMY,EAAgBH,GAA6BT,EAAenb,GAClE,OACS,IAAIib,GADQ,MAAjBc,EACuB,IAAIhG,GAAcgG,GAElBZ,EAAcJ,WAAWpF,QAAQ3V,I,SAShDgc,GAAqBb,GACnC,OAAOA,EAAcJ,WAAWrS,U,SASlBuT,GACdd,EACAnQ,GAEA,OAAOkR,GAAkBrc,IAAgBsb,EAAcJ,WAAY/P,GAGrE,SAASkR,GACP/F,EACAgG,EACAnR,GAEA,GAAuB,MAAnBmR,EAAUrkB,MAEZ,OAAOkT,EAAKrB,YAAYwM,EAAcgG,EAAUrkB,OAEhD,IAAI,EAAgB,KAyBpB,OAxBAqkB,EAAUzG,SAAS1J,kBAAiB,SAAC+K,EAAUnG,GAC5B,cAAbmG,GAGF,YACsB,OAApBnG,EAAU9Y,MACV,6CAEF,EAAgB8Y,EAAU9Y,OAE1BkT,EAAOkR,GACLtb,EAAUuV,EAAcY,GACxBnG,EACA5F,MAKDA,EAAK3B,SAAS8M,GAAczN,WAA+B,OAAlB,IAC5CsC,EAAOA,EAAKrB,YACV/I,EAAUuV,EAAc,aACxB,IAGGnL,E,SCtLKoR,GACdD,EACAnc,GAEA,OAAOqc,GAAgBrc,EAAMmc,G,SAuFfG,GACdH,EACAI,GAOA,IAAMlJ,EAAM8I,EAAUK,UAAUC,WAAU,SAAAnf,GACxC,OAAOA,EAAEif,UAAYA,KAEvB,YAAOlJ,GAAO,EAAG,gDACjB,IAAMqJ,EAAgBP,EAAUK,UAAUnJ,GAC1C8I,EAAUK,UAAUG,OAAOtJ,EAAK,GAOhC,IALA,IAAIuJ,EAAyBF,EAAcG,QACvCC,GAAsC,EAEtC9iB,EAAImiB,EAAUK,UAAUtiB,OAAS,EAE9B0iB,GAA0B5iB,GAAK,GAAG,CACvC,IAAM+iB,EAAeZ,EAAUK,UAAUxiB,GACrC+iB,EAAaF,UAEb7iB,GAAKqZ,GACL2J,GAA6BD,EAAcL,EAAc1c,MAGzD4c,GAAyB,EAChB9a,GAAa4a,EAAc1c,KAAM+c,EAAa/c,QAEvD8c,GAAsC,IAG1C9iB,IAGF,GAAK4iB,EAEE,IAAIE,EAGT,OA2CJ,SAA6BX,GAC3BA,EAAUc,cAAgBC,GACxBf,EAAUK,UACVW,GACAtd,KAEEsc,EAAUK,UAAUtiB,OAAS,EAC/BiiB,EAAUiB,YACRjB,EAAUK,UAAUL,EAAUK,UAAUtiB,OAAS,GAAGqiB,QAEtDJ,EAAUiB,aAAe,EAtDzBC,CAAoBlB,IACb,EAGHO,EAAc9E,KAChBuE,EAAUc,cAAgBvB,GACxBS,EAAUc,cACVP,EAAc1c,MAIhB/C,EADiByf,EAAchH,UAChB,SAACtM,GACd+S,EAAUc,cAAgBvB,GACxBS,EAAUc,cACVrc,EAAU8b,EAAc1c,KAAMoJ,OAIpC,OAAO,EArBP,OAAO,EAyBX,SAAS4T,GACPM,EACAtd,GAEA,GAAIsd,EAAY1F,KACd,OAAO9V,GAAawb,EAAYtd,KAAMA,GAEtC,IAAK,IAAMoJ,KAAakU,EAAY5H,SAClC,GACE4H,EAAY5H,SAASvY,eAAeiM,IACpCtH,GAAalB,EAAU0c,EAAYtd,KAAMoJ,GAAYpJ,GAErD,OAAO,EAGX,OAAO,EAwBX,SAASmd,GAAwBI,GAC/B,OAAOA,EAAMV,QAOf,SAASK,GACPM,EACAC,EACAC,GAGA,IADA,IAAIvC,EAAgBF,GAAcD,QACzBhhB,EAAI,EAAGA,EAAIwjB,EAAOtjB,SAAUF,EAAG,CACtC,IAAMujB,EAAQC,EAAOxjB,GAIrB,GAAIyjB,EAAOF,GAAQ,CACjB,IAAMI,EAAYJ,EAAMvd,KACpBmW,OAAY,EAChB,GAAIoH,EAAM3F,KACJ9V,GAAa4b,EAAUC,GAEzBxC,EAAgBD,GACdC,EAFFhF,EAAenV,EAAgB0c,EAAUC,GAIvCJ,EAAM3F,MAEC9V,GAAa6b,EAAWD,KACjCvH,EAAenV,EAAgB2c,EAAWD,GAC1CvC,EAAgBD,GACdC,EACAtb,IACA0d,EAAM3F,KAAKvO,SAAS8M,SAKnB,KAAIoH,EAAM7H,SAgCf,MAAM,YAAe,8CA/BrB,GAAI5T,GAAa4b,EAAUC,GAEzBxC,EAAgBI,GACdJ,EAFFhF,EAAenV,EAAgB0c,EAAUC,GAIvCJ,EAAM7H,eAEH,GAAI5T,GAAa6b,EAAWD,GAEjC,GAAI3c,EADJoV,EAAenV,EAAgB2c,EAAWD,IAExCvC,EAAgBI,GACdJ,EACAtb,IACA0d,EAAM7H,cAEH,CACL,IAAM3O,EAAQ,YAAQwW,EAAM7H,SAAU3V,EAAaoW,IACnD,GAAIpP,EAAO,CAET,IAAM6W,EAAW7W,EAAMsC,SAASnJ,EAAaiW,IAC7CgF,EAAgBD,GACdC,EACAtb,IACA+d,OAYd,OAAOzC,E,SAsBO0C,GACd1B,EACA2B,EACAC,EACAC,EACAC,GAEA,GAAKD,GAAsBC,EAyBpB,CACL,IAAMC,EAAQpC,GACZK,EAAUc,cACVa,GAEF,IAAKG,GAAuBjC,GAAqBkC,GAC/C,OAAOH,EAGP,GACGE,GACsB,MAAvBF,GACCpC,GAA8BuC,EAAOre,KAGjC,CAgBL,OAAOoc,GANaiB,GAClBf,EAAUK,WAVG,SAAUe,GACvB,OACGA,EAAMV,SAAWoB,MAChBD,KACEA,EAAkB7a,QAAQoa,EAAMhB,YACnCza,GAAayb,EAAMvd,KAAM8d,IACxBhc,GAAagc,EAAUP,EAAMvd,SAMjC8d,GAEmBC,GAAuBnL,GAAa7J,YAhBzD,OAAO,KAtCX,IAAMgT,EAAgBH,GACpBO,EAAUc,cACVa,GAEF,GAAqB,MAAjB/B,EACF,OAAOA,EAEP,IAAMoC,EAAWrC,GACfK,EAAUc,cACVa,GAEF,OAAI9B,GAAqBmC,GAChBJ,EAEgB,MAAvBA,GACCpC,GAA8BwC,EAAUte,KAMlCoc,GAAmBkC,EADLJ,GAAuBnL,GAAa7J,YAFlD,K,SAySCqV,GACdC,EACAN,EACAC,EACAC,GAEA,OAAOJ,GACLQ,EAAalC,UACbkC,EAAaP,SACbC,EACAC,EACAC,G,SASYK,GACdD,EACAE,GAEA,O,SAjRApC,EACA2B,EACAS,GAEA,IAAIC,EAAmB5L,GAAa7J,WAC9B0V,EAAc7C,GAClBO,EAAUc,cACVa,GAEF,GAAIW,EAUF,OATKA,EAAYjW,cAEfiW,EAAY3U,aAAagF,IAAgB,SAAC1F,EAAW6M,GACnDuI,EAAmBA,EAAiB/U,qBAClCL,EACA6M,MAICuI,EACF,GAAID,EAAwB,CAGjC,IAAM,EAAQzC,GACZK,EAAUc,cACVa,GAsBF,OApBAS,EAAuBzU,aACrBgF,IACA,SAAC1F,EAAWI,GACV,IAAMwB,EAAOiR,GACXH,GAAgC,EAAO,IAAIhc,EAAKsJ,IAChDI,GAEFgV,EAAmBA,EAAiB/U,qBAClCL,EACA4B,MAKN6Q,GAAiC,GAAO6C,SAAQ,SAAApO,GAC9CkO,EAAmBA,EAAiB/U,qBAClC6G,EAAU/X,KACV+X,EAAUtF,SAGPwT,EAcP,OANA3C,GAJcC,GACZK,EAAUc,cACVa,IAEsCY,SAAQ,SAAApO,GAC9CkO,EAAmBA,EAAiB/U,qBAClC6G,EAAU/X,KACV+X,EAAUtF,SAGPwT,EAoNFG,CACLN,EAAalC,UACbkC,EAAaP,SACbS,G,SAoBYK,GACdP,EACAre,EACA6e,EACAC,GAEA,O,SA9NA3C,EACA2B,EACA9H,EACA6I,EACAC,GAEA,YACED,GAAqBC,EACrB,6DAEF,IAAM9e,EAAOY,EAAUkd,EAAU9H,GACjC,GAAI2F,GAA8BQ,EAAUc,cAAejd,GAGzD,OAAO,KAGP,IAAM+e,EAAajD,GACjBK,EAAUc,cACVjd,GAEF,OAAIgc,GAAqB+C,GAEhBD,EAAmBzV,SAAS2M,GAQ5BiG,GACL8C,EACAD,EAAmBzV,SAAS2M,IA6L3BgJ,CACLX,EAAalC,UACbkC,EAAaP,SACb9d,EACA6e,EACAC,G,SAUYG,GACdZ,EACAre,GAEA,O,SAnKAmc,EACAnc,GAEA,OAAO4b,GAA6BO,EAAUc,cAAejd,GAgKtDkf,CACLb,EAAalC,UACbvb,EAAUyd,EAAaP,SAAU9d,I,SAQrBmf,GACdd,EACAe,EACAvL,EACA9H,EACA5N,EACA4L,GAEA,O,SA1KAoS,EACA2B,EACAsB,EACAvL,EACA9H,EACA5N,EACA4L,GAEA,IAAIsV,EACEnB,EAAQpC,GACZK,EAAUc,cACVa,GAEI/B,EAAgBH,GAA6BsC,EAAOre,KAC1D,GAAqB,MAAjBkc,EACFsD,EAAYtD,MACP,IAA0B,MAAtBqD,EAIT,MAAO,GAHPC,EAAYpD,GAAmBiC,EAAOkB,GAMxC,IADAC,EAAYA,EAAUxU,UAAUd,IACjBrB,WAAc2W,EAAU7W,aAerC,MAAO,GARP,IANA,IAAM8W,EAAQ,GACR5d,EAAMqI,EAAMoE,aACZ2D,EAAO3T,EACRkhB,EAA2BvR,uBAAuB+F,EAAW9J,GAC7DsV,EAA2BxR,gBAAgBgG,EAAW9J,GACvDgI,EAAOD,EAAKxG,UACTyG,GAAQuN,EAAMplB,OAAS6R,GACC,IAAzBrK,EAAIqQ,EAAM8B,IACZyL,EAAM7iB,KAAKsV,GAEbA,EAAOD,EAAKxG,UAEd,OAAOgU,EAsIFC,CACLlB,EAAalC,UACbkC,EAAaP,SACbsB,EACAvL,EACA9H,EACA5N,EACA4L,G,SAQYyV,GACdnB,EACAtH,EACA0I,GAEA,O,SA3OAtD,EACA2B,EACA/G,EACA+H,GAEA,IAAM9e,EAAOY,EAAUkd,EAAU/G,GAC3BgF,EAAgBH,GACpBO,EAAUc,cACVjd,GAEF,OAAqB,MAAjB+b,EACKA,EAEH+C,EAAmBvG,mBAAmBxB,GAKjCkF,GAJYH,GACjBK,EAAUc,cACVjd,GAIA8e,EAAmBtG,UAAUrP,kBAAkB4N,IAG1C,KAoNJ2I,CACLrB,EAAalC,UACbkC,EAAaP,SACb/G,EACA0I,G,SAOYE,GACdtB,EACAjV,GAEA,OAAOiT,GACLzb,EAAUyd,EAAaP,SAAU1U,GACjCiV,EAAalC,W,SAIDE,GACdrc,EACAmc,GAEA,MAAO,CACL2B,SAAU9d,EACVmc,UAAS,GC/vBb,IAuBayD,GAA2B,IAvBxC,yBAkBA,OAdE,YAAAC,iBAAA,SAAiB9I,GACf,OAAO,MAMT,YAAA+I,mBAAA,SACE/V,EACAhD,EACA5I,GAEA,OAAO,MAEX,EAlBA,IA6BA,cACE,WACU4hB,EACAC,EACAC,QAAA,IAAAA,MAAA,MAFA,KAAAF,UACA,KAAAC,aACA,KAAAC,0BA6CZ,OAvCE,YAAAJ,iBAAA,SAAiB9I,GACf,IAAM/L,EAAOjT,KAAKioB,WAAWtH,WAC7B,GAAI1N,EAAKuN,mBAAmBxB,GAC1B,OAAO/L,EAAKwN,UAAUrP,kBAAkB4N,GAExC,IAAMmJ,EAC4B,MAAhCnoB,KAAKkoB,wBACD,IAAIhH,GAAUlhB,KAAKkoB,yBAAyB,GAAM,GAClDloB,KAAKioB,WAAWrH,YACtB,OAAO6G,GAA8BznB,KAAKgoB,QAAShJ,EAAUmJ,IAOjE,YAAAJ,mBAAA,SACE/V,EACAhD,EACA5I,GAEA,IAAMihB,EAC4B,MAAhCrnB,KAAKkoB,wBACDloB,KAAKkoB,wBACL5G,GAA+BthB,KAAKioB,YACpCV,EAAQH,GACZpnB,KAAKgoB,QACLX,EACArY,EACA,EACA5I,EACA4L,GAEF,OAAqB,IAAjBuV,EAAMplB,OACD,KAEAolB,EAAM,IAGnB,EAjDA,G,SCUgBa,GACdC,EACAC,EACAC,EACAC,EACAC,GAEA,IACI/H,EAAcgI,EADZC,EAAc,IAAIC,GAExB,GAAIL,EAAUzc,OAAS4Q,GAAcoD,UAAW,CAC9C,IAAM+I,EAAYN,EACdM,EAAUpL,OAAOR,SACnByD,EAAeoI,GACbT,EACAC,EACAO,EAAU5gB,KACV4gB,EAAUhJ,KACV2I,EACAC,EACAE,IAGF,YAAOE,EAAUpL,OAAOP,WAAY,mBAIpCwL,EACEG,EAAUpL,OAAON,QAChBmL,EAAa1H,YAAYN,eAAiBtX,EAAY6f,EAAU5gB,MACnEyY,EAAeqI,GACbV,EACAC,EACAO,EAAU5gB,KACV4gB,EAAUhJ,KACV2I,EACAC,EACAC,EACAC,SAGC,GAAIJ,EAAUzc,OAAS4Q,GAAcsD,MAAO,CACjD,IAAMmG,EAAQoC,EACVpC,EAAM1I,OAAOR,SACfyD,EAoYN,SACE2H,EACAvH,EACA7Y,EACA+gB,EACAR,EACA5H,EACA+H,GAQA,IAAIM,EAAenI,EA+BnB,OA9BAkI,EAAgBxJ,SAAQ,SAACpB,EAAc3M,GACrC,IAAMmU,EAAY/c,EAAUZ,EAAMmW,GAC9B8K,GAA2BpI,EAAW9Y,EAAa4d,MACrDqD,EAAeH,GACbT,EACAY,EACArD,EACAnU,EACA+W,EACA5H,EACA+H,OAKNK,EAAgBxJ,SAAQ,SAACpB,EAAc3M,GACrC,IAAMmU,EAAY/c,EAAUZ,EAAMmW,GAC7B8K,GAA2BpI,EAAW9Y,EAAa4d,MACtDqD,EAAeH,GACbT,EACAY,EACArD,EACAnU,EACA+W,EACA5H,EACA+H,OAKCM,EAlbYE,CACbd,EACAC,EACAnC,EAAMle,KACNke,EAAMxI,SACN6K,EACAC,EACAE,IAGF,YAAOxC,EAAM1I,OAAOP,WAAY,mBAEhCwL,EACEvC,EAAM1I,OAAON,QAAUmL,EAAa1H,YAAYN,aAClDI,EAAe0I,GACbf,EACAC,EACAnC,EAAMle,KACNke,EAAMxI,SACN6K,EACAC,EACAC,EACAC,SAGC,GAAIJ,EAAUzc,OAAS4Q,GAAcc,eAAgB,CAC1D,IAAM6L,EAAed,EAYnB7H,EAXG2I,EAAa9L,OAomBtB,SACE8K,EACAvH,EACA7Y,EACAugB,EACAxC,EACA2C,GAEA,IAAI3H,EACJ,GAAqD,MAAjDkG,GAA2BsB,EAAavgB,GAC1C,OAAO6Y,EAEP,IAAMrD,EAAS,IAAI6L,GACjBd,EACA1H,EACAkF,GAEIuD,EAAgBzI,EAAUH,WAAWF,UACvC+I,OAAa,EACjB,GAAIxgB,EAAYf,IAAgC,cAAvBD,EAAaC,GAAuB,CAC3D,IAAIuO,OAAO,EACX,GAAIsK,EAAUF,YAAYP,qBACxB7J,EAAU6P,GACRmC,EACAlH,GAA+BR,QAE5B,CACL,IAAM2I,EAAiB3I,EAAUF,YAAYH,UAC7C,YACEgJ,aAA0B5O,GAC1B,iDAEFrE,EAAU+P,GACRiC,EACAiB,GAGJjT,EAAUA,EACVgT,EAAgBnB,EAAc3C,OAAOxD,eACnCqH,EACA/S,EACAmS,OAEG,CACL,IAAM3J,EAAWhX,EAAaC,GAC1BwW,EAAWgJ,GACbe,EACAxJ,EACA8B,EAAUF,aAGE,MAAZnC,GACAqC,EAAUF,YAAYJ,mBAAmBxB,KAEzCP,EAAW8K,EAAcnY,kBAAkB4N,KAG3CwK,EADc,MAAZ/K,EACc4J,EAAc3C,OAAO9T,YACnC2X,EACAvK,EACAP,EACAtW,EAAaF,GACbwV,EACAkL,GAEO7H,EAAUH,WAAWF,UAAUlP,SAASyN,GAEjCqJ,EAAc3C,OAAO9T,YACnC2X,EACAvK,EACAnE,GAAa7J,WACb7I,EAAaF,GACbwV,EACAkL,GAGcY,GAGF5Y,WACdmQ,EAAUF,YAAYP,uBAGtBW,EAAWqF,GACTmC,EACAlH,GAA+BR,KAEpBrQ,eACX+Y,EAAgBnB,EAAc3C,OAAOxD,eACnCsH,EACAxI,EACA2H,IAQR,OAHA3H,EACEF,EAAUF,YAAYP,sBACqC,MAA3D6G,GAA2BsB,EAAa1gB,KACnC+Y,GACLC,EACA0I,EACAxI,EACAqH,EAAc3C,OAAOtD,gBAhsBNsH,CACbrB,EACAC,EACAe,EAAaphB,KACbugB,EACAC,EACAE,GA2eR,SACEN,EACAvH,EACA6I,EACArM,EACAkL,EACAC,EACAE,GAEA,GAAwD,MAApDzB,GAA2BsB,EAAamB,GAC1C,OAAO7I,EAIT,IAAM4H,EAAmB5H,EAAUF,YAAYN,aAIzCM,EAAcE,EAAUF,YAC9B,GAA0B,MAAtBtD,EAAavd,MAAe,CAE9B,GACGiJ,EAAY2gB,IAAY/I,EAAYP,sBACrCO,EAAYL,kBAAkBoJ,GAE9B,OAAOZ,GACLV,EACAvH,EACA6I,EACA/I,EAAYH,UAAUnP,SAASqY,GAC/BnB,EACAC,EACAC,EACAC,GAEG,GAAI3f,EAAY2gB,GAAU,CAG/B,IAAI,EAAkB,IAAI3L,GAAoB,MAI9C,OAHA4C,EAAYH,UAAU1O,aAAayF,IAAW,SAAChX,EAAMyS,GACnD,EAAkB,EAAgBpT,IAAI,IAAIkI,EAAKvH,GAAOyS,MAEjDmW,GACLf,EACAvH,EACA6I,EACA,EACAnB,EACAC,EACAC,EACAC,GAGF,OAAO7H,EAIT,IAAI,EAAkB,IAAI9C,GAAoB,MAU9C,OATAV,EAAakC,SAAQ,SAACoK,EAAW7pB,GAC/B,IAAM8pB,EAAkBhhB,EAAU8gB,EAASC,GACvChJ,EAAYL,kBAAkBsJ,KAChC,EAAkB,EAAgBhqB,IAChC+pB,EACAhJ,EAAYH,UAAUnP,SAASuY,QAI9BT,GACLf,EACAvH,EACA6I,EACA,EACAnB,EACAC,EACAC,EACAC,GAtkBemB,CACbzB,EACAC,EACAe,EAAaphB,KACbohB,EAAa/L,aACbkL,EACAC,EACAE,OAYC,IAAIJ,EAAUzc,OAAS4Q,GAAciD,gBAS1C,MAAM,YAAe,2BAA6B4I,EAAUzc,MAR5D4U,EAujBJ,SACE2H,EACAvH,EACA7Y,EACAugB,EACAG,GAEA,IAAMoB,EAAgBjJ,EAAUF,YAC1BF,EAAeS,GACnBL,EACAiJ,EAActJ,UACdsJ,EAAc1J,sBAAwBrX,EAAYf,GAClD8hB,EAAczJ,cAEhB,OAAO0J,GACL3B,EACA3H,EACAzY,EACAugB,EACAX,GACAc,GA3kBesB,CACb5B,EACAC,EACAC,EAAUtgB,KACVugB,EACAG,GAKJ,IAAMuB,EAAUvB,EAAY9F,aAE5B,OAGF,SACEyF,EACA5H,EACAiI,GAEA,IAAM5H,EAAYL,EAAaC,WAC/B,GAAII,EAAUV,qBAAsB,CAClC,IAAM8J,EACJpJ,EAAUN,UAAUhQ,cAAgBsQ,EAAUN,UAAU9P,UACpDyZ,EAAkB/I,GAA8BiH,IAEpDK,EAAYxmB,OAAS,IACpBmmB,EAAa3H,WAAWN,sBACxB8J,IAAkBpJ,EAAUN,UAAUzN,OAAOoX,KAC7CrJ,EAAUN,UAAU7P,cAAcoC,OAAOoX,EAAgBxZ,iBAE1D+X,EAAYjkB,KACV6c,GAAYF,GAA8BX,MArBhD2J,CAAgC/B,EAAc5H,EAAcwJ,GACrD,CAAEpJ,UAAWJ,EAAcwJ,QAAO,GA0B3C,SAASF,GACP3B,EACAvH,EACAwJ,EACA9B,EACA/K,EACAkL,GAEA,IAAM4B,EAAezJ,EAAUH,WAC/B,GAA2D,MAAvDuG,GAA2BsB,EAAa8B,GAE1C,OAAOxJ,EAEP,IAAI0I,OAAa,EAAErB,OAAU,EAC7B,GAAInf,EAAYshB,GAMd,GAJA,YACExJ,EAAUF,YAAYP,qBACtB,8DAEES,EAAUF,YAAYN,aAAc,CAItC,IAAMM,EAAcU,GAA+BR,GAK7C0J,EAAwBjE,GAC5BiC,EAJA5H,aAAuB/F,GACnB+F,EACA/F,GAAa7J,YAKnBwY,EAAgBnB,EAAc3C,OAAOxD,eACnCpB,EAAUH,WAAWF,UACrB+J,EACA7B,OAEG,CACL,IAAM8B,EAAepE,GACnBmC,EACAlH,GAA+BR,IAEjC0I,EAAgBnB,EAAc3C,OAAOxD,eACnCpB,EAAUH,WAAWF,UACrBgK,EACA9B,OAGC,CACL,IAAM3J,EAAWhX,EAAasiB,GAC9B,GAAiB,cAAbtL,EAA0B,CAC5B,YACgC,IAA9B9W,EAAcoiB,GACd,yDAEF,IAAMI,EAAeH,EAAa9J,UAG5BkK,EAAkB9D,GACtB2B,EACA8B,EACAI,EALFvC,EAAarH,EAAUF,YAAYH,WASjC+I,EADqB,MAAnBmB,EACctC,EAAc3C,OAAOxU,eACnCwZ,EACAC,GAIcJ,EAAa9J,cAE1B,CACL,IAAMmK,EAAkBziB,EAAamiB,GAEjCO,OAAa,EACjB,GAAIN,EAAa/J,mBAAmBxB,GAAW,CAC7CmJ,EAAarH,EAAUF,YAAYH,UACnC,IAAMqK,EAAmBjE,GACvB2B,EACA8B,EACAC,EAAa9J,UACb0H,GAGA0C,EADsB,MAApBC,EACcP,EACb9J,UACArP,kBAAkB4N,GAClBpN,YAAYgZ,EAAiBE,GAGhBP,EAAa9J,UAAUrP,kBAAkB4N,QAG3D6L,EAAgBpD,GACde,EACAxJ,EACA8B,EAAUF,aAIZ4I,EADmB,MAAjBqB,EACcxC,EAAc3C,OAAO9T,YACnC2Y,EAAa9J,UACbzB,EACA6L,EACAD,EACAnN,EACAkL,GAIc4B,EAAa9J,WAInC,OAAOI,GACLC,EACA0I,EACAe,EAAalK,sBAAwBrX,EAAYshB,GACjDjC,EAAc3C,OAAOtD,gBAK3B,SAAS2G,GACPV,EACAC,EACAgC,EACAS,EACAvC,EACAC,EACAC,EACAC,GAEA,IACIqC,EADEC,EAAgB3C,EAAa1H,YAE7BsK,EAAexC,EACjBL,EAAc3C,OACd2C,EAAc3C,OAAOrD,mBACzB,GAAIrZ,EAAYshB,GACdU,EAAiBE,EAAahJ,eAC5B+I,EAAcxK,UACdsK,EACA,WAEG,GAAIG,EAAa9I,iBAAmB6I,EAAc3K,aAAc,CAErE,IAAM6K,EAAgBF,EACnBxK,UACA7O,YAAY0Y,EAAYS,GAC3BC,EAAiBE,EAAahJ,eAC5B+I,EAAcxK,UACd0K,EACA,UAEG,CACL,IAAMnM,EAAWhX,EAAasiB,GAC9B,IACGW,EAAc1K,kBAAkB+J,IACjCpiB,EAAcoiB,GAAc,EAG5B,OAAOhC,EAET,IAAMsC,EAAkBziB,EAAamiB,GAE/B3Y,EADYsZ,EAAcxK,UAAUrP,kBAAkB4N,GAC7BpN,YAAYgZ,EAAiBG,GAE1DC,EADe,cAAbhM,EACekM,EAAaha,eAC5B+Z,EAAcxK,UACd9O,GAGeuZ,EAAatZ,YAC5BqZ,EAAcxK,UACdzB,EACArN,EACAiZ,EACA/C,GACA,MAIN,IAAMnH,EAAeS,GACnBmH,EACA0C,EACAC,EAAc5K,sBAAwBrX,EAAYshB,GAClDY,EAAa9I,gBAOf,OAAO4H,GACL3B,EACA3H,EACA4J,EACA9B,EATa,IAAIc,GACjBd,EACA9H,EACA+H,GAQAE,GAIJ,SAASG,GACPT,EACAC,EACAgC,EACAS,EACAvC,EACAC,EACAE,GAEA,IACIjI,EAAc8I,EADZe,EAAejC,EAAa3H,WAE5BlD,EAAS,IAAI6L,GACjBd,EACAF,EACAG,GAEF,GAAIzf,EAAYshB,GACdd,EAAgBnB,EAAc3C,OAAOxD,eACnCoG,EAAa3H,WAAWF,UACxBsK,EACApC,GAEFjI,EAAeG,GACbyH,EACAkB,GACA,EACAnB,EAAc3C,OAAOtD,oBAElB,CACL,IAAMpD,EAAWhX,EAAasiB,GAC9B,GAAiB,cAAbtL,EACFwK,EAAgBnB,EAAc3C,OAAOxU,eACnCoX,EAAa3H,WAAWF,UACxBsK,GAEFrK,EAAeG,GACbyH,EACAkB,EACAe,EAAalK,qBACbkK,EAAajK,kBAEV,CACL,IAAMsK,EAAkBziB,EAAamiB,GAC/BtI,EAAWuI,EAAa9J,UAAUrP,kBAAkB4N,GACtDP,OAAQ,EACZ,GAAIzV,EAAY4hB,GAEdnM,EAAWsM,MACN,CACL,IAAMtZ,EAAYgM,EAAOqK,iBAAiB9I,GAQtCP,EAPa,MAAbhN,EAEiC,cAAjCrJ,EAAYwiB,IACZnZ,EAAUH,SAAS3I,EAAWiiB,IAAkBja,UAIrCc,EAEAA,EAAUG,YAAYgZ,EAAiBG,GAIzClQ,GAAa7J,WAG5B,GAAKgR,EAAShP,OAAOyL,GAgBnBiC,EAAe4H,OAPf5H,EAAeG,GACbyH,EATmBD,EAAc3C,OAAO9T,YACxC2Y,EAAa9J,UACbzB,EACAP,EACAmM,EACAnN,EACAkL,GAKA4B,EAAalK,qBACbgI,EAAc3C,OAAOtD,iBAO7B,OAAO1B,EAGT,SAASwI,GACPpI,EACA9B,GAEA,OAAO8B,EAAUH,WAAWH,mBAAmBxB,GAoDjD,SAASoM,GACP/C,EACApV,EACAkT,GAKA,OAHAA,EAAM3G,SAAQ,SAACpB,EAAc3M,GAC3BwB,EAAOA,EAAKrB,YAAYwM,EAAc3M,MAEjCwB,EAGT,SAASmW,GACPf,EACAvH,EACA7Y,EACA+gB,EACAR,EACA5H,EACA8H,EACAC,GAIA,GACE7H,EAAUF,YAAYH,UAAU9P,YAC/BmQ,EAAUF,YAAYP,qBAEvB,OAAOS,EAST,IACIuK,EADApC,EAAenI,EAGjBuK,EADEriB,EAAYf,GACE+gB,EAEA,IAAIhL,GAAoB,MAAMU,QAC5CzW,EACA+gB,GAGJ,IAAMb,EAAarH,EAAUF,YAAYH,UAiDzC,OAhDA4K,EAAc1N,SAAS1J,kBAAiB,SAAC+K,EAAUnG,GACjD,GAAIsP,EAAW5W,SAASyN,GAAW,CACjC,IAGMP,EAAW2M,GACf/C,EAJkBvH,EAAUF,YAC3BH,UACArP,kBAAkB4N,GAInBnG,GAEFoQ,EAAeF,GACbV,EACAY,EACA,IAAIlhB,EAAKiX,GACTP,EACA+J,EACA5H,EACA8H,EACAC,OAIN0C,EAAc1N,SAAS1J,kBAAiB,SAAC+K,EAAUsM,GACjD,IAAMC,GACHzK,EAAUF,YAAYJ,mBAAmBxB,SACjBtQ,IAAzB4c,EAAevrB,MACjB,IAAKooB,EAAW5W,SAASyN,KAAcuM,EAAoB,CACzD,IAGM9M,EAAW2M,GACf/C,EAJkBvH,EAAUF,YAC3BH,UACArP,kBAAkB4N,GAInBsM,GAEFrC,EAAeF,GACbV,EACAY,EACA,IAAIlhB,EAAKiX,GACTP,EACA+J,EACA5H,EACA8H,EACAC,OAKCM,ECxnBT,OAGE,SAAmBuC,GAAA,KAAAA,SACjBxrB,KAAK6hB,OAAS7hB,KAAKwrB,OAAOC,iBAAiBnJ,YAiF/C,SAASoJ,GACPC,EACAC,EACAjc,EACAua,EACA2B,EACAlL,GAEA,IAAMmL,EAAkB5B,EAAQxE,QAAO,SAAAjD,GAAU,OAAAA,EAAO3W,OAAS6D,KAEjEmc,EAAgBnnB,MAAK,SAACZ,EAAGC,GACvB,OAmCJ,SACE2nB,EACA5nB,EACAC,GAEA,GAAmB,MAAfD,EAAEsN,WAAoC,MAAfrN,EAAEqN,UAC3B,MAAM,YAAe,sCAEvB,IAAM0a,EAAW,IAAI5V,GAAUpS,EAAEsN,UAAWtN,EAAEyd,cACxCwK,EAAW,IAAI7V,GAAUnS,EAAEqN,UAAWrN,EAAEwd,cAC9C,OAAOmK,EAAe9J,OAAOxL,QAAQ0V,EAAUC,GA7C7CC,CAA6BN,EAAgB5nB,EAAGC,MAElD8nB,EAAgBnF,SAAQ,SAAAlE,GACtB,IAAMyJ,EAeV,SACEP,EACAlJ,EACA9B,GAEA,MAAoB,UAAhB8B,EAAO3W,MAAoC,kBAAhB2W,EAAO3W,OAGpC2W,EAAO0J,SAAWxL,EAAWnP,wBAC3BiR,EAAOpR,UACPoR,EAAOjB,aACPmK,EAAe9J,SALVY,EArBoB2J,CACzBT,EACAlJ,EACA9B,GAEFkL,EAAclF,SAAQ,SAAA0F,GAChBA,EAAaC,WAAW7J,EAAO3W,OACjC8f,EAAOlnB,KACL2nB,EAAaE,YAAYL,EAAoBP,EAAeH,eC/GtE,IAAMgB,GACJ,mEAsBWC,GAAc,WAGzB,IAAIC,EAAe,EAMbC,EAA0B,GAEhC,OAAO,SAAUC,GACf,IAGI3qB,EAHE4qB,EAAgBD,IAAQF,EAC9BA,EAAeE,EAGf,IAAME,EAAiB,IAAIzqB,MAAM,GACjC,IAAKJ,EAAI,EAAGA,GAAK,EAAGA,IAClB6qB,EAAe7qB,GAAKuqB,GAAW/e,OAAOmf,EAAM,IAG5CA,EAAMhnB,KAAKI,MAAM4mB,EAAM,IAEzB,YAAe,IAARA,EAAW,4BAElB,IAAIrrB,EAAKurB,EAAezmB,KAAK,IAE7B,GAAKwmB,EAIE,CAGL,IAAK5qB,EAAI,GAAIA,GAAK,GAA0B,KAArB0qB,EAAc1qB,GAAWA,IAC9C0qB,EAAc1qB,GAAK,EAErB0qB,EAAc1qB,UATd,IAAKA,EAAI,EAAGA,EAAI,GAAIA,IAClB0qB,EAAc1qB,GAAK2D,KAAKI,MAAsB,GAAhBJ,KAAKmnB,UAUvC,IAAK9qB,EAAI,EAAGA,EAAI,GAAIA,IAClBV,GAAMirB,GAAW/e,OAAOkf,EAAc1qB,IAIxC,OAFA,YAAqB,KAAdV,EAAGY,OAAe,oCAElBZ,GA5CgB,GAgDdyrB,GAAY,SAAUltB,GACjC,GAAY,eAARA,EAEF,MAvEkB,IAyEpB,IAAMmtB,EAAmB/oB,EAAYpE,GACrC,GAAgB,MAAZmtB,EACF,MAAO,IAAMA,EAAW,GAI1B,IAFA,IAAMjT,EAAO,IAAI3X,MAAMvC,EAAIqC,QAElB,EAAI,EAAG,EAAI6X,EAAK7X,OAAQ,IAC/B6X,EAAK,GAAKla,EAAI2N,OAAO,GAGvB,GAAIuM,EAAK7X,OA/ES,IAiFhB,OADA6X,EAAKtV,KApFa,KAqFXsV,EAAK3T,KAAK,IAKnB,IAFA,IAAIpE,EAAI+X,EAAK7X,OAAS,EAEfF,GAAK,GAxFQ,MAwFH+X,EAAK/X,IACpBA,IAKF,IAAW,IAAPA,EACF,OAAO4B,EAGT,IAAM4Z,EAASzD,EAAK/X,GACdirB,EAAgBV,GAAW/e,OAAO+e,GAAWphB,QAAQqS,GAAU,GAGrE,OAFAzD,EAAK/X,GAAKirB,EAEHlT,EAAKtR,MAAM,EAAGzG,EAAI,GAAGoE,KAAK,KAItBmV,GAAc,SAAU1b,GACnC,GAAY,gBAARA,EACF,OAAO8D,EAET,IAAMqpB,EAAmB/oB,EAAYpE,GACrC,GAAgB,MAAZmtB,EACF,MAAO,IAAMA,EAAW,GAG1B,IADA,IAAMjT,EAAO,IAAI3X,MAAMvC,EAAIqC,QAClBF,EAAI,EAAGA,EAAI+X,EAAK7X,OAAQF,IAC/B+X,EAAK/X,GAAKnC,EAAI2N,OAAOxL,GAavB,MAnIoB,MAmIhB+X,EAAKA,EAAK7X,OAAS,GACD,IAAhB6X,EAAK7X,OAEA,qBAEF6X,EAAKA,EAAK7X,OAAS,GACnB6X,EAAK3T,KAAK,MAKnB2T,EAAKA,EAAK7X,OAAS,GAAKqqB,GAAW/e,OACjC+e,GAAWphB,QAAQ4O,EAAKA,EAAK7X,OAAS,IAAM,GAEvC6X,EAAK3T,KAAK,IA/IG,IA+IiB8mB,OA7InB,IA6IwCnT,EAAK7X,UCjGpDirB,GAAc,IAxD3B,yB,+CAsDA,OAtDgC,iBAI9B,YAAA/W,QAAA,SAAQtS,EAAcC,GACpB,IAAMkT,EAAWnT,EAAEkP,KAAKX,UAAUtO,EAAEiP,MACpC,OAAiB,IAAbiE,EACKpT,EAAYC,EAAEvD,KAAMwD,EAAExD,MAEtB0W,GAOX,YAAAC,YAAA,SAAYlE,GACV,OAAO,GAMT,YAAAqD,oBAAA,SAAoBC,EAAeC,GACjC,OAAQD,EAAQvD,OAAOwD,IAMzB,YAAAG,QAAA,WAEE,OAAQR,GAAkBS,KAM5B,YAAAQ,QAAA,WAEE,OAAQjB,GAAkBqG,KAG5B,YAAAnF,SAAA,SAASC,EAAoB9W,GAC3B,IAAM6sB,EAAYhd,GAAaiH,GAC/B,OAAO,IAAInB,GAAU3V,EAAM6sB,IAM7B,YAAA5sB,SAAA,WACE,MAAO,UAEX,EAtDA,CAAgC8W,KCGhC,eACE,WAAoB+V,GAApB,MACE,cAAO,K,OADW,EAAAA,aAGlB,aACGtkB,EAAYskB,IAA4C,cAA7BtlB,EAAaslB,GACzC,2D,EAuDN,OA7D+B,iBAUnB,YAAAC,aAAV,SAAuB1N,GACrB,OAAOA,EAAKvO,SAAStR,KAAKstB,aAM5B,YAAAnW,YAAA,SAAYlE,GACV,OAAQA,EAAK3B,SAAStR,KAAKstB,YAAY3c,WAMzC,YAAA0F,QAAA,SAAQtS,EAAcC,GACpB,IAAMwpB,EAASxtB,KAAKutB,aAAaxpB,EAAEkP,MAC7Bwa,EAASztB,KAAKutB,aAAavpB,EAAEiP,MAC7BiE,EAAWsW,EAAOlb,UAAUmb,GAClC,OAAiB,IAAbvW,EACKpT,EAAYC,EAAEvD,KAAMwD,EAAExD,MAEtB0W,GAOX,YAAAG,SAAA,SAASC,EAAoB9W,GAC3B,IAAM6sB,EAAYhd,GAAaiH,GACzBrE,EAAO4H,GAAa7J,WAAWY,YACnC5R,KAAKstB,WACLD,GAEF,OAAO,IAAIlX,GAAU3V,EAAMyS,IAM7B,YAAAmE,QAAA,WACE,IAAMnE,EAAO4H,GAAa7J,WAAWY,YAAY5R,KAAKstB,WAAYnhB,IAClE,OAAO,IAAIgK,GAAUtS,EAAUoP,IAMjC,YAAAxS,SAAA,WACE,OAAO+H,EAAUxI,KAAKstB,WAAY,GAAGjnB,KAAK,MAE9C,EA7DA,CAA+BkR,ICM/B,cASE,WAAYxL,GACV/L,KAAK0tB,eAAiB,IAAIC,GAAc5hB,EAAOuW,YAC/CtiB,KAAK6hB,OAAS9V,EAAOuW,WACrBtiB,KAAK4tB,WAAaC,EAAaC,cAAc/hB,GAC7C/L,KAAK+tB,SAAWF,EAAaG,YAAYjiB,GAoH7C,OAjHE,YAAAkiB,aAAA,WACE,OAAOjuB,KAAK4tB,YAGd,YAAAM,WAAA,WACE,OAAOluB,KAAK+tB,UAGd,YAAAI,QAAA,SAAQlb,GACN,OACEjT,KAAK6hB,OAAOxL,QAAQrW,KAAKiuB,eAAgBhb,IAAS,GAClDjT,KAAK6hB,OAAOxL,QAAQpD,EAAMjT,KAAKkuB,eAAiB,GAOpD,YAAAtc,YAAA,SACEiO,EACA/f,EACA2e,EACAqD,EACArE,EACAsE,GAKA,OAHK/hB,KAAKmuB,QAAQ,IAAIhY,GAAUrW,EAAK2e,MACnCA,EAAW5D,GAAa7J,YAEnBhR,KAAK0tB,eAAe9b,YACzBiO,EACA/f,EACA2e,EACAqD,EACArE,EACAsE,IAOJ,YAAAG,eAAA,SACEN,EACAO,EACAJ,GAEII,EAAQ1R,eAEV0R,EAAUtH,GAAa7J,YAEzB,IAAIiQ,EAAWkB,EAAQrP,UAAU9S,KAAK6hB,QAEtCZ,EAAWA,EAAS/P,eAAe2J,GAAa7J,YAChD,IAAMod,EAAOpuB,KAMb,OALAmiB,EAAQpQ,aAAagF,IAAgB,SAACjX,EAAK2R,GACpC2c,EAAKD,QAAQ,IAAIhY,GAAUrW,EAAK2R,MACnCwP,EAAWA,EAASvP,qBAAqB5R,EAAK+a,GAAa7J,gBAGxDhR,KAAK0tB,eAAexL,eACzBN,EACAX,EACAc,IAOJ,YAAA7Q,eAAA,SAAe0Q,EAAe5G,GAE5B,OAAO4G,GAMT,YAAAQ,aAAA,WACE,OAAO,GAMT,YAAAC,iBAAA,WACE,OAAOriB,KAAK0tB,gBAMd,YAAApL,SAAA,WACE,OAAOtiB,KAAK6hB,QAGC,EAAAiM,cAAf,SAA6B/hB,GAC3B,GAAIA,EAAOsiB,WAAY,CACrB,IAAMC,EAAYviB,EAAOwiB,oBACzB,OAAOxiB,EAAOuW,WAAWjL,SAAStL,EAAOyiB,qBAAsBF,GAE/D,OAAOviB,EAAOuW,WAAW3L,WAId,EAAAqX,YAAf,SAA2BjiB,GACzB,GAAIA,EAAO0iB,SAAU,CACnB,IAAMC,EAAU3iB,EAAO4iB,kBACvB,OAAO5iB,EAAOuW,WAAWjL,SAAStL,EAAO6iB,mBAAoBF,GAE7D,OAAO3iB,EAAOuW,WAAWlL,WAG/B,EAjIA,GCMA,cASE,WAAYrL,GACV/L,KAAK6uB,cAAgB,IAAIhB,GAAa9hB,GACtC/L,KAAK6hB,OAAS9V,EAAOuW,WACrBtiB,KAAK8uB,OAAS/iB,EAAOgjB,WACrB/uB,KAAKgvB,UAAYjjB,EAAOkjB,iBAkR5B,OA5QE,YAAArd,YAAA,SACEiO,EACA/f,EACA2e,EACAqD,EACArE,EACAsE,GAKA,OAHK/hB,KAAK6uB,cAAcV,QAAQ,IAAIhY,GAAUrW,EAAK2e,MACjDA,EAAW5D,GAAa7J,YAEtB6O,EAAKzO,kBAAkBtR,GAAKkT,OAAOyL,GAE9BoB,EACEA,EAAK/N,cAAgB9R,KAAK8uB,OAC5B9uB,KAAK6uB,cACTxM,mBACAzQ,YACCiO,EACA/f,EACA2e,EACAqD,EACArE,EACAsE,GAGG/hB,KAAKkvB,sBACVrP,EACA/f,EACA2e,EACAhB,EACAsE,IAQN,YAAAG,eAAA,SACEN,EACAO,EACAJ,GAEA,IAAId,EACJ,GAAIkB,EAAQ1R,cAAgB0R,EAAQxR,UAElCsQ,EAAWpG,GAAa7J,WAAW8B,UAAU9S,KAAK6hB,aAElD,GACgB,EAAd7hB,KAAK8uB,OAAa3M,EAAQrQ,eAC1BqQ,EAAQpP,UAAU/S,KAAK6hB,QACvB,CAEAZ,EAAWpG,GAAa7J,WAAW8B,UAAU9S,KAAK6hB,QAElD,IAAI9F,OAAQ,EAEVA,EADE/b,KAAKgvB,SACK7M,EAAyBpM,uBACnC/V,KAAK6uB,cAAcX,aACnBluB,KAAK6hB,QAGKM,EAAyBrM,gBACnC9V,KAAK6uB,cAAcZ,eACnBjuB,KAAK6hB,QAIT,IADA,IAAI7N,EAAQ,EACL+H,EAAStI,WAAaO,EAAQhU,KAAK8uB,QAAQ,CAChD,IAAM9U,EAAO+B,EAASxI,UAStB,KAPIvT,KAAKgvB,SAELhvB,KAAK6hB,OAAOxL,QAAQrW,KAAK6uB,cAAcZ,eAAgBjU,IAAS,EAGhEha,KAAK6hB,OAAOxL,QAAQ2D,EAAMha,KAAK6uB,cAAcX,eAAiB,GAOhE,MAJAjN,EAAWA,EAASvP,qBAAqBsI,EAAKxZ,KAAMwZ,EAAK/G,MACzDe,SAMC,CAILiN,GAFAA,EAAWkB,EAAQrP,UAAU9S,KAAK6hB,SAEd3Q,eAClB2J,GAAa7J,YAEf,IAAI8K,OAAS,EACTE,OAAO,EACPrS,OAAG,EACHoS,OAAQ,EACZ,GAAI/b,KAAKgvB,SAAU,CACjBjT,EAAWkF,EAASjL,mBAAmBhW,KAAK6hB,QAC5C/F,EAAY9b,KAAK6uB,cAAcX,aAC/BlS,EAAUhc,KAAK6uB,cAAcZ,eAC7B,IAAM,EAAejuB,KAAK6hB,OAAOzL,aACjCzM,EAAM,SAAC5F,EAAcC,GAAiB,SAAaA,EAAGD,SAEtDgY,EAAWkF,EAAStL,YAAY3V,KAAK6hB,QACrC/F,EAAY9b,KAAK6uB,cAAcZ,eAC/BjS,EAAUhc,KAAK6uB,cAAcX,aAC7BvkB,EAAM3J,KAAK6hB,OAAOzL,aAGhBpC,EAAQ,EAEZ,IAFA,IACImb,GAAiB,EACdpT,EAAStI,WAAW,CACnBuG,EAAO+B,EAASxI,WACjB4b,GAAkBxlB,EAAImS,EAAW9B,IAAS,IAE7CmV,GAAiB,GAGjBA,GAAkBnb,EAAQhU,KAAK8uB,QAAUnlB,EAAIqQ,EAAMgC,IAAY,EAE/DhI,IAEAiN,EAAWA,EAASvP,qBAClBsI,EAAKxZ,KACLqa,GAAa7J,aAMvB,OAAOhR,KAAK6uB,cACTxM,mBACAH,eAAeN,EAASX,EAAUc,IAMvC,YAAA7Q,eAAA,SAAe0Q,EAAe5G,GAE5B,OAAO4G,GAMT,YAAAQ,aAAA,WACE,OAAO,GAMT,YAAAC,iBAAA,WACE,OAAOriB,KAAK6uB,cAAcxM,oBAM5B,YAAAC,SAAA,WACE,OAAOtiB,KAAK6hB,QAGN,YAAAqN,sBAAR,SACErP,EACAb,EACAd,EACAT,EACA2R,GAGA,IAAIzlB,EACJ,GAAI3J,KAAKgvB,SAAU,CACjB,IAAM,EAAWhvB,KAAK6hB,OAAOzL,aAC7BzM,EAAM,SAAC5F,EAAcC,GAAiB,SAASA,EAAGD,SAElD4F,EAAM3J,KAAK6hB,OAAOzL,aAEpB,IAAMmT,EAAgB1J,EACtB,YAAO0J,EAAczX,gBAAkB9R,KAAK8uB,OAAQ,IACpD,IAAMO,EAAoB,IAAIlZ,GAAU6I,EAAUd,GAC5CoR,EAAiBtvB,KAAKgvB,SACxBzF,EAAc7N,cAAc1b,KAAK6hB,QAChC0H,EAAc3N,aAAa5b,KAAK6hB,QAC/B0N,EAAUvvB,KAAK6uB,cAAcV,QAAQkB,GAC3C,GAAI9F,EAAchY,SAASyN,GAAW,CAOpC,IANA,IAAMwQ,EAAejG,EAAcnY,kBAAkB4N,GACjDI,EAAY3B,EAAOsK,mBACrB/nB,KAAK6hB,OACLyN,EACAtvB,KAAKgvB,UAGQ,MAAb5P,IACCA,EAAU5e,OAASwe,GAAYuK,EAAchY,SAAS6N,EAAU5e,QAKjE4e,EAAY3B,EAAOsK,mBACjB/nB,KAAK6hB,OACLzC,EACApf,KAAKgvB,UAGT,IAAMS,EACS,MAAbrQ,EAAoB,EAAIzV,EAAIyV,EAAWiQ,GAGzC,GADEE,IAAYrR,EAAUvN,WAAa8e,GAAe,EAOlD,OALyB,MAArBL,GACFA,EAAkBnN,iBAChBN,GAAmB3C,EAAUd,EAAWsR,IAGrCjG,EAAc7X,qBAAqBsN,EAAUd,GAE3B,MAArBkR,GACFA,EAAkBnN,iBAChBP,GAAmB1C,EAAUwQ,IAGjC,IAAMhG,EAAgBD,EAAc7X,qBAClCsN,EACAnE,GAAa7J,YAIf,OADe,MAAboO,GAAqBpf,KAAK6uB,cAAcV,QAAQ/O,IAEvB,MAArBgQ,GACFA,EAAkBnN,iBAChBR,GAAiBrC,EAAU5e,KAAM4e,EAAUnM,OAGxCuW,EAAc9X,qBACnB0N,EAAU5e,KACV4e,EAAUnM,OAGLuW,EAGN,OAAItL,EAAUvN,UAEZkP,EACE0P,GACL5lB,EAAI2lB,EAAgBD,IAAsB,GACnB,MAArBD,IACFA,EAAkBnN,iBAChBP,GAAmB4N,EAAe9uB,KAAM8uB,EAAerc,OAEzDmc,EAAkBnN,iBAChBR,GAAiBzC,EAAUd,KAGxBqL,EACJ7X,qBAAqBsN,EAAUd,GAC/BxM,qBAAqB4d,EAAe9uB,KAAMqa,GAAa7J,aAKrD6O,GAGb,EA/RA,GC2BA,2BACE,KAAA6P,WAAY,EACZ,KAAAC,WAAY,EACZ,KAAAC,eAAgB,EAChB,KAAAC,gBAAiB,EACjB,KAAAC,SAAU,EACV,KAAAC,aAAc,EACd,KAAAC,eAAgB,EAChB,KAAAlB,OAAS,EACT,KAAAmB,UAAY,GACZ,KAAAC,iBAAmC,KACnC,KAAAC,gBAAkB,GAClB,KAAAC,eAAiC,KACjC,KAAAC,cAAgB,GAChB,KAAAxO,OAAS9K,GA0HX,OAxHE,YAAAsX,SAAA,WACE,OAAOruB,KAAK2vB,WAGd,YAAAW,cAAA,WACE,OAAOtwB,KAAK6vB,gBAGd,YAAAU,aAAA,WACE,OAAOvwB,KAAKgwB,eAMd,YAAAf,eAAA,WACE,MAAuB,KAAnBjvB,KAAKiwB,UAKAjwB,KAAK2vB,UAES,MAAd3vB,KAAKiwB,WAOhB,YAAAzB,mBAAA,WAEE,OADA,YAAOxuB,KAAK2vB,UAAW,oCAChB3vB,KAAKkwB,kBAOd,YAAA3B,kBAAA,WAEE,OADA,YAAOvuB,KAAK2vB,UAAW,oCACnB3vB,KAAK4vB,cACA5vB,KAAKmwB,gBAELvsB,GAIX,YAAA6qB,OAAA,WACE,OAAOzuB,KAAK8vB,SAMd,YAAAlB,iBAAA,WAEE,OADA,YAAO5uB,KAAK8vB,QAAS,kCACd9vB,KAAKowB,gBAOd,YAAAzB,gBAAA,WAEE,OADA,YAAO3uB,KAAK8vB,QAAS,kCACjB9vB,KAAK+vB,YACA/vB,KAAKqwB,cAELxsB,GAIX,YAAA2sB,SAAA,WACE,OAAOxwB,KAAK0vB,WAMd,YAAAe,iBAAA,WACE,OAAOzwB,KAAK0vB,WAAgC,KAAnB1vB,KAAKiwB,WAMhC,YAAAlB,SAAA,WAEE,OADA,YAAO/uB,KAAK0vB,UAAW,oCAChB1vB,KAAK8uB,QAGd,YAAAxM,SAAA,WACE,OAAOtiB,KAAK6hB,QAGd,YAAA6O,aAAA,WACE,QAAS1wB,KAAK2vB,WAAa3vB,KAAK8vB,SAAW9vB,KAAK0vB,YAGlD,YAAAiB,UAAA,WACE,OAAO3wB,KAAK0wB,gBAAkB1wB,KAAK6hB,SAAW9K,IAGhD,YAAAhD,KAAA,WACE,IAAMA,EAAO,IAAI6c,EAajB,OAZA7c,EAAK2b,UAAY1vB,KAAK0vB,UACtB3b,EAAK+a,OAAS9uB,KAAK8uB,OACnB/a,EAAK4b,UAAY3vB,KAAK2vB,UACtB5b,EAAKmc,iBAAmBlwB,KAAKkwB,iBAC7Bnc,EAAK6b,cAAgB5vB,KAAK4vB,cAC1B7b,EAAKoc,gBAAkBnwB,KAAKmwB,gBAC5Bpc,EAAK+b,QAAU9vB,KAAK8vB,QACpB/b,EAAKqc,eAAiBpwB,KAAKowB,eAC3Brc,EAAKgc,YAAc/vB,KAAK+vB,YACxBhc,EAAKsc,cAAgBrwB,KAAKqwB,cAC1Btc,EAAK8N,OAAS7hB,KAAK6hB,OACnB9N,EAAKkc,UAAYjwB,KAAKiwB,UACflc,GAEX,EAxIA,G,SA+JgB8c,GACdvjB,EACAwjB,GAEA,IAAMC,EAAYzjB,EAAYyG,OAI9B,OAHAgd,EAAUrB,WAAY,EACtBqB,EAAUjC,OAASgC,EACnBC,EAAUd,UAAS,IACZc,E,SAGOC,GACd1jB,EACAwjB,GAEA,IAAMC,EAAYzjB,EAAYyG,OAI9B,OAHAgd,EAAUrB,WAAY,EACtBqB,EAAUjC,OAASgC,EACnBC,EAAUd,UAAS,IACZc,E,SAGOE,GACd3jB,EACAgK,EACAxX,GAEA,IAAMixB,EAAYzjB,EAAYyG,OAa9B,OAZAgd,EAAUpB,WAAY,OACHjhB,IAAf4I,IACFA,EAAa,MAEfyZ,EAAUb,iBAAmB5Y,EAClB,MAAPxX,GACFixB,EAAUnB,eAAgB,EAC1BmB,EAAUZ,gBAAkBrwB,IAE5BixB,EAAUnB,eAAgB,EAC1BmB,EAAUZ,gBAAkB,IAEvBY,E,SAGOG,GACd5jB,EACAgK,EACAxX,GAEA,IAAIiM,EACJ,GAAIuB,EAAYuU,SAAWrK,GACC,kBAAfF,IACTA,EAAa0V,GAAU1V,IAEzBvL,EAASklB,GAAmB3jB,EAAagK,EAAYxX,OAChD,CAOLiM,EAASklB,GAAmB3jB,EAAagK,EAL9B,MAAPxX,EACS+D,EAEAmpB,GAAUltB,IAKzB,OADAiM,EAAO8jB,gBAAiB,EACjB9jB,E,SAGOolB,GACd7jB,EACAgK,EACAxX,GAEA,IAAMixB,EAAYzjB,EAAYyG,OAa9B,OAZAgd,EAAUjB,SAAU,OACDphB,IAAf4I,IACFA,EAAa,MAEfyZ,EAAUX,eAAiB9Y,OACf5I,IAAR5O,GACFixB,EAAUhB,aAAc,EACxBgB,EAAUV,cAAgBvwB,IAE1BixB,EAAUhB,aAAc,EACxBgB,EAAUV,cAAgB,IAErBU,E,SAGOK,GACd9jB,EACAgK,EACAxX,GAEA,IACIiM,EAeJ,OAdIuB,EAAYuU,SAAWrK,IACC,kBAAfF,IACTA,EAAakE,GAAYlE,IAE3BvL,EAASolB,GAAiB7jB,EAAagK,EAAYxX,IAOnDiM,EAASolB,GAAiB7jB,EAAagK,EAL5B,MAAPxX,EACS8D,EAEA4X,GAAY1b,IAI3BiM,EAAOikB,eAAgB,EAChBjkB,E,SAGOslB,GACd/jB,EACA0E,GAEA,IAAM+e,EAAYzjB,EAAYyG,OAE9B,OADAgd,EAAUlP,OAAS7P,EACZ+e,E,SAQOO,GACdhkB,GAEA,IAMIikB,EANEC,EAAsC,GAE5C,OAAIlkB,EAAYqjB,cAKZrjB,EAAYuU,SAAW9K,GACzBwa,EAAU,YACDjkB,EAAYuU,SAAWuL,GAChCmE,EAAU,SACDjkB,EAAYuU,SAAWrK,GAChC+Z,EAAU,QAEV,YAAOjkB,EAAYuU,kBAAkB4P,GAAW,4BAChDF,EAAUjkB,EAAYuU,OAAOphB,YAE/B+wB,EAAE,QAAkC,YAAUD,GAE1CjkB,EAAYqiB,YACd6B,EAAE,QAAkC,YAAUlkB,EAAY4iB,kBACtD5iB,EAAYsiB,gBACd4B,EAAE,SACA,IAAM,YAAUlkB,EAAY6iB,mBAI9B7iB,EAAYwiB,UACd0B,EAAE,MAAgC,YAAUlkB,EAAY8iB,gBACpD9iB,EAAYyiB,cACdyB,EAAE,OACA,IAAM,YAAUlkB,EAAY+iB,iBAI9B/iB,EAAYoiB,YACVpiB,EAAY2hB,iBACduC,EAAE,aAAwClkB,EAAYwhB,OAEtD0C,EAAE,YAAuClkB,EAAYwhB,SApChD0C,EC1SX,ICdIE,GDcJ,cAME,WAAoBlG,EAAemG,GAAf,KAAAnG,SAHpB,KAAAoG,oBAA2C,GAIzC,ID0IqCtkB,EC1I/BvB,EAAS/L,KAAKwrB,OAAOC,iBAErBoG,EAAc,IAAIlE,GAAc5hB,EAAOuW,YACvCoD,GDuI+BpY,ECvIGvB,GDwI1B2kB,eACP,IAAI/C,GAAcrgB,EAAYgV,YAC5BhV,EAAYkjB,WACd,IAAIsB,GAAcxkB,GAElB,IAAIugB,GAAavgB,GC3IxBtN,KAAK+xB,W,SRCwBrM,GAC/B,MAAO,CAAEA,OAAM,GQFKsM,CAAiBtM,GAEnC,IAAMuM,EAAqBN,EAAiB/Q,YACtCsR,EAAoBP,EAAiBhR,WAGrCS,EAAayQ,EAAY3P,eAC7BrH,GAAa7J,WACbihB,EAAmBxR,UACnB,MAEIM,EAAY2E,EAAOxD,eACvBrH,GAAa7J,WACbkhB,EAAkBzR,UAClB,MAEIuK,EAAiB,IAAI9J,GACzBE,EACA6Q,EAAmB5R,qBACnBwR,EAAYzP,gBAERoH,EAAgB,IAAItI,GACxBH,EACAmR,EAAkB7R,qBAClBqF,EAAOtD,gBAGTpiB,KAAKioB,WAAavH,GAAa8I,EAAewB,GAC9ChrB,KAAKmyB,gBAAkB,IAAIC,GAAepyB,KAAKwrB,QAMnD,OAHE,sBAAI,oBAAK,C,IAAT,WACE,OAAOxrB,KAAKwrB,Q,gCAEhB,EA9CA,G,SAwDgB6G,GACdC,EACArqB,GAEA,IAAMsqB,EAAQjR,GAA+BgR,EAAKrK,YAClD,OAAIsK,IAIAD,EAAK3mB,MAAM8f,iBAAiBiF,iBAC1B1nB,EAAYf,KACXsqB,EAAMnhB,kBAAkBpJ,EAAaC,IAAO0I,WAExC4hB,EAAMjhB,SAASrJ,GAGnB,K,SAGOuqB,GAAYF,GAC1B,OAA2C,IAApCA,EAAKV,oBAAoBzvB,O,SAelBswB,GACdH,EACAI,EACAC,GAEA,IAAMC,EAA8B,GACpC,GAAID,EAAa,CACf,YACuB,MAArBD,EACA,mDAEF,IAAM,EAAOJ,EAAK3mB,MAAM1D,KACxBqqB,EAAKV,oBAAoBjL,SAAQ,SAAA0F,GAC/B,IAAMwG,EAAaxG,EAAayG,kBAAkBH,EAAa,GAC3DE,GACFD,EAAaluB,KAAKmuB,MAKxB,GAAIH,EAAmB,CAErB,IADA,IAAIK,EAAY,GACP9wB,EAAI,EAAGA,EAAIqwB,EAAKV,oBAAoBzvB,SAAUF,EAAG,CACxD,IAAM+wB,EAAWV,EAAKV,oBAAoB3vB,GAC1C,GAAK+wB,EAAS7E,QAAQuE,IAEf,GAAIA,EAAkBO,iBAAkB,CAE7CF,EAAYA,EAAUG,OAAOZ,EAAKV,oBAAoBlpB,MAAMzG,EAAI,IAChE,YAJA8wB,EAAUruB,KAAKsuB,GAOnBV,EAAKV,oBAAsBmB,OAE3BT,EAAKV,oBAAsB,GAE7B,OAAOgB,E,SAMOO,GACdb,EACA/J,EACAC,EACAxC,GAGEuC,EAAUzc,OAAS4Q,GAAcsD,OACJ,OAA7BuI,EAAU9K,OAAOT,UAEjB,YACEsE,GAA+BgR,EAAKrK,YACpC,6DAEF,YACE5G,GAA8BiR,EAAKrK,YACnC,4DAIJ,IRvIAI,EACAvH,EQsIMwH,EAAegK,EAAKrK,WACpBzU,EAAS4U,GACbkK,EAAKP,WACLzJ,EACAC,EACAC,EACAxC,GAYF,ORzJAqC,EQ+I2BiK,EAAKP,WR9IhCjR,EQ8I4CtN,EAAOsN,UR5InD,YACEA,EAAUH,WAAWF,UAAU1N,UAAUsV,EAAc3C,OAAOpD,YAC9D,0BAEF,YACExB,EAAUF,YAAYH,UAAU1N,UAAUsV,EAAc3C,OAAOpD,YAC/D,2BQwIF,YACE9O,EAAOsN,UAAUF,YAAYP,uBAC1BiI,EAAa1H,YAAYP,qBAC5B,2DAGFiS,EAAKrK,WAAazU,EAAOsN,UAElBsS,GACLd,EACA9e,EAAO0W,QACP1W,EAAOsN,UAAUH,WAAWF,UAC5B,MA2BJ,SAAS2S,GACPd,EACApI,EACAvJ,EACA+R,GAEA,IAAM7G,EAAgB6G,EAClB,CAACA,GACDJ,EAAKV,oBACT,O,SP3NAjG,EACAzB,EACAvJ,EACA0S,GAEA,IAAMzH,EAAkB,GAClB0H,EAAkB,GAuDxB,OArDApJ,EAAQvD,SAAQ,SAAAlE,G,IPoBhBpR,EOlBe,kBAAXoR,EAAO3W,MACP6f,EAAe9J,OAAOvL,oBACpBmM,EAAOb,QACPa,EAAOjB,eAGT8R,EAAM5uB,MPYV2M,EOZgCoR,EAAOpR,UPehC,CAAEvF,KAAM,cAAwB0V,aOfWiB,EAAOjB,aPeJnQ,UAAS,QOX9Dqa,GACEC,EACAC,EAAM,gBAEN1B,EACAmJ,EACA1S,GAEF+K,GACEC,EACAC,EAAM,cAEN1B,EACAmJ,EACA1S,GAEF+K,GACEC,EACAC,EAAM,cAEN0H,EACAD,EACA1S,GAEF+K,GACEC,EACAC,EAAM,gBAEN1B,EACAmJ,EACA1S,GAEF+K,GACEC,EACAC,EAAM,QAEN1B,EACAmJ,EACA1S,GAGKiL,EO8JA2H,CACLjB,EAAKH,gBACLjI,EACAvJ,EACAkL,GCzNJ,kBAOW,KAAA2H,MAA2B,IAAIhR,K,SAsB1BiR,GACdC,EACAnL,EACAC,EACAmL,G,QAEM3W,EAAUuL,EAAU9K,OAAOT,QACjC,GAAgB,OAAZA,EAAkB,CACpB,IAAMsV,EAAOoB,EAAUF,MAAMpzB,IAAI4c,GAEjC,OADA,YAAe,MAARsV,EAAc,gDACda,GACLb,EACA/J,EACAC,EACAmL,GAGF,IAAI/H,EAAkB,G,IAEtB,IAAmB,kBAAA8H,EAAUF,MAAMzQ,UAAQ,8BAAE,CAAlCuP,EAAI,QACb1G,EAASA,EAAOsH,OACdC,GAAmBb,EAAM/J,EAAWC,EAAamL,K,iGAIrD,OAAO/H,E,SAaKgI,GACdF,EACA/nB,EACA6c,EACA5H,EACAiT,GAEA,IAAM7W,EAAUrR,EAAMmoB,kBAChBxB,EAAOoB,EAAUF,MAAMpzB,IAAI4c,GACjC,IAAKsV,EAAM,CAET,IAAI3R,EAAa0F,GACfmC,EACAqL,EAAsBjT,EAAc,MAElCmT,GAAqB,EACrBpT,EACFoT,GAAqB,EACZnT,aAAuB/F,IAChC8F,EAAa4F,GACXiC,EACA5H,GAEFmT,GAAqB,IAErBpT,EAAa9F,GAAa7J,WAC1B+iB,GAAqB,GAEvB,IAAMjT,EAAYJ,GAChB,IAAIQ,GAAUP,EAAYoT,GAAoB,GAC9C,IAAI7S,GAAUN,EAAaiT,GAAqB,IAElD,OAAO,IAAIG,GAAKroB,EAAOmV,GAEzB,OAAOwR,E,SAaO2B,GACdP,EACA/nB,EACA+mB,EACAlK,EACA5H,EACAiT,GAEA,IAAMvB,EAAOsB,GACXF,EACA/nB,EACA6c,EACA5H,EACAiT,GAOF,OALKH,EAAUF,MAAMU,IAAIvoB,EAAMmoB,oBAC7BJ,EAAUF,MAAM3zB,IAAI8L,EAAMmoB,kBAAmBxB,G,SDhD/CA,EACAI,GAEAJ,EAAKV,oBAAoBltB,KAAKguB,GCgD9ByB,CAAyB7B,EAAMI,G,SDiD/BJ,EACAjG,GAEA,IAAMtL,EAAYuR,EAAKrK,WAAWtH,WAC5ByT,EAA2B,GAUjC,OATKrT,EAAUN,UAAUhQ,cACLsQ,EAAUN,UAClB1O,aAAagF,IAAgB,SAACjX,EAAK2R,GAC3C2iB,EAAe1vB,KAAK+c,GAAiB3hB,EAAK2R,OAG1CsP,EAAUV,sBACZ+T,EAAe1vB,KAAK6c,GAAYR,EAAUN,YAErC2S,GACLd,EACA8B,EACArT,EAAUN,UACV4L,GClEKgI,CAAqB/B,EAAMI,G,SAapB4B,GACdZ,EACA/nB,EACA+mB,EACAC,G,QAEM3V,EAAUrR,EAAMmoB,kBAChBS,EAAmB,GACrB3B,EAAwB,GACtB4B,EAAkBC,GAAyBf,GACjD,GAAgB,YAAZ1W,E,IAEF,IAAkC,kBAAA0W,EAAUF,MAAMkB,WAAS,8BAAE,CAAlD,6BAACC,EAAW,KAAErC,EAAI,KAC3BM,EAAeA,EAAaM,OAC1BT,GAA4BH,EAAMI,EAAmBC,IAEnDH,GAAYF,KACdoB,EAAUF,MAAM5Q,OAAO+R,GAGlBrC,EAAK3mB,MAAM8f,iBAAiBiF,gBAC/B6D,EAAQ7vB,KAAK4tB,EAAK3mB,S,sGAMlB2mB,EAAOoB,EAAUF,MAAMpzB,IAAI4c,MAE/B4V,EAAeA,EAAaM,OAC1BT,GAA4BH,EAAMI,EAAmBC,IAEnDH,GAAYF,KACdoB,EAAUF,MAAM5Q,OAAO5F,GAGlBsV,EAAK3mB,MAAM8f,iBAAiBiF,gBAC/B6D,EAAQ7vB,KAAK4tB,EAAK3mB,SAa1B,OAPI6oB,IAAoBC,GAAyBf,IAE/Ca,EAAQ7vB,KACN,IA5KJ,YAAOgtB,GAAsB,oCACtBA,IA2KsC/lB,EAAMipB,KAAMjpB,EAAM1D,OAIxD,CAAEssB,QAAO,EAAE3I,OAAQgH,G,SAGZiC,GAAuBnB,G,QAC/BlgB,EAAS,G,IACf,IAAmB,kBAAAkgB,EAAUF,MAAMzQ,UAAQ,8BAAE,CAAxC,IAAMuP,EAAI,QACRA,EAAK3mB,MAAM8f,iBAAiBiF,gBAC/Bld,EAAO9O,KAAK4tB,I,iGAGhB,OAAO9e,E,SAOOshB,GACdpB,EACAzrB,G,QAEI2Y,EAA2B,K,IAC/B,IAAmB,kBAAA8S,EAAUF,MAAMzQ,UAAQ,8BAAE,CAAxC,IAAMuP,EAAI,QACb1R,EAAcA,GAAeyR,GAA2BC,EAAMrqB,I,iGAEhE,OAAO2Y,E,SAGOmU,GACdrB,EACA/nB,GAGA,GADeA,EAAM8f,iBACViF,eACT,OAAOsE,GAAyBtB,GAEhC,IAAM1W,EAAUrR,EAAMmoB,kBACtB,OAAOJ,EAAUF,MAAMpzB,IAAI4c,G,SAIfiY,GACdvB,EACA/nB,GAEA,OAAkD,MAA3CopB,GAAsBrB,EAAW/nB,G,SAG1B8oB,GAAyBf,GACvC,OAA8C,MAAvCsB,GAAyBtB,G,SAGlBsB,GAAyBtB,G,YACvC,IAAmB,kBAAAA,EAAUF,MAAMzQ,UAAQ,8BAAE,CAAxC,IAAMuP,EAAI,QACb,GAAIA,EAAK3mB,MAAM8f,iBAAiBiF,eAC9B,OAAO4B,G,iGAGX,OAAO,KCtNT,IAAI4C,GAAwB,EAuB5B,GAkBE,SAAmBC,GAAA,KAAAA,kBAdnB,KAAAC,eAA2C,IAAIpX,GAAyB,MAKxE,KAAAqX,kBZkgBO,CACLnQ,cAAehC,GAAcD,QAC7BwB,UAAW,GACXY,aAAc,GYngBP,KAAAiQ,cAAqC,IAAI9S,IACzC,KAAA+S,cAAqC,IAAI/S,K,SAcpCgT,GACdC,EACAxtB,EACAytB,EACAlR,EACAM,GAWA,O,SZpFAV,EACAnc,EACA4X,EACA2E,EACAM,GAEA,YACEN,EAAUJ,EAAUiB,YACpB,qDAEc3W,IAAZoW,IACFA,GAAU,GAEZV,EAAUK,UAAU/f,KAAK,CACvBuD,KAAI,EACJ4X,KAAI,EACJ2E,QAAO,EACPM,QAAO,IAGLA,IACFV,EAAUc,cAAgB/B,GACxBiB,EAAUc,cACVjd,EACA4X,IAGJuE,EAAUiB,YAAcb,EYiDxBmR,CACEF,EAASJ,kBACTptB,EACAytB,EACAlR,EACAM,GAGGA,EAGI8Q,GACLH,EACA,IAAI1V,GxBnHD,CACL9C,UAAU,EACVC,YAAY,EACZF,QAAS,KACTG,QAAQ,GwB+GkClV,EAAMytB,IAJzC,G,SAcKG,GACdJ,EACAxtB,EACA+gB,EACAxE,I,SZrEAJ,EACAnc,EACA+gB,EACAxE,GAEA,YACEA,EAAUJ,EAAUiB,YACpB,gDAEFjB,EAAUK,UAAU/f,KAAK,CACvBuD,KAAI,EACJ0V,SAAUqL,EACVxE,QAAO,EACPM,SAAS,IAGXV,EAAUc,cAAgB1B,GACxBY,EAAUc,cACVjd,EACA+gB,GAEF5E,EAAUiB,YAAcb,EYmDxBsR,CAAkBL,EAASJ,kBAAmBptB,EAAM+gB,EAAiBxE,GAErE,IAAMuR,EAAa/X,GAAcF,WAAWkL,GAE5C,OAAO4M,GACLH,EACA,IAAIxV,GxB1IC,CACLhD,UAAU,EACVC,YAAY,EACZF,QAAS,KACTG,QAAQ,GwBsI4BlV,EAAM8tB,I,SAU9BC,GACdP,EACAjR,EACAjH,QAAA,IAAAA,OAAA,GAEA,IAAMiI,E,SZpENpB,EACAI,GAEA,IAAK,IAAIviB,EAAI,EAAGA,EAAImiB,EAAUK,UAAUtiB,OAAQF,IAAK,CACnD,IAAMg0B,EAAS7R,EAAUK,UAAUxiB,GACnC,GAAIg0B,EAAOzR,UAAYA,EACrB,OAAOyR,EAGX,OAAO,KY2DOC,CAAkBT,EAASJ,kBAAmB7Q,GAK5D,GAJyBD,GACvBkR,EAASJ,kBACT7Q,GAIK,CACL,IAAI,EAAe,IAAIxG,GAAuB,MAS9C,OARkB,MAAdwH,EAAM3F,KAER,EAAe,EAAahgB,IAAIiI,KAAgB,GAEhD5C,EAAKsgB,EAAM7H,UAAU,SAAC9V,GACpB,EAAe,EAAahI,IAAI,IAAIkI,EAAKF,IAAa,MAGnD+tB,GACLH,EACA,IAAI5X,GAAa2H,EAAMvd,KAAM,EAAcsV,IAb7C,MAAO,G,SAuBK4Y,GACdV,EACAxtB,EACAytB,GAEA,OAAOE,GACLH,EACA,IAAI1V,GxBpLC,CACL9C,UAAU,EACVC,YAAY,EACZF,QAAS,KACTG,QAAQ,GwBgLkClV,EAAMytB,I,SA0EpCU,GACdX,EACA9pB,EACA+mB,EACAC,GAGA,IAAM1qB,EAAO0D,EAAM1D,KACbouB,EAAiBZ,EAASL,eAAeh1B,IAAI6H,GAC/C2qB,EAAwB,GAI5B,GACEyD,IAC6B,YAA5B1qB,EAAMmoB,mBACLmB,GAA4BoB,EAAgB1qB,IAC9C,CACA,IAAM2qB,EAAmBhC,GACvB+B,EACA1qB,EACA+mB,EACAC,GD/P4B,ICiQT0D,EDjQN7C,MAAM+C,OCkQnBd,EAASL,eAAiBK,EAASL,eAAe70B,OAAO0H,IAE3D,IAAMssB,EAAU+B,EAAiB/B,QACjC3B,EAAe0D,EAAiB1K,OAOhC,IAAM4K,GACH,IACDjC,EAAQ7P,WAAU,SAAA/Y,GAChB,OAAOA,EAAM8f,iBAAiBiF,kBAE5B+F,EAAUhB,EAASL,eAAenW,WACtChX,GACA,SAACmW,EAAcsY,GACb,OAAAjC,GAAyBiC,MAG7B,GAAIF,IAAoBC,EAAS,CAC/B,IAAM7Y,EAAU6X,EAASL,eAAexX,QAAQ3V,GAGhD,IAAK2V,EAAQjN,UAKX,IAHA,IAAMgmB,EA2ed,SACE/Y,GAEA,OAAOA,EAAQgB,MAAa,SAACR,EAAcwY,EAAqBC,GAC9D,GAAID,GAAuBnC,GAAyBmC,GAElD,MAAO,CADc5B,GAAyB4B,IAI9C,IAAI,EAAgB,GAOpB,OANIA,IACF,EAAQ/B,GAAuB+B,IAEjC1xB,EAAK2xB,GAAU,SAACC,EAAcC,GAC5B,EAAQ,EAAM7D,OAAO6D,MAEhB,KA3fYC,CAAwCpZ,GAGhD3b,EAAI,EAAGA,EAAI00B,EAASx0B,SAAUF,EAAG,CACxC,IAAMqwB,EAAOqE,EAAS10B,GACpBg1B,EAAW3E,EAAK3mB,MACZurB,EAAWC,GAA+B1B,EAAUnD,GAC1DmD,EAASN,gBAAgBiC,eACvBC,GAA2BJ,GAC3BK,GAAqB7B,EAAUwB,GAC/BC,EAASK,OACTL,EAASM,aAUjB,IAAKf,GAAWlC,EAAQpyB,OAAS,IAAMwwB,EAGrC,GAAI6D,EAAiB,CAGnBf,EAASN,gBAAgBsC,cACvBJ,GAA2B1rB,GAFK,WAMlC4oB,EAAQ5N,SAAQ,SAAC+Q,GACf,IAAMC,EAAclC,EAASF,cAAcn1B,IACzCw3B,GAAsBF,IAExBjC,EAASN,gBAAgBsC,cACvBJ,GAA2BK,GAC3BC,OA6eZ,SAA6BlC,EAAoBoC,GAC/C,IAAK,IAAI/tB,EAAI,EAAGA,EAAI+tB,EAAQ11B,SAAU2H,EAAG,CACvC,IAAMguB,EAAeD,EAAQ/tB,GAC7B,IAAKguB,EAAarM,iBAAiBiF,eAAgB,CAEjD,IAAMqH,EAAkBH,GAAsBE,GACxCE,EAAkBvC,EAASF,cAAcn1B,IAAI23B,GACnDtC,EAASF,cAAc3S,OAAOmV,GAC9BtC,EAASH,cAAc1S,OAAOoV,KA/ehCC,CAAoBxC,EAAUlB,GAIhC,OAAO3B,E,SAmEOsF,GACdzC,EACA9pB,EACA+mB,GAEA,IAAMzqB,EAAO0D,EAAM1D,KAEf2Y,EAA2B,KAC3BuX,GAA2B,EAG/B1C,EAASL,eAAe/V,cAAcpX,GAAM,SAACmwB,EAAiBC,GAC5D,IAAMja,EAAenV,EAAgBmvB,EAAiBnwB,GACtD2Y,EACEA,GAAekU,GAAgCuD,EAAIja,GACrD+Z,EACEA,GAA4B1D,GAAyB4D,MAEzD,IAWIxE,EAXAH,EAAY+B,EAASL,eAAeh1B,IAAI6H,IACvCyrB,GAIHyE,EACEA,GAA4B1D,GAAyBf,GACvD9S,EACEA,GAAekU,GAAgCpB,EAAW5rB,OAN5D4rB,EAAY,IAAI4E,GAChB7C,EAASL,eAAiBK,EAASL,eAAev1B,IAAIoI,EAAMyrB,IAS3C,MAAf9S,GACFiT,GAAsB,GAEtBA,GAAsB,EACtBjT,EAAc/F,GAAa7J,WACXykB,EAASL,eAAexX,QAAQ3V,GACxCyX,cAAa,SAACrO,EAAWknB,GAC/B,IAAM9P,EAAgBqM,GACpByD,EACAzwB,KAEE2gB,IACF7H,EAAcA,EAAYlP,qBACxBL,EACAoX,QAMR,IAAM+P,EAAoBvD,GAA4BvB,EAAW/nB,GACjE,IAAK6sB,IAAsB7sB,EAAM8f,iBAAiBiF,eAAgB,CAEhE,IAAM+H,EAAWb,GAAsBjsB,GACvC,aACG8pB,EAASF,cAAcrB,IAAIuE,GAC5B,0CAEF,IAAMC,EAuXDxD,KAtXLO,EAASF,cAAc11B,IAAI44B,EAAUC,GACrCjD,EAASH,cAAcz1B,IAAI64B,EAAKD,GAElC,IACI7M,EAASqI,GACXP,EACA/nB,EACA+mB,EAJkBrO,GAAqBoR,EAASJ,kBAAmBptB,GAMnE2Y,EACAiT,GAEF,IAAK2E,IAAsBL,EAA0B,CACnD,IAAM7F,EAAOyC,GAAsBrB,EAAW/nB,GAC9CigB,EAASA,EAAOsH,OAgXpB,SACEuC,EACA9pB,EACA2mB,GAEA,IAAMrqB,EAAO0D,EAAM1D,KACbywB,EAAMpB,GAAqB7B,EAAU9pB,GACrCurB,EAAWC,GAA+B1B,EAAUnD,GAEpD1G,EAAS6J,EAASN,gBAAgBiC,eACtCC,GAA2B1rB,GAC3B+sB,EACAxB,EAASK,OACTL,EAASM,YAGL5Z,EAAU6X,EAASL,eAAexX,QAAQ3V,GAGhD,GAAIywB,EACF,aACGjE,GAAyB7W,EAAQ7d,OAClC,0DA6BF,IAzBA,IAAM44B,EAAgB/a,EAAQgB,MAC5B,SAACR,EAAcwY,EAAqBC,GAClC,IACG7tB,EAAYoV,IACbwY,GACAnC,GAAyBmC,GAEzB,MAAO,CAAC5B,GAAyB4B,GAAqBjrB,OAGtD,IAAI,EAAmB,GAWvB,OAVIirB,IACF,EAAU,EAAQ1D,OAChB2B,GAAuB+B,GAAqBgC,KAC1C,SAAAtG,GAAQ,OAAAA,EAAK3mB,WAInBzG,EAAK2xB,GAAU,SAACC,EAAc+B,GAC5B,EAAU,EAAQ3F,OAAO2F,MAEpB,KAIJ52B,EAAI,EAAGA,EAAI02B,EAAcx2B,SAAUF,EAAG,CAC7C,IAAM62B,EAAcH,EAAc12B,GAClCwzB,EAASN,gBAAgBsC,cACvBJ,GAA2ByB,GAC3BxB,GAAqB7B,EAAUqD,IAIrC,OAAOlN,EA3akBmN,CAAuBtD,EAAU9pB,EAAO2mB,IAEjE,OAAO1G,E,SAcOoN,GACdvD,EACAxtB,EACAge,GAEA,IACM7B,EAAYqR,EAASJ,kBACrBzU,EAAc6U,EAASL,eAAenW,WAC1ChX,GACA,SAAC6W,EAAW4U,GACV,IACM9S,EAAckU,GAClBpB,EAFmBzqB,EAAgB6V,EAAW7W,IAKhD,GAAI2Y,EACF,OAAOA,KAIb,OAAOkF,GACL1B,EACAnc,EACA2Y,EACAqF,GAnBwB,G,SAwBZgT,GACdxD,EACA9pB,GAEA,IAAM1D,EAAO0D,EAAM1D,KACf2Y,EAA2B,KAG/B6U,EAASL,eAAe/V,cAAcpX,GAAM,SAACmwB,EAAiBC,GAC5D,IAAMja,EAAenV,EAAgBmvB,EAAiBnwB,GACtD2Y,EACEA,GAAekU,GAAgCuD,EAAIja,MAEvD,IAAIsV,EAAY+B,EAASL,eAAeh1B,IAAI6H,GACvCyrB,EAIH9S,EACEA,GAAekU,GAAgCpB,EAAW5rB,MAJ5D4rB,EAAY,IAAI4E,GAChB7C,EAASL,eAAiBK,EAASL,eAAev1B,IAAIoI,EAAMyrB,IAK9D,IAAMG,EAAqC,MAAfjT,EACtBsY,EAAoCrF,EACtC,IAAI3S,GAAUN,GAAa,GAAM,GACjC,KAYJ,O,SF9gBkC0R,GAClC,OAAOjR,GAA8BiR,EAAKrK,YE6gBnCkR,CAPYvF,GACjBF,EACA/nB,EANuC0Y,GACvCoR,EAASJ,kBACT1pB,EAAM1D,MAMN4rB,EAAsBqF,EAAgBzY,UAAY5F,GAAa7J,WAC/D6iB,IAkBJ,SAAS+B,GACPH,EACAlN,GAEA,OAAO6Q,GACL7Q,EACAkN,EAASL,eACQ,KACjB/Q,GAAqBoR,EAASJ,kBAAmBvtB,MAOrD,SAASsxB,GACP7Q,EACA8Q,EACAzY,EACA4H,GAEA,GAAIxf,EAAYuf,EAAUtgB,MACxB,OAAOqxB,GACL/Q,EACA8Q,EACAzY,EACA4H,GAGF,IAAMkL,EAAY2F,EAAcj5B,IAAI0H,KAGjB,MAAf8Y,GAAoC,MAAb8S,IACzB9S,EAAckU,GAAgCpB,EAAW5rB,MAG3D,IAAI8jB,EAAkB,GAChBva,EAAYrJ,EAAaugB,EAAUtgB,MACnCsxB,EAAiBhR,EAAU7K,kBAAkBrM,GAC7CwH,EAAYwgB,EAAc1b,SAASvd,IAAIiR,GAC7C,GAAIwH,GAAa0gB,EAAgB,CAC/B,IAAMC,EAAmB5Y,EACrBA,EAAYxP,kBAAkBC,GAC9B,KACEooB,EAAmB7R,GAAkBY,EAAanX,GACxDua,EAASA,EAAOsH,OACdkG,GACEG,EACA1gB,EACA2gB,EACAC,IAWN,OANI/F,IACF9H,EAASA,EAAOsH,OACdO,GAAwBC,EAAWnL,EAAWC,EAAa5H,KAIxDgL,EAOX,SAAS0N,GACP/Q,EACA8Q,EACAzY,EACA4H,GAEA,IAAMkL,EAAY2F,EAAcj5B,IAAI0H,KAGjB,MAAf8Y,GAAoC,MAAb8S,IACzB9S,EAAckU,GAAgCpB,EAAW5rB,MAG3D,IAAI8jB,EAAkB,GAyBtB,OAxBAyN,EAAc1b,SAAS1J,kBAAiB,SAAC5C,EAAWwH,GAClD,IAAM2gB,EAAmB5Y,EACrBA,EAAYxP,kBAAkBC,GAC9B,KACEooB,EAAmB7R,GAAkBY,EAAanX,GAClDkoB,EAAiBhR,EAAU7K,kBAAkBrM,GAC/CkoB,IACF3N,EAASA,EAAOsH,OACdoG,GACEC,EACA1gB,EACA2gB,EACAC,QAMJ/F,IACF9H,EAASA,EAAOsH,OACdO,GAAwBC,EAAWnL,EAAWC,EAAa5H,KAIxDgL,EAGT,SAASuL,GACP1B,EACAnD,GAEA,IAAM3mB,EAAQ2mB,EAAK3mB,MACb+sB,EAAMpB,GAAqB7B,EAAU9pB,GAE3C,MAAO,CACL4rB,OAAQ,WAEN,O,SFzpB6BjF,GACjC,OAAOA,EAAKrK,WAAWrH,YAAYH,UEupBjBiZ,CAAmBpH,IAASzX,GAAa7J,YAC1CoB,QAEfolB,WAAY,SAACmC,GACX,GAAe,OAAXA,EACF,OAAIjB,E,SA3eVjD,EACAxtB,EACAywB,GAEA,IAAMD,EAAWmB,GAAwBnE,EAAUiD,GACnD,GAAID,EAAU,CACZ,IAAMoB,EAAIC,GAAuBrB,GAC3BsB,EAAYF,EAAE5xB,KAClB+U,EAAU6c,EAAE7c,QACRoB,EAAenV,EAAgB8wB,EAAW9xB,GAKhD,OAAO+xB,GAA8BvE,EAAUsE,EAJpC,IAAIna,GACb7C,GAAoCC,GACpCoB,IAKF,MAAO,GA2dM6b,CAAkCxE,EAAU9pB,EAAM1D,KAAMywB,G,SA3fvEjD,EACAxtB,GAEA,OAAO2tB,GACLH,EACA,IAAI7V,GxBrNC,CACL3C,UAAU,EACVC,YAAY,EACZF,QAAS,KACTG,QAAQ,GwBiNuClV,IAwflCiyB,CAA4BzE,EAAU9pB,EAAM1D,MAKrD,IAAM9E,E1CvToB,SAAUg3B,EAAcxuB,GACxD,IAAIyuB,EAAS,gBACA,YAATD,EACFC,EACE,0FAEgB,sBAATD,EACTC,EAAS,6DACS,gBAATD,IACTC,EAAS,8BAGX,IAAMj3B,EAAQ,IAAIE,MAChB82B,EAAO,OAASxuB,EAAM1D,KAAKxH,WAAa,KAAO25B,GAIjD,OADCj3B,EAAcg3B,KAAOA,EAAKE,cACpBl3B,E0CsSam3B,CAAmBX,EAAQhuB,GACzC,OAAOyqB,GACLX,EACA9pB,EACsB,KACtBxI,KAUV,SAASm0B,GAAqB7B,EAAoB9pB,GAChD,IAAM8sB,EAAWb,GAAsBjsB,GACvC,OAAO8pB,EAASF,cAAcn1B,IAAIq4B,GAMpC,SAASb,GAAsBjsB,GAC7B,OAAOA,EAAM1D,KAAKxH,WAAa,IAAMkL,EAAMmoB,kBAM7C,SAAS8F,GACPnE,EACAiD,GAEA,OAAOjD,EAASH,cAAcl1B,IAAIs4B,GAMpC,SAASoB,GACPrB,GAEA,IAAM8B,EAAa9B,EAASrtB,QAAQ,KAKpC,OAJA,aACkB,IAAhBmvB,GAAqBA,EAAa9B,EAASt2B,OAAS,EACpD,iBAEK,CACL6a,QAASyb,EAAShyB,OAAO8zB,EAAa,GACtCtyB,KAAM,IAAIF,EAAK0wB,EAAShyB,OAAO,EAAG8zB,KAOtC,SAASP,GACPvE,EACAsE,EACAxR,GAEA,IAAMmL,EAAY+B,EAASL,eAAeh1B,IAAI25B,GAM9C,OALA,YAAOrG,EAAW,wDAKXD,GAAwBC,EAAWnL,EAJtBlE,GAClBoR,EAASJ,kBACT0E,GAEgE,MAiCpE,SAAS1C,GAA2B1rB,GAClC,OACEA,EAAM8f,iBAAiBiF,iBACtB/kB,EAAM8f,iBAAiBkF,YAKjBhlB,EAAM6uB,SAEN7uB,ECt1BX,kBACE,WAAqBuU,GAAA,KAAAA,QAUvB,OARE,YAAA9O,kBAAA,SAAkBC,GAEhB,OAAO,IAAIopB,EADGz6B,KAAKkgB,MAAM9O,kBAAkBC,KAI7C,YAAA4B,KAAA,WACE,OAAOjT,KAAKkgB,OAEhB,EAXA,GAaA,cAIE,WAAYuV,EAAoBxtB,GAC9BjI,KAAK06B,UAAYjF,EACjBz1B,KAAK8O,MAAQ7G,EAWjB,OARE,YAAAmJ,kBAAA,SAAkBC,GAChB,IAAM4M,EAAYpV,EAAU7I,KAAK8O,MAAOuC,GACxC,OAAO,IAAIspB,EAAsB36B,KAAK06B,UAAWzc,IAGnD,YAAAhL,KAAA,WACE,OAAO+lB,GAA+Bh5B,KAAK06B,UAAW16B,KAAK8O,QAE/D,EAjBA,GAoCa8rB,GAA2B,SACtC76B,EACA86B,EACAC,GAEA,OAAK/6B,GAA0B,kBAAVA,GAGrB,YAAO,QAASA,EAAO,6CAEK,kBAAjBA,EAAM,OACRg7B,GAA2Bh7B,EAAM,OAAQ86B,EAAaC,GAC5B,kBAAjB/6B,EAAM,OACfi7B,GAA4Bj7B,EAAM,OAAQ86B,QAEjD,aAAO,EAAO,4BAA8BI,KAAKC,UAAUn7B,EAAO,KAAM,KATjEA,GAaLg7B,GAA6B,SACjCI,EACAnI,EACA8H,GAEA,OAAQK,GACN,IAAK,YACH,OAAOL,EAAY,UACrB,QACE,aAAO,EAAO,4BAA8BK,KAI5CH,GAA8B,SAClCG,EACAnI,EACAoI,GAEKD,EAAG/1B,eAAe,cACrB,aAAO,EAAO,4BAA8B61B,KAAKC,UAAUC,EAAI,KAAM,IAEvE,IAAME,EAAQF,EAAE,UACK,kBAAVE,GACT,aAAO,EAAO,+BAAiCA,GAGjD,IAAMC,EAAetI,EAAS/f,OAO9B,GANA,YACmB,OAAjBqoB,GAAiD,qBAAjBA,EAChC,+CAIGA,EAAa7qB,aAChB,OAAO4qB,EAGT,IACMR,EADOS,EACYnpB,WACzB,MAA2B,kBAAhB0oB,EACFQ,EAIFR,EAAcQ,GAUVE,GAA2B,SACtCtzB,EACAgL,EACAwiB,EACAqF,GAEA,OAAOU,GACLvoB,EACA,IAAI0nB,GAAsBlF,EAAUxtB,GACpC6yB,IASSW,GAA+B,SAC1CxoB,EACA+f,EACA8H,GAEA,OAAOU,GACLvoB,EACA,IAAIwnB,GAAsBzH,GAC1B8H,IAIJ,SAASU,GACPvoB,EACA4nB,EACAC,GAEA,IAWItkB,EAXEklB,EAASzoB,EAAKrC,cAAcF,MAM5BrC,EAAWusB,GACfc,EACAb,EAAYzpB,kBAAkB,aAC9B0pB,GAIF,GAAI7nB,EAAKxC,aAAc,CACrB,IAAMkrB,EAAW1oB,EACXlT,EAAQ66B,GACZe,EAASxpB,WACT0oB,EACAC,GAEF,OACE/6B,IAAU47B,EAASxpB,YACnB9D,IAAastB,EAAS/qB,cAAcF,MAE7B,IAAIK,GAAShR,EAAOsQ,GAAahC,IAEjC4E,EAGT,IAAM2oB,EAAe3oB,EAerB,OAdAuD,EAAUolB,EACNvtB,IAAautB,EAAahrB,cAAcF,QAC1C8F,EAAUA,EAAQtF,eAAe,IAAIH,GAAS1C,KAEhDutB,EAAa7pB,aAAagF,IAAgB,SAAC1F,EAAWI,GACpD,IAAME,EAAe6pB,GACnB/pB,EACAopB,EAAYzpB,kBAAkBC,GAC9BypB,GAEEnpB,IAAiBF,IACnB+E,EAAUA,EAAQ9E,qBAAqBL,EAAWM,OAG/C6E,E,SCnNKqlB,KACd,MAAO,CACL97B,MAAO,KACP4d,SAAU,IAAI6E,K,SAsCFsZ,GACdC,EACA9zB,EACAzE,GAEA,GAAIwF,EAAYf,GACd8zB,EAAmBh8B,MAAQyD,EAC3Bu4B,EAAmBpe,SAASqe,aACvB,GAAiC,OAA7BD,EAAmBh8B,MAC5Bg8B,EAAmBh8B,MAAQg8B,EAAmBh8B,MAAM6R,YAAY3J,EAAMzE,OACjE,CACL,IAAMwb,EAAWhX,EAAaC,GACzB8zB,EAAmBpe,SAASuW,IAAIlV,IACnC+c,EAAmBpe,SAAS9d,IAAImf,EAAU6c,MAK5CC,GAFcC,EAAmBpe,SAASvd,IAAI4e,GAC9C/W,EAAOE,EAAaF,GACoBzE,I,SAU5By4B,GACdF,EACA9zB,GAEA,GAAIe,EAAYf,GAGd,OAFA8zB,EAAmBh8B,MAAQ,KAC3Bg8B,EAAmBpe,SAASqe,SACrB,EAEP,GAAiC,OAA7BD,EAAmBh8B,MAAgB,CACrC,GAAIg8B,EAAmBh8B,MAAM0Q,aAE3B,OAAO,EAEP,IAAM1Q,EAAQg8B,EAAmBh8B,MAOjC,OANAg8B,EAAmBh8B,MAAQ,KAE3BA,EAAMgS,aAAagF,IAAgB,SAACjX,EAAKie,GACvC+d,GAA2BC,EAAoB,IAAIh0B,EAAKjI,GAAMie,MAGzDke,GAAyBF,EAAoB9zB,GAEjD,GAAI8zB,EAAmBpe,SAAS4Y,KAAO,EAAG,CAC/C,IAAMvX,EAAWhX,EAAaC,GAE9B,GADAA,EAAOE,EAAaF,GAChB8zB,EAAmBpe,SAASuW,IAAIlV,GACbid,GACnBF,EAAmBpe,SAASvd,IAAI4e,GAChC/W,IAGA8zB,EAAmBpe,SAASiF,OAAO5D,GAIvC,OAA4C,IAArC+c,EAAmBpe,SAAS4Y,KAEnC,OAAO,E,SAYG2F,GACdH,EACAI,EACAC,GAEiC,OAA7BL,EAAmBh8B,MACrBq8B,EAAKD,EAAYJ,EAAmBh8B,O,SAgBtCg8B,EACAK,GAEAL,EAAmBpe,SAASgJ,SAAQ,SAAC5I,EAAMje,GACzCs8B,EAAKt8B,EAAKie,MAlBVse,CAA+BN,GAAoB,SAACj8B,EAAKie,GAEvDme,GAA8Bne,EADjB,IAAIhW,EAAKo0B,EAAW17B,WAAa,IAAMX,GACVs8B,MCtIhD,+BACU,KAAAE,UAAkBzhB,GAAa7J,WASzC,OAPE,YAAAyP,QAAA,SAAQxY,GACN,OAAOjI,KAAKs8B,UAAUhrB,SAASrJ,IAGjC,YAAAs0B,eAAA,SAAet0B,EAAYu0B,GACzBx8B,KAAKs8B,UAAYt8B,KAAKs8B,UAAU1qB,YAAY3J,EAAMu0B,IAEtD,EAVA,GCFA,2BACU,KAAAC,UAAqC,GAa/C,OAXE,YAAAC,iBAAA,SAAiBl8B,EAAcm8B,QAAA,IAAAA,MAAA,GACxB,YAAS38B,KAAKy8B,UAAWj8B,KAC5BR,KAAKy8B,UAAUj8B,GAAQ,GAGzBR,KAAKy8B,UAAUj8B,IAASm8B,GAG1B,YAAAv8B,IAAA,WACE,OAAO,YAASJ,KAAKy8B,YAEzB,EAdA,GCFMG,GAAgD,GAChDC,GAAsC,G,SAE5BC,GAA0BjxB,GACxC,IAAMkxB,EAAalxB,EAASpL,WAM5B,OAJKm8B,GAAYG,KACfH,GAAYG,GAAc,IAAIC,IAGzBJ,GAAYG,GCLrB,kBAGE,WAAoBE,GAAA,KAAAA,cAFZ,KAAAC,MAAwC,KAiBlD,OAbE,YAAA98B,IAAA,WACE,IAAM+8B,EAAWn9B,KAAKi9B,YAAY78B,MAE5Bi7B,EAAQ,OAAH,IAAG,CAAH,GAAQ8B,GAQnB,OAPIn9B,KAAKk9B,OACPh4B,EAAKlF,KAAKk9B,OAAO,SAACE,EAAcr9B,GAC9Bs7B,EAAM+B,GAAQ/B,EAAM+B,GAAQr9B,KAGhCC,KAAKk9B,MAAQC,EAEN9B,GAEX,EAlBA,GCOA,cAQE,WAAYgC,EAAqCC,GAAA,KAAAA,UANjD,KAAAC,eAA2C,GAOzCv9B,KAAKw9B,eAAiB,IAAIC,GAAcJ,GAExC,IAAM/1B,EAjBmB,IAmBvB,IAAgD1B,KAAKmnB,SACvD3lB,EAAsBpH,KAAK09B,aAAa16B,KAAKhD,MAAO4F,KAAKI,MAAMsB,IAyBnE,OAtBU,YAAAo2B,aAAR,sBACQC,EAAQ39B,KAAKw9B,eAAep9B,MAC5Bw9B,EAA8B,GAChCC,GAAoB,EAExB34B,EAAKy4B,GAAO,SAACP,EAAcr9B,GACrBA,EAAQ,GAAK,YAAS,EAAKw9B,eAAgBH,KAC7CQ,EAAcR,GAAQr9B,EACtB89B,GAAoB,MAIpBA,GACF79B,KAAKs9B,QAAQQ,YAAYF,GAI3Bx2B,EACEpH,KAAK09B,aAAa16B,KAAKhD,MACvB4F,KAAKI,MAAsB,EAAhBJ,KAAKmnB,SAtCQ,OAyC9B,EAvCA,GCEA,kBACE,KAAAgR,YAA2B,GAK3B,KAAAC,gBAAkB,G,SAMJC,GACdC,EACAC,GAIA,IADA,IAAIC,EAA6B,KACxBn8B,EAAI,EAAGA,EAAIk8B,EAAch8B,OAAQF,IAAK,CAC7C,IAAMuB,EAAO26B,EAAcl8B,GACrBgG,EAAOzE,EAAK66B,UACD,OAAbD,GAAsBx0B,GAAW3B,EAAMm2B,EAASn2B,QAClDi2B,EAAWH,YAAYr5B,KAAK05B,GAC5BA,EAAW,MAGI,OAAbA,IACFA,EAAW,CAAExS,OAAQ,GAAI3jB,KAAI,IAG/Bm2B,EAASxS,OAAOlnB,KAAKlB,GAEnB46B,GACFF,EAAWH,YAAYr5B,KAAK05B,G,SAahBE,GACdJ,EACAj2B,EACAk2B,GAEAF,GAAsBC,EAAYC,GAClCI,GAA6CL,GAAY,SAAAM,GACvD,OAAA50B,GAAW40B,EAAWv2B,M,SAaVw2B,GACdP,EACAQ,EACAP,GAEAF,GAAsBC,EAAYC,GAClCI,GACEL,GACA,SAAAM,GACE,OAAAz0B,GAAay0B,EAAWE,IACxB30B,GAAa20B,EAAaF,MAIhC,SAASD,GACPL,EACA7f,GAEA6f,EAAWF,kBAGX,IADA,IAAIW,GAAU,EACL18B,EAAI,EAAGA,EAAIi8B,EAAWH,YAAY57B,OAAQF,IAAK,CACtD,IAAM28B,EAAYV,EAAWH,YAAY97B,GACzC,GAAI28B,EAEEvgB,EADcugB,EAAU32B,OAE1B42B,GAAeX,EAAWH,YAAY97B,IACtCi8B,EAAWH,YAAY97B,GAAK,MAE5B08B,GAAU,EAKZA,IACFT,EAAWH,YAAc,IAG3BG,EAAWF,kBAWb,SAASa,GAAeD,GACtB,IAAK,IAAI38B,EAAI,EAAGA,EAAI28B,EAAUhT,OAAOzpB,OAAQF,IAAK,CAChD,IAAM68B,EAAYF,EAAUhT,OAAO3pB,GACnC,GAAkB,OAAd68B,EAAoB,CACtBF,EAAUhT,OAAO3pB,GAAK,KACtB,IAAM88B,EAAUD,EAAUE,iBACtBx8B,GACFO,EAAI,UAAY+7B,EAAUr+B,YAE5BwG,EAAe83B,KCvIrB,kBAQE,WAAoBE,GAAA,KAAAA,iBAPZ,KAAAC,WAKJ,GAGF,YACE78B,MAAMC,QAAQ28B,IAAmBA,EAAe98B,OAAS,EACzD,8BA2DN,OA5CY,YAAAg9B,QAAV,SAAkBxvB,G,IAAmB,wDACnC,GAAItN,MAAMC,QAAQtC,KAAKk/B,WAAWvvB,IAIhC,IAFA,IAAMyvB,EAAY,OAAH,IAAG,CAAH,eAAOp/B,KAAKk/B,WAAWvvB,KAE7B1N,EAAI,EAAGA,EAAIm9B,EAAUj9B,OAAQF,IACpCm9B,EAAUn9B,GAAGo9B,SAAS98B,MAAM68B,EAAUn9B,GAAGq9B,QAASp9B,IAKxD,YAAAq9B,GAAA,SAAG5vB,EAAmB0vB,EAAgCC,GACpDt/B,KAAKw/B,mBAAmB7vB,GACxB3P,KAAKk/B,WAAWvvB,GAAa3P,KAAKk/B,WAAWvvB,IAAc,GAC3D3P,KAAKk/B,WAAWvvB,GAAWjL,KAAK,CAAE26B,SAAQ,EAAEC,QAAO,IAEnD,IAAMR,EAAY9+B,KAAKy/B,gBAAgB9vB,GACnCmvB,GACFO,EAAS98B,MAAM+8B,EAASR,IAI5B,YAAAY,IAAA,SAAI/vB,EAAmB0vB,EAAgCC,GACrDt/B,KAAKw/B,mBAAmB7vB,GAExB,IADA,IAAMyvB,EAAYp/B,KAAKk/B,WAAWvvB,IAAc,GACvC1N,EAAI,EAAGA,EAAIm9B,EAAUj9B,OAAQF,IACpC,GACEm9B,EAAUn9B,GAAGo9B,WAAaA,KACxBC,GAAWA,IAAYF,EAAUn9B,GAAGq9B,SAGtC,YADAF,EAAUxa,OAAO3iB,EAAG,IAMlB,YAAAu9B,mBAAR,SAA2B7vB,GACzB,YACE3P,KAAKi/B,eAAeU,MAAK,SAAAC,GACvB,OAAOA,IAAOjwB,KAEhB,kBAAoBA,IAG1B,EAtEA,GCDA,eAOE,iBAEMkwB,EACAC,EAHN,EACE,YAAM,CAAC,aAAW,K,MAII,qBAAbC,UAC8B,qBAA9BA,SAASC,mBAEkB,qBAAvBD,SAAQ,QAEjBD,EAAmB,mBACnBD,EAAS,UACiC,qBAA1BE,SAAQ,WACxBD,EAAmB,sBACnBD,EAAS,aACgC,qBAAzBE,SAAQ,UACxBD,EAAmB,qBACnBD,EAAS,YACoC,qBAA7BE,SAAQ,eACxBD,EAAmB,yBACnBD,EAAS,iBAQb,EAAKI,UAAW,EAEZH,GACFC,SAASC,iBACPF,GACA,WACE,IAAMhb,GAAWib,SAASF,GACtB/a,IAAY,EAAKmb,WACnB,EAAKA,SAAWnb,EAChB,EAAKqa,QAAQ,UAAWra,OAG5B,G,EASR,OAxDuC,iBAG9B,EAAAob,YAAP,WACE,OAAO,IAAIC,GAgDb,YAAAV,gBAAA,SAAgB9vB,GAEd,OADA,YAAqB,YAAdA,EAAyB,uBAAyBA,GAClD,CAAC3P,KAAKigC,WAEjB,EAxDA,CAAuCG,ICKvC,eAOE,mBACE,YAAM,CAAC,YAAU,K,OAPX,EAAAC,SAAU,EAcI,qBAAXv/B,QAC4B,qBAA5BA,OAAOk/B,kBACb,gBAEDl/B,OAAOk/B,iBACL,UACA,WACO,EAAKK,UACR,EAAKA,SAAU,EACf,EAAKlB,QAAQ,UAAU,OAG3B,GAGFr+B,OAAOk/B,iBACL,WACA,WACM,EAAKK,UACP,EAAKA,SAAU,EACf,EAAKlB,QAAQ,UAAU,OAG3B,I,EAaR,OAnDmC,iBAG1B,EAAAe,YAAP,WACE,OAAO,IAAII,GAuCb,YAAAb,gBAAA,SAAgB9vB,GAEd,OADA,YAAqB,WAAdA,EAAwB,uBAAyBA,GACjD,CAAC3P,KAAKqgC,UAGf,YAAAE,gBAAA,WACE,OAAOvgC,KAAKqgC,SAEhB,EAnDA,CAAmCD,ICJnC,cASE,WAAoBI,GAAA,KAAAA,aARpB,KAAAC,iBAA8B,GAC9B,KAAAC,mBAAqB,EACrB,KAAAC,oBAAsB,EACtB,KAAAC,QAA+B,KA6CjC,OAtCE,YAAAC,WAAA,SAAWC,EAAqBzB,GAC9Br/B,KAAK2gC,mBAAqBG,EAC1B9gC,KAAK4gC,QAAUvB,EACXr/B,KAAK2gC,mBAAqB3gC,KAAK0gC,qBACjC1gC,KAAK4gC,UACL5gC,KAAK4gC,QAAU,OASnB,YAAAG,eAAA,SAAeC,EAAoBx9B,GAAnC,WACExD,KAAKygC,iBAAiBO,GAAcx9B,EACpC,I,iBACE,IAAMy9B,EAAY,EAAKR,iBACrB,EAAKC,2BAEA,EAAKD,iBAAiB,EAAKC,oBAClC,I,eAASz+B,GACHg/B,EAAUh/B,IACZgF,GAAe,WACb,EAAKu5B,WAAWS,EAAUh/B,QAHvBA,EAAI,EAAGA,EAAIg/B,EAAU9+B,SAAUF,E,EAA/BA,GAOT,GAAI,EAAKy+B,qBAAuB,EAAKC,mB,OAC/B,EAAKC,UACP,EAAKA,UACL,EAAKA,QAAU,M,QAInB,EAAKF,sB,OAnBA1gC,KAAKygC,iBAAiBzgC,KAAK0gC,qBAAmB,C,yBAsBzD,EAjDA,GCuBaQ,GAAgC,QAChCC,GAAkC,QAmC/C,cA0BE,WACSC,EACAv1B,EACCw1B,EACDC,EACAC,GAJA,KAAAH,SACA,KAAAv1B,WACC,KAAAw1B,gBACD,KAAAC,qBACA,KAAAC,gBA9BT,KAAAC,UAAY,EACZ,KAAAC,cAAgB,EAUR,KAAAC,gBAAiB,EAqBvB1hC,KAAK2hC,KAAO1+B,EAAWm+B,GACvBphC,KAAK4hC,OAAS9E,GAA0BjxB,GACxC7L,KAAK6hC,MAAQ,SAAC91B,GACZ,OAAAH,GAAsBC,EAAUnB,GAAcqB,IA4QpD,OArQE,YAAA+1B,KAAA,SAAKC,EAA8BC,GAAnC,WACEhiC,KAAKiiC,cAAgB,EACrBjiC,KAAKkiC,cAAgBF,EACrBhiC,KAAKmiC,gBAAkB,IAAIC,GAAeL,GAC1C/hC,KAAKqiC,WAAY,EAEjBriC,KAAKsiC,qBAAuBp7B,YAAW,WACrC,EAAKy6B,KAAK,gCAEV,EAAKY,YACL,EAAKD,qBAAuB,OAE3B18B,KAAKI,MA5De,MvDsHQ,SAAUb,GAC3C,GAAI,eAAuC,aAAxB46B,SAASyC,WAC1Br9B,QACK,CAIL,IAAI,GAAS,EACP,EAAY,SAAZ,IACC46B,SAAS0C,KAKT,IACH,GAAS,EACTt9B,KANA+B,WAAW,EAAWtB,KAAKI,MAAM,MAUjC+5B,SAASC,kBACXD,SAASC,iBAAiB,mBAAoB,GAAW,GAEzDl/B,OAAOk/B,iBAAiB,OAAQ,GAAW,IAEjCD,SAAiB2C,cAG1B3C,SAAiB2C,YAAY,sBAAsB,WACtB,aAAxB3C,SAASyC,YACX,OAKH1hC,OAAe4hC,YAAY,SAAU,KuD1FxCC,EAAoB,WAClB,IAAI,EAAKN,UAAT,CAKA,EAAKO,gBAAkB,IAAIC,IACzB,W,IAAC,sDACO,kBAAoCC,EAAI,GAAvCC,EAAO,KAAEC,EAAI,KAAEC,EAAI,KAAM,KAAM,KAEtC,GADA,EAAKC,wBAAwBJ,GACxB,EAAKF,gBASV,GALI,EAAKN,uBACPa,aAAa,EAAKb,sBAClB,EAAKA,qBAAuB,MAE9B,EAAKZ,gBAAiB,EAClBqB,IAAY7B,GACd,EAAK3/B,GAAKyhC,EACV,EAAKI,SAAWH,MACX,IAAIF,IAAY5B,GAgBrB,MAAM,IAAI99B,MAAM,kCAAoC0/B,GAdhDC,GAGF,EAAKJ,gBAAgBS,cAAe,EAIpC,EAAKlB,gBAAgBtB,WAAWmC,GAAgB,WAC9C,EAAKT,gBAGP,EAAKA,gBAMX,W,IAAC,sDACO,kBAAaO,EAAI,GAAhBQ,EAAE,KAAE9/B,EAAI,KACf,EAAK0/B,wBAAwBJ,GAC7B,EAAKX,gBAAgBpB,eAAeuC,EAAc9/B,MAEpD,WACE,EAAK++B,cAEP,EAAKV,OAKP,IAAM0B,EAA8C,CACpD,MAA2C,KAC3CA,EAAS,IAAmC39B,KAAKI,MAC/B,IAAhBJ,KAAKmnB,UAEH,EAAK6V,gBAAgBY,2BACvBD,EAAS,GAEL,EAAKX,gBAAgBY,0BAE3BD,EAAS,EAAkBh5B,GACvB,EAAK+2B,qBACPiC,EAAS,EAA4B,EAAKjC,oBAExC,EAAKC,gBACPgC,EAAS,GAAuB,EAAKhC,eAEnC,EAAKF,gBACPkC,EAAS,EAAyB,EAAKlC,eAGnB,qBAAb50B,UACPA,SAASg3B,UACTj5B,GAAgBzD,KAAK0F,SAASg3B,YAE9BF,EAAS,ErDlMQ,KqDoMnB,IAAMG,EAAa,EAAK7B,MAAM0B,GAC9B,EAAK5B,KAAK,+BAAiC+B,GAC3C,EAAKd,gBAAgBe,OAAOD,GAAY,oBAS5C,YAAAE,MAAA,WACE5jC,KAAK4iC,gBAAgBiB,cAAc7jC,KAAKuB,GAAIvB,KAAKojC,UACjDpjC,KAAK8jC,uBAAuB9jC,KAAKuB,GAAIvB,KAAKojC,WAQrC,EAAAW,WAAP,WACEC,EAAsBC,aAAc,GAQ/B,EAAAC,cAAP,WACEF,EAAsBG,gBAAiB,GAIlC,EAAAC,YAAP,WACE,OAAI,kBAEOJ,EAAsBC,cAM5BD,EAAsBG,gBACH,qBAAbpE,UACmB,MAA1BA,SAASsE,iBvD0LK,kBAAXvjC,QACPA,OAAM,QACNA,OAAM,OAAN,YACC,UAAUiG,KAAKjG,OAAO2L,SAAS63B,UASR,kBAAZC,SAA8C,kBAAfA,QAAQC,MuD5LrD,YAAAC,sBAAA,aAKQ,YAAAC,UAAR,WACE1kC,KAAKqiC,WAAY,EAEbriC,KAAK4iC,kBACP5iC,KAAK4iC,gBAAgB+B,QACrB3kC,KAAK4iC,gBAAkB,MAIrB5iC,KAAK4kC,iBACP7E,SAAS0C,KAAKoC,YAAY7kC,KAAK4kC,gBAC/B5kC,KAAK4kC,eAAiB,MAGpB5kC,KAAKsiC,uBACPa,aAAanjC,KAAKsiC,sBAClBtiC,KAAKsiC,qBAAuB,OAOxB,YAAAC,UAAR,WACOviC,KAAKqiC,YACRriC,KAAK2hC,KAAK,8BACV3hC,KAAK0kC,YAED1kC,KAAKkiC,gBACPliC,KAAKkiC,cAAcliC,KAAK0hC,gBACxB1hC,KAAKkiC,cAAgB,QAS3B,YAAAyC,MAAA,WACO3kC,KAAKqiC,YACRriC,KAAK2hC,KAAK,6BACV3hC,KAAK0kC,cAST,YAAAI,KAAA,SAAKthC,GACH,IAAMuhC,EAAU,YAAUvhC,GAC1BxD,KAAKwhC,WAAauD,EAAQ5iC,OAC1BnC,KAAK4hC,OAAOlF,iBAAiB,aAAcqI,EAAQ5iC,QAWnD,IARA,IAAM6iC,EAAa,YAAaD,GAI1BhgC,EAAWH,EAAkBogC,EAtRdC,MA0RZhjC,EAAI,EAAGA,EAAI8C,EAAS5C,OAAQF,IACnCjC,KAAK4iC,gBAAgBsC,eACnBllC,KAAKiiC,cACLl9B,EAAS5C,OACT4C,EAAS9C,IAEXjC,KAAKiiC,iBAST,YAAA6B,uBAAA,SAAuBviC,EAAY4jC,GACjC,IAAI,cAAJ,CAGAnlC,KAAK4kC,eAAiB7E,SAASsE,cAAc,UAC7C,IAAMd,EAAqC,CAC3C,OAA2D,KAC3DA,EAAS,GAA+BhiC,EACxCgiC,EAAS,GAA+B4B,EACxCnlC,KAAK4kC,eAAeQ,IAAMplC,KAAK6hC,MAAM0B,GACrCvjC,KAAK4kC,eAAeS,MAAMC,QAAU,OAEpCvF,SAAS0C,KAAK8C,YAAYvlC,KAAK4kC,kBAMzB,YAAA1B,wBAAR,SAAgCJ,GAE9B,IAAMrB,EAAgB,YAAUqB,GAAM3gC,OACtCnC,KAAKyhC,eAAiBA,EACtBzhC,KAAK4hC,OAAOlF,iBAAiB,iBAAkB+E,IAEnD,EAhTA,GA0TA,cAiCE,WACE+D,EACAC,EACOzD,EACAH,GAEP,GAHO,KAAAG,eACA,KAAAH,QAlCT,KAAA6D,oBAAsB,IAAIC,IAG1B,KAAAC,YAA8D,GAO9D,KAAAC,cAAgBjgC,KAAKI,MAAsB,IAAhBJ,KAAKmnB,UAIhC,KAAAsW,cAAe,EAsBR,cAwCHrjC,KAAKwlC,UAAYA,EACjBxlC,KAAKylC,YAAcA,MAzCH,CAKhBzlC,KAAKwjC,yBAA2BliC,IAChCR,OAzY2C,aA0YLd,KAAKwjC,0BACvCgC,EACJ1kC,OA3YwC,UA4YLd,KAAKwjC,0BACpCiC,EAGJzlC,KAAK8lC,SAAWjD,EAA2BkD,gBAG3C,IAAIC,EAAS,GAGb,GACEhmC,KAAK8lC,SAASV,KACwC,gBAAtDplC,KAAK8lC,SAASV,IAAI3+B,OAAO,EAAG,cAActE,QAG1C6jC,EAAS,4BADajG,SAASvzB,OACwB,eAEzD,IAAMy5B,EAAiB,eAAiBD,EAAS,iBACjD,IACEhmC,KAAK8lC,SAASI,IAAIpE,OAClB9hC,KAAK8lC,SAASI,IAAI1gB,MAAMygB,GACxBjmC,KAAK8lC,SAASI,IAAIvB,QAClB,MAAO1jC,GACP8B,EAAI,2BACA9B,EAAEkG,OACJpE,EAAI9B,EAAEkG,OAERpE,EAAI9B,KAqQZ,OAzPiB,EAAA8kC,cAAf,WACE,IAAMI,EAASpG,SAASsE,cAAc,UAItC,GAHA8B,EAAOd,MAAMC,QAAU,QAGnBvF,SAAS0C,KAqBX,KAAM,oGApBN1C,SAAS0C,KAAK8C,YAAYY,GAC1B,IAIYA,EAAOC,cAAcrG,UAG7Bh9B,EAAI,iCAEN,MAAO9B,GACP,IAAMuL,EAASuzB,SAASvzB,OACxB25B,EAAOf,IACL,gEACA54B,EACA,2BAmBN,OAVI25B,EAAOE,gBACTF,EAAOD,IAAMC,EAAOE,gBACXF,EAAOC,cAChBD,EAAOD,IAAMC,EAAOC,cAAcrG,SAExBoG,EAAepG,WAEzBoG,EAAOD,IAAOC,EAAepG,UAGxBoG,GAMT,YAAAxB,MAAA,sBAEE3kC,KAAKsmC,OAAQ,EAETtmC,KAAK8lC,WAIP9lC,KAAK8lC,SAASI,IAAIzD,KAAK8D,UAAY,GACnCr/B,YAAW,WACa,OAAlB,EAAK4+B,WACP/F,SAAS0C,KAAKoC,YAAY,EAAKiB,UAC/B,EAAKA,SAAW,QAEjBlgC,KAAKI,MAAM,KAIhB,IAAMg8B,EAAehiC,KAAKgiC,aACtBA,IACFhiC,KAAKgiC,aAAe,KACpBA,MASJ,YAAA6B,cAAA,SAActiC,EAAY4jC,GAMxB,IALAnlC,KAAKwmC,KAAOjlC,EACZvB,KAAKymC,KAAOtB,EACZnlC,KAAKsmC,OAAQ,EAGNtmC,KAAK0mC,kBAUN,YAAAA,YAAR,WAIE,GACE1mC,KAAKsmC,OACLtmC,KAAKqjC,cACLrjC,KAAK0lC,oBAAoBnP,MAAQv2B,KAAK4lC,YAAYzjC,OAAS,EAAI,EAAI,GACnE,CAEAnC,KAAK6lC,gBACL,IAAMtC,EAA8C,GACpDA,EAAS,GAA+BvjC,KAAKwmC,KAC7CjD,EAAS,GAA+BvjC,KAAKymC,KAC7ClD,EAAS,IAAmCvjC,KAAK6lC,cAMjD,IALA,IAAIc,EAAS3mC,KAAK6hC,MAAM0B,GAEpBqD,EAAgB,GAChB3kC,EAAI,EAEDjC,KAAK4lC,YAAYzjC,OAAS,GAAG,CAGlC,KADgBnC,KAAK4lC,YAAY,GAEtBiB,EAAgB1kC,OAxhBX,GA0hBZykC,EAAczkC,QA3hBA,MAmjBhB,MApBA,IAAM2kC,EAAS9mC,KAAK4lC,YAAYmB,QAChCH,EACEA,SAGA3kC,EACA,IACA6kC,EAAOE,IALPJ,MAQA3kC,EACA,IACA6kC,EAAOG,GAVPL,KAaA3kC,EACA,IACA6kC,EAAOD,EACT5kC,IASJ,OAHA0kC,GAAkBC,EAClB5mC,KAAKknC,gBAAgBP,EAAQ3mC,KAAK6lC,gBAE3B,EAEP,OAAO,GAUX,YAAAX,eAAA,SAAeiC,EAAgBC,EAAmB5jC,GAEhDxD,KAAK4lC,YAAYlhC,KAAK,CAAEsiC,IAAKG,EAAQF,GAAIG,EAAWP,EAAGrjC,IAInDxD,KAAKsmC,OACPtmC,KAAK0mC,eASD,YAAAQ,gBAAR,SAAwBG,EAAaC,GAArC,WAEEtnC,KAAK0lC,oBAAoB6B,IAAID,GAE7B,IAAME,EAAe,WACnB,EAAK9B,oBAAoB9iB,OAAO0kB,GAChC,EAAKZ,eAKDe,EAAmBvgC,WACvBsgC,EACA5hC,KAAKI,MA1lBwB,OAqmB/BhG,KAAK2jC,OAAO0D,GARS,WAEnBlE,aAAasE,GAGbD,QAWJ,YAAA7D,OAAA,SAAO0D,EAAaK,GAApB,WACM,cAED1nC,KAAa2nC,eAAeN,EAAKK,GAElCxgC,YAAW,WACT,IAEE,IAAK,EAAKm8B,aACR,OAEF,IAAM,EAAY,EAAKyC,SAASI,IAAI7B,cAAc,UAClD,EAAUv4B,KAAO,kBACjB,EAAU87B,OAAQ,EAClB,EAAUxC,IAAMiC,EAEhB,EAAUQ,OAAU,EAAkBC,mBAAqB,WAEzD,IAAMC,EAAU,EAAkBvF,WAC7BuF,GAAqB,WAAXA,GAAkC,aAAXA,IAEpC,EAAUF,OAAU,EAAkBC,mBAAqB,KACvD,EAAUE,YACZ,EAAUA,WAAWnD,YAAY,GAEnC6C,MAGJ,EAAUO,QAAU,WAClBllC,EAAI,oCAAsCskC,GAC1C,EAAKhE,cAAe,EACpB,EAAKsB,SAEP,EAAKmB,SAASI,IAAIzD,KAAK8C,YAAY,GACnC,MAAOtkC,OAGR2E,KAAKI,MAAM,KAGpB,EAjVA,GC1XWkiC,GAAc,G,SAGTC,GAAcC,GAC5BF,GAAcE,ECiBhB,IAGIC,GAAgB,KACQ,qBAAjBC,aACTD,GAAgBC,aACc,qBAAdC,YAChBF,GAAgBE,WAUlB,kBAwBE,WACSnH,EACPv1B,EACQw1B,EACRC,EACAC,GAJO,KAAAH,SAEC,KAAAC,gBA1BV,KAAAmH,eAAgC,KAChC,KAAAC,OAA0B,KAC1B,KAAAC,YAAc,EACd,KAAAlH,UAAY,EACZ,KAAAC,cAAgB,EA0BdzhC,KAAK2hC,KAAO1+B,EAAWjD,KAAKohC,QAC5BphC,KAAK4hC,OAAS9E,GAA0BjxB,GACxC7L,KAAKgM,QAAU28B,EAAoBC,eACjC/8B,EACAy1B,EACAC,GAEFvhC,KAAK+K,UAAYc,EAASd,UAiV9B,OAvUiB,EAAA69B,eAAf,SACE/8B,EACAy1B,EACAC,GAEA,IAAMgC,EAAqC,GAiB3C,OAhBAA,EAAS,EAAkBh5B,IAGxB,eACmB,qBAAbkC,UACPA,SAASg3B,UACTj5B,GAAgBzD,KAAK0F,SAASg3B,YAE9BF,EAAS,EvD7FU,KuD+FjBjC,IACFiC,EAAS,EAA4BjC,GAEnCC,IACFgC,EAAS,GAAuBhC,GAE3B31B,GAAsBC,EAAUpB,GAAW84B,IAOpD,YAAAzB,KAAA,SAAKC,EAA8BC,GAAnC,WACEhiC,KAAKgiC,aAAeA,EACpBhiC,KAAK+hC,UAAYA,EAEjB/hC,KAAK2hC,KAAK,2BAA6B3hC,KAAKgM,SAE5ChM,KAAK0hC,gBAAiB,EAEtBvgC,EAAkBtB,IAAI,8BAA8B,GAEpD,IACE,GAAI,cAAa,CACf,IAAMgpC,EAAS7oC,KAAK+K,UAAY,YAAc,OAExC+9B,EAAmC,CACvCC,QAAS,CACP,aAAc,cAAgCb,GAAW,IAAIc,EAAQC,SAAQ,IAAIJ,EACjF,mBAAoB7oC,KAAKqhC,eAAiB,KAKxC6H,EAAM,oLACNC,EAC+B,IAAnCnpC,KAAKgM,QAAQZ,QAAQ,UACjB89B,EAAG,aAAmBA,EAAG,YACzBA,EAAG,YAAkBA,EAAG,WAE1BC,IACFL,EAAO,MAAY,CAAEM,OAAQD,IAG/BnpC,KAAKqpC,OAAS,IAAIhB,GAAcroC,KAAKgM,QAAS,GAAI88B,OAC7C,CACCA,EAAmC,CACvCC,QAAS,CACP,mBAAoB/oC,KAAKqhC,eAAiB,KAG9CrhC,KAAKqpC,OAAS,IAAIhB,GAAcroC,KAAKgM,QAAS,GAAI88B,IAEpD,MAAO7nC,GACPjB,KAAK2hC,KAAK,kCACV,IAAMx+B,EAAQlC,EAAEe,SAAWf,EAAEuC,KAK7B,OAJIL,GACFnD,KAAK2hC,KAAKx+B,QAEZnD,KAAKuiC,YAIPviC,KAAKqpC,OAAOC,OAAS,WACnB,EAAK3H,KAAK,wBACV,EAAKD,gBAAiB,GAGxB1hC,KAAKqpC,OAAOE,QAAU,WACpB,EAAK5H,KAAK,0CACV,EAAK0H,OAAS,KACd,EAAK9G,aAGPviC,KAAKqpC,OAAOG,UAAY,SAAAC,GACtB,EAAKC,oBAAoBD,IAG3BzpC,KAAKqpC,OAAOpB,QAAU,SAAAhnC,GACpB,EAAK0gC,KAAK,yCAEV,IAAMx+B,EAASlC,EAAUe,SAAYf,EAAUuC,KAC3CL,GACF,EAAKw+B,KAAKx+B,GAEZ,EAAKo/B,cAOT,YAAAqB,MAAA,aAIO,EAAAM,cAAP,WACEyE,EAAoBxE,gBAAiB,GAGhC,EAAAC,YAAP,WACE,IAAIuF,GAAe,EACnB,GAAyB,qBAAdC,WAA6BA,UAAUC,UAAW,CAC3D,IACMC,EAAkBF,UAAUC,UAAUE,MADpB,kCAEpBD,GAAmBA,EAAgB3nC,OAAS,GAC1C6nC,WAAWF,EAAgB,IAAM,MACnCH,GAAe,GAKrB,OACGA,GACiB,OAAlBtB,KACCM,EAAoBxE,gBAiBlB,EAAA8F,iBAAP,WAGE,OACE9oC,EAAkBR,oBACsC,IAAxDQ,EAAkBf,IAAI,+BAI1B,YAAAqkC,sBAAA,WACEtjC,EAAkBZ,OAAO,+BAGnB,YAAA2pC,aAAR,SAAqB1mC,GAEnB,GADAxD,KAAKyoC,OAAO/jC,KAAKlB,GACbxD,KAAKyoC,OAAOtmC,SAAWnC,KAAK0oC,YAAa,CAC3C,IAAMyB,EAAWnqC,KAAKyoC,OAAOpiC,KAAK,IAClCrG,KAAKyoC,OAAS,KACd,IAAM2B,EAAW,YAASD,GAG1BnqC,KAAK+hC,UAAUqI,KAOX,YAAAC,qBAAR,SAA6BC,GAC3BtqC,KAAK0oC,YAAc4B,EACnBtqC,KAAKyoC,OAAS,IAOR,YAAA8B,mBAAR,SAA2B/mC,GAIzB,GAHA,YAAuB,OAAhBxD,KAAKyoC,OAAiB,kCAGzBjlC,EAAKrB,QAAU,EAAG,CACpB,IAAMmoC,EAAa7mC,OAAOD,GAC1B,IAAKgnC,MAAMF,GAET,OADAtqC,KAAKqqC,qBAAqBC,GACnB,KAIX,OADAtqC,KAAKqqC,qBAAqB,GACnB7mC,GAOT,YAAAkmC,oBAAA,SAAoBe,GAClB,GAAoB,OAAhBzqC,KAAKqpC,OAAT,CAGA,IAAM7lC,EAAOinC,EAAI,KAMjB,GALAzqC,KAAKyhC,eAAiBj+B,EAAKrB,OAC3BnC,KAAK4hC,OAAOlF,iBAAiB,iBAAkBl5B,EAAKrB,QAEpDnC,KAAK0qC,iBAEe,OAAhB1qC,KAAKyoC,OAEPzoC,KAAKkqC,aAAa1mC,OACb,CAEL,IAAMmnC,EAAgB3qC,KAAKuqC,mBAAmB/mC,GACxB,OAAlBmnC,GACF3qC,KAAKkqC,aAAaS,MASxB,YAAA7F,KAAA,SAAKthC,GACHxD,KAAK0qC,iBAEL,IAAM3F,EAAU,YAAUvhC,GAC1BxD,KAAKwhC,WAAauD,EAAQ5iC,OAC1BnC,KAAK4hC,OAAOlF,iBAAiB,aAAcqI,EAAQ5iC,QAKnD,IAAM4C,EAAWH,EAAkBmgC,EAlTN,OAqTzBhgC,EAAS5C,OAAS,GACpBnC,KAAK4qC,YAAYriC,OAAOxD,EAAS5C,SAInC,IAAK,IAAIF,EAAI,EAAGA,EAAI8C,EAAS5C,OAAQF,IACnCjC,KAAK4qC,YAAY7lC,EAAS9C,KAItB,YAAAyiC,UAAR,WACE1kC,KAAKqiC,WAAY,EACbriC,KAAKwoC,iBACPqC,cAAc7qC,KAAKwoC,gBACnBxoC,KAAKwoC,eAAiB,MAGpBxoC,KAAKqpC,SACPrpC,KAAKqpC,OAAO1E,QACZ3kC,KAAKqpC,OAAS,OAIV,YAAA9G,UAAR,WACOviC,KAAKqiC,YACRriC,KAAK2hC,KAAK,+BACV3hC,KAAK0kC,YAGD1kC,KAAKgiC,eACPhiC,KAAKgiC,aAAahiC,KAAK0hC,gBACvB1hC,KAAKgiC,aAAe,QAS1B,YAAA2C,MAAA,WACO3kC,KAAKqiC,YACRriC,KAAK2hC,KAAK,6BACV3hC,KAAK0kC,cAQT,YAAAgG,eAAA,sBACEG,cAAc7qC,KAAKwoC,gBACnBxoC,KAAKwoC,eAAiBsC,aAAY,WAE5B,EAAKzB,QACP,EAAKuB,YAAY,KAEnB,EAAKF,mBAEJ9kC,KAAKI,MAhXyB,QAwX3B,YAAA4kC,YAAR,SAAoBnpC,GAIlB,IACEzB,KAAKqpC,OAAOvE,KAAKrjC,GACjB,MAAOR,GACPjB,KAAK2hC,KACH,0CACA1gC,EAAEe,SAAWf,EAAEuC,KACf,uBAEF0D,WAAWlH,KAAKuiC,UAAUv/B,KAAKhD,MAAO,KAzLnC,EAAA+qC,6BAA+B,EAK/B,EAAAC,eAAiB,IAuL1B,EAvXA,GC1BA,cAUE,WAAYn/B,GACV7L,KAAKirC,gBAAgBp/B,GAoDzB,OA5DE,sBAAW,mBAAc,C,IAAzB,WACE,MAAO,CAACm4B,GAAuB2E,K,gCAUzB,YAAAsC,gBAAR,SAAwBp/B,G,QAChBq/B,EACJvC,IAAuBA,GAAmB,cACxCwC,EACFD,IAA0BvC,GAAoBsB,mBAYhD,GAVIp+B,EAASf,gBACNogC,GACH5nC,EACE,mFAIJ6nC,GAAuB,GAGrBA,EACFnrC,KAAKorC,YAAc,CAACzC,QACf,CACL,IAAM0C,EAAcrrC,KAAKorC,YAAc,G,IACvC,IAAwB,kBAAAE,EAAiBC,gBAAc,8BAAE,CAApD,IAAMC,EAAS,QACdA,GAAaA,EAAS,eACxBH,EAAW3mC,KAAK8mC,I,oGASxB,YAAAC,iBAAA,WACE,GAAIzrC,KAAKorC,YAAYjpC,OAAS,EAC5B,OAAOnC,KAAKorC,YAAY,GAExB,MAAM,IAAI/nC,MAAM,4BAOpB,YAAAqoC,iBAAA,WACE,OAAI1rC,KAAKorC,YAAYjpC,OAAS,EACrBnC,KAAKorC,YAAY,GAEjB,MAGb,EA/DA,GCoCA,cA2BE,WACS7pC,EACCoqC,EACAC,EACApL,EACAqL,EACA3J,EACA4J,EACDvK,GAPA,KAAAhgC,KACC,KAAAoqC,YACA,KAAAC,iBACA,KAAApL,aACA,KAAAqL,WACA,KAAA3J,gBACA,KAAA4J,UACD,KAAAvK,gBAlCT,KAAAwK,gBAAkB,EAClB,KAAAC,oBAAiC,GAWzB,KAAAC,OAAM,EAwBZjsC,KAAK2hC,KAAO1+B,EAAW,KAAOjD,KAAKuB,GAAK,KACxCvB,KAAKksC,kBAAoB,IAAIZ,GAAiBK,GAC9C3rC,KAAK2hC,KAAK,sBACV3hC,KAAKmsC,SAqcT,OA/bU,YAAAA,OAAR,sBACQC,EAAOpsC,KAAKksC,kBAAkBT,mBACpCzrC,KAAKqsC,MAAQ,IAAID,EACfpsC,KAAKssC,mBACLtsC,KAAK2rC,UACL3rC,KAAK4rC,oBACLl9B,EACA1O,KAAKuhC,eAKPvhC,KAAKusC,0BAA4BH,EAAI,8BAAoC,EAEzE,IAAMI,EAAoBxsC,KAAKysC,cAAczsC,KAAKqsC,OAC5CK,EAAmB1sC,KAAK2sC,iBAAiB3sC,KAAKqsC,OACpDrsC,KAAK4sC,IAAM5sC,KAAKqsC,MAChBrsC,KAAK6sC,IAAM7sC,KAAKqsC,MAChBrsC,KAAK8sC,eAAiB,KACtB9sC,KAAK+sC,YAAa,EAQlB7lC,YAAW,WAET,EAAKmlC,OAAS,EAAKA,MAAMvK,KAAK0K,EAAmBE,KAChD9mC,KAAKI,MAAM,IAEd,IAAMgnC,EAAmBZ,EAAI,gBAAsB,EAC/CY,EAAmB,IACrBhtC,KAAKitC,gBAAkB7lC,GAAsB,WAC3C,EAAK6lC,gBAAkB,KAClB,EAAKF,aAEN,EAAKV,OACL,EAAKA,MAAM5K,cA7GiB,QA+G5B,EAAKE,KACH,wDACE,EAAK0K,MAAM5K,cACX,wCAEJ,EAAKsL,YAAa,EAClB,EAAKV,MAAM5H,yBAEX,EAAK4H,OACL,EAAKA,MAAM7K,UAzHa,MA2HxB,EAAKG,KACH,oDACE,EAAK0K,MAAM7K,UACX,uCAKJ,EAAKG,KAAK,+CACV,EAAKgD,YAIR/+B,KAAKI,MAAMgnC,MAIV,YAAAV,iBAAR,WACE,MAAO,KAAOtsC,KAAKuB,GAAK,IAAMvB,KAAK+rC,mBAG7B,YAAAY,iBAAR,SAAyBP,GAAzB,WACE,OAAO,SAAAc,GACDd,IAAS,EAAKC,MAChB,EAAKc,kBAAkBD,GACdd,IAAS,EAAKU,gBACvB,EAAKnL,KAAK,8BACV,EAAKyL,8BAEL,EAAKzL,KAAK,+BAKR,YAAA8K,cAAR,SAAsBL,GAAtB,WACE,OAAO,SAACpqC,GACS,IAAX,EAAKiqC,SACHG,IAAS,EAAKS,IAChB,EAAKQ,0BAA0BrrC,GACtBoqC,IAAS,EAAKU,eACvB,EAAKQ,4BAA4BtrC,GAEjC,EAAK2/B,KAAK,gCASlB,YAAA4L,YAAA,SAAYC,GAEV,IAAMC,EAAM,CAAEC,EAAG,IAAK7G,EAAG2G,GACzBxtC,KAAK2tC,UAAUF,IAGjB,YAAAG,qBAAA,WACM5tC,KAAK4sC,MAAQ5sC,KAAK8sC,gBAAkB9sC,KAAK6sC,MAAQ7sC,KAAK8sC,iBACxD9sC,KAAK2hC,KACH,2CAA6C3hC,KAAK8sC,eAAe1L,QAEnEphC,KAAKqsC,MAAQrsC,KAAK8sC,eAClB9sC,KAAK8sC,eAAiB,OAKlB,YAAAe,oBAAR,SAA4BC,GAC1B,GAvLiB,MAuLGA,EAAa,CAC/B,IAAMC,EAAMD,EAAW,EAlLV,MAmLTC,EACF/tC,KAAKguC,6BAvLS,MAwLLD,GAET/tC,KAAK2hC,KAAK,wCACV3hC,KAAK8sC,eAAenI,QAGlB3kC,KAAK4sC,MAAQ5sC,KAAK8sC,gBAClB9sC,KAAK6sC,MAAQ7sC,KAAK8sC,gBAElB9sC,KAAK2kC,SA/LM,MAiMJoJ,IACT/tC,KAAK2hC,KAAK,0BACV3hC,KAAKiuC,8BACLjuC,KAAKguC,gCAKH,YAAAV,4BAAR,SAAoCY,GAClC,IAAMC,EAAgB9pC,EAAW,IAAK6pC,GAChC1qC,EAAgBa,EAAW,IAAK6pC,GACtC,GAAc,MAAVC,EACFnuC,KAAK6tC,oBAAoBrqC,OACpB,IAAc,MAAV2qC,EAIT,MAAM,IAAI9qC,MAAM,2BAA6B8qC,GAF7CnuC,KAAKgsC,oBAAoBtnC,KAAKlB,KAM1B,YAAAwqC,2BAAR,WACMhuC,KAAKiuC,6BAA+B,GACtCjuC,KAAK2hC,KAAK,oCACV3hC,KAAK+sC,YAAa,EAClB/sC,KAAK8sC,eAAerI,wBACpBzkC,KAAKouC,wBAGLpuC,KAAK2hC,KAAK,8BACV3hC,KAAK8sC,eAAehI,KAAK,CAAE4I,EAAG,IAAK7G,EAAG,CAAE6G,EA5NjC,IA4N0C7G,EAAG,QAIhD,YAAAuH,oBAAR,WAEEpuC,KAAK8sC,eAAelJ,QAEpB5jC,KAAK2hC,KAAK,mCACV3hC,KAAK8sC,eAAehI,KAAK,CAAE4I,EAAG,IAAK7G,EAAG,CAAE6G,EAvOzB,IAuOwC7G,EAAG,MAI1D7mC,KAAK2hC,KAAK,kCACV3hC,KAAKqsC,MAAMvH,KAAK,CAAE4I,EAAG,IAAK7G,EAAG,CAAE6G,EA3OV,IA2O+B7G,EAAG,MACvD7mC,KAAK4sC,IAAM5sC,KAAK8sC,eAEhB9sC,KAAK4tC,wBAGC,YAAAP,0BAAR,SAAkCa,GAEhC,IAAMC,EAAgB9pC,EAAW,IAAK6pC,GAChC1qC,EAAgBa,EAAW,IAAK6pC,GACxB,MAAVC,EACFnuC,KAAKquC,WAAW7qC,GACG,MAAV2qC,GACTnuC,KAAKsuC,eAAe9qC,IAIhB,YAAA8qC,eAAR,SAAuBtsC,GACrBhC,KAAKuuC,qBAGLvuC,KAAKwgC,WAAWx+B,IAGV,YAAAusC,mBAAR,WACOvuC,KAAK+sC,aACR/sC,KAAKusC,4BACDvsC,KAAKusC,2BAA6B,IACpCvsC,KAAK2hC,KAAK,kCACV3hC,KAAK+sC,YAAa,EAClB/sC,KAAKqsC,MAAM5H,2BAKT,YAAA4J,WAAR,SAAmBP,GACjB,IAAMC,EAAc1pC,EAtRH,IAsR4BypC,GAC7C,GAtRiB,MAsRGA,EAAa,CAC/B,IAAMU,EAAUV,EAAW,EAC3B,GA/Qe,MA+QXC,EACF/tC,KAAKyuC,aACHD,QAOG,GA3RY,MA2RRT,EAA0B,CACnC/tC,KAAK2hC,KAAK,qCACV3hC,KAAK6sC,IAAM7sC,KAAK8sC,eAChB,IAAK,IAAI7qC,EAAI,EAAGA,EAAIjC,KAAKgsC,oBAAoB7pC,SAAUF,EACrDjC,KAAKsuC,eAAetuC,KAAKgsC,oBAAoB/pC,IAE/CjC,KAAKgsC,oBAAsB,GAC3BhsC,KAAK4tC,2BAvSY,MAwSRG,EAGT/tC,KAAK0uC,sBAAsBF,GA1Sb,MA2SLT,EAET/tC,KAAK2uC,SAASH,GA5SA,MA6SLT,EACT5qC,EAAM,iBAAmBqrC,GA7SZ,MA8SJT,GACT/tC,KAAK2hC,KAAK,wBACV3hC,KAAKuuC,qBACLvuC,KAAK4uC,iCAELzrC,EAAM,mCAAqC4qC,KAQzC,YAAAU,aAAR,SAAqBI,GAMnB,IAAMC,EAAYD,EAAU5H,GACtBmB,EAAUyG,EAAUvpC,EACpBqF,EAAOkkC,EAAUE,EACvB/uC,KAAKgvC,UAAYH,EAAUtpC,EAC3BvF,KAAK2rC,UAAUhhC,KAAOA,EAEP,IAAX3K,KAAKisC,SACPjsC,KAAKqsC,MAAMzI,QACX5jC,KAAKivC,yBAAyBjvC,KAAKqsC,MAAOyC,GACtCvkC,KAAqB69B,GACvB9kC,EAAK,sCAGPtD,KAAKkvC,qBAID,YAAAA,iBAAR,WACE,IAAM9C,EAAOpsC,KAAKksC,kBAAkBR,mBAChCU,GACFpsC,KAAKmvC,cAAc/C,IAIf,YAAA+C,cAAR,SAAsB/C,GAAtB,WACEpsC,KAAK8sC,eAAiB,IAAIV,EACxBpsC,KAAKssC,mBACLtsC,KAAK2rC,UACL3rC,KAAK4rC,eACL5rC,KAAKgvC,WAIPhvC,KAAKiuC,4BACH7B,EAAI,8BAAoC,EAE1C,IAAMrK,EAAY/hC,KAAKysC,cAAczsC,KAAK8sC,gBACpC9K,EAAehiC,KAAK2sC,iBAAiB3sC,KAAK8sC,gBAChD9sC,KAAK8sC,eAAehL,KAAKC,EAAWC,GAGpC56B,GAAsB,WAChB,EAAK0lC,iBACP,EAAKnL,KAAK,gCACV,EAAKmL,eAAenI,WAErB/+B,KAAKI,MAtYY,OAyYd,YAAA2oC,SAAR,SAAiBhkC,GACf3K,KAAK2hC,KAAK,qCAAuCh3B,GACjD3K,KAAK2rC,UAAUhhC,KAAOA,EAGP,IAAX3K,KAAKisC,OACPjsC,KAAK2kC,SAGL3kC,KAAKovC,oBACLpvC,KAAKmsC,WAID,YAAA8C,yBAAR,SAAiC7C,EAAiB0C,GAAlD,WACE9uC,KAAK2hC,KAAK,oCACV3hC,KAAKqsC,MAAQD,EACbpsC,KAAKisC,OAAM,EAEPjsC,KAAK6rC,WACP7rC,KAAK6rC,SAASiD,EAAW9uC,KAAKgvC,WAC9BhvC,KAAK6rC,SAAW,MAKqB,IAAnC7rC,KAAKusC,2BACPvsC,KAAK2hC,KAAK,kCACV3hC,KAAK+sC,YAAa,GAElB3lC,GAAsB,WACpB,EAAKwnC,kCACJhpC,KAAKI,MAra8B,OAyalC,YAAA4oC,8BAAR,WAEO5uC,KAAK+sC,YAAyB,IAAX/sC,KAAKisC,SAC3BjsC,KAAK2hC,KAAK,4BACV3hC,KAAK2tC,UAAU,CAAED,EAAG,IAAK7G,EAAG,CAAE6G,EAvZvB,IAuZgC7G,EAAG,QAItC,YAAAuG,2BAAR,WACE,IAAMhB,EAAOpsC,KAAK8sC,eAClB9sC,KAAK8sC,eAAiB,KAClB9sC,KAAK4sC,MAAQR,GAAQpsC,KAAK6sC,MAAQT,GAEpCpsC,KAAK2kC,SAQD,YAAAwI,kBAAR,SAA0BD,GACxBltC,KAAKqsC,MAAQ,KAIRa,GAA4B,IAAXltC,KAAKisC,OAQL,IAAXjsC,KAAKisC,QACdjsC,KAAK2hC,KAAK,8BARV3hC,KAAK2hC,KAAK,+BAEN3hC,KAAK2rC,UAAUrgC,oBACjBnK,EAAkBZ,OAAO,QAAUP,KAAK2rC,UAAUhhC,MAElD3K,KAAK2rC,UAAUtgC,aAAerL,KAAK2rC,UAAUhhC,OAMjD3K,KAAK2kC,SAGC,YAAA+J,sBAAR,SAA8BtU,GAC5Bp6B,KAAK2hC,KAAK,0DAEN3hC,KAAK8rC,UACP9rC,KAAK8rC,QAAQ1R,GACbp6B,KAAK8rC,QAAU,MAKjB9rC,KAAKkiC,cAAgB,KAErBliC,KAAK2kC,SAGC,YAAAgJ,UAAR,SAAkBnqC,GAChB,GAAe,IAAXxD,KAAKisC,OACP,KAAM,8BAENjsC,KAAK4sC,IAAI9H,KAAKthC,IAOlB,YAAAmhC,MAAA,WACiB,IAAX3kC,KAAKisC,SACPjsC,KAAK2hC,KAAK,gCACV3hC,KAAKisC,OAAM,EAEXjsC,KAAKovC,oBAEDpvC,KAAKkiC,gBACPliC,KAAKkiC,gBACLliC,KAAKkiC,cAAgB,QAKnB,YAAAkN,kBAAR,WACEpvC,KAAK2hC,KAAK,iCACN3hC,KAAKqsC,QACPrsC,KAAKqsC,MAAM1H,QACX3kC,KAAKqsC,MAAQ,MAGXrsC,KAAK8sC,iBACP9sC,KAAK8sC,eAAenI,QACpB3kC,KAAK8sC,eAAiB,MAGpB9sC,KAAKitC,kBACP9J,aAAanjC,KAAKitC,iBAClBjtC,KAAKitC,gBAAkB,OAG7B,EA7eA,GCzCA,4BAwDA,OAtCE,YAAAoC,IAAA,SACExnC,EACArE,EACAg0B,EACAplB,KAGF,YAAA+T,MAAA,SACEte,EACArE,EACAg0B,EACAplB,KAOF,YAAAk9B,iBAAA,SAAiBC,KAEjB,YAAAC,gBAAA,SACE3nC,EACArE,EACAg0B,KAGF,YAAAiY,kBAAA,SACE5nC,EACArE,EACAg0B,KAGF,YAAAkY,mBAAA,SACE7nC,EACA2vB,KAGF,YAAAsG,YAAA,SAAYH,KACd,EAxDA,GCmBMgS,GAAsB,IA6C5B,eAuDE,WACUhE,EACAC,EACAgE,EAMAC,EACAC,EACAC,EACAC,GAZV,MAcE,cAAO,KAEP,GAfQ,EAAArE,YACA,EAAAC,iBACA,EAAAgE,gBAMA,EAAAC,mBACA,EAAAC,sBACA,EAAAC,qBACA,EAAAC,gBAjEV,EAAAzuC,GAAK0uC,EAAqBC,8BAClB,EAAAvO,KAAO1+B,EAAW,KAAO,EAAK1B,GAAK,KAEnC,EAAA4uC,kBAAmD,GAE1C,EAAAC,QAGb,IAAI5tB,IACA,EAAA6tB,iBAAqC,GACrC,EAAAC,iBAAqC,GACrC,EAAAC,qBAAuB,EACvB,EAAAC,qBAAuB,EACvB,EAAAC,0BAAmD,GACnD,EAAAC,YAAa,EACb,EAAAC,gBAAkBhB,GAClB,EAAAiB,mBA9D0B,IA+D1B,EAAAC,uBAAuD,KAC/D,EAAAtP,cAA+B,KAEvB,EAAAuP,0BAA2C,KAE3C,EAAA7Q,UAAoB,EAGpB,EAAA8Q,eAAwD,GACxD,EAAAC,eAAiB,EAEjB,EAAAC,UAGG,KAEH,EAAAC,WAA4B,KAC5B,EAAAC,oBAAqB,EACrB,EAAAC,uBAAyB,EAEzB,EAAAC,kBAAmB,EACnB,EAAAC,2BAA4C,KAC5C,EAAAC,+BAAgD,KA8BlDvB,IAAkB,cACpB,MAAM,IAAI3sC,MACR,kF,OAGJ,EAAKmuC,iBAAiB,GAEtBrR,GAAkBD,cAAcX,GAAG,UAAW,EAAKkS,WAAY,IAEpB,IAAvC9F,EAAUhhC,KAAKS,QAAQ,YACzBk1B,GAAcJ,cAAcX,GAAG,SAAU,EAAKmS,UAAW,G,EA23B/D,OA58B0C,iBAqF9B,YAAAnE,YAAV,SACEt7B,EACAwwB,EACAkP,GAEA,IAAMC,IAAc5xC,KAAKgxC,eAEnBvD,EAAM,CAAE5T,EAAG+X,EAAW7tC,EAAGkO,EAAQjO,EAAGy+B,GAC1CziC,KAAK2hC,KAAK,YAAU8L,IACpB,YACEztC,KAAK0wC,WACL,0DAEF1wC,KAAKixC,UAAU1D,YAAYE,GACvBkE,IACF3xC,KAAK+wC,eAAea,GAAaD,IAIrC,YAAAvxC,IAAA,SAAIuL,GAAJ,WACQkmC,EAAW,IAAI,IACfC,EAAU,CACdC,EAAGpmC,EAAM1D,KAAKxH,WACduxC,EAAGrmC,EAAMsmC,eAELC,EAAiB,CACrBjgC,OAAQ,IACR6/B,QAAO,EACPta,WAAY,SAACx1B,GACX,IAAMwsC,EAAUxsC,EAAO,EACF,OAAjBA,EAAO,GACT,EAAK4tC,cACHkC,EAAO,EACPtD,GACY,EACJ,MAEVqD,EAASM,QAAQ3D,IAEjBqD,EAASO,OAAO5D,KAItBxuC,KAAKswC,iBAAiB5rC,KAAKwtC,GAC3BlyC,KAAKwwC,uBACL,IAAMx+B,EAAQhS,KAAKswC,iBAAiBnuC,OAAS,EAsB7C,OApBKnC,KAAK0wC,YACRxpC,YAAW,WACT,IAAM9G,EAAM,EAAKkwC,iBAAiBt+B,QACtBtD,IAARtO,GAAqB8xC,IAAmB9xC,WAGrC,EAAKkwC,iBAAiBt+B,GAC7B,EAAKw+B,uBAC6B,IAA9B,EAAKA,uBACP,EAAKF,iBAAmB,IAE1B,EAAK3O,KAAK,OAAS3vB,EAAQ,4BAC3B6/B,EAASO,OAAO,IAAI/uC,MAAM,0BA3LN,KA+LpBrD,KAAK0wC,YACP1wC,KAAKqyC,SAASrgC,GAGT6/B,EAASS,SAMlB,YAAAC,OAAA,SACE5mC,EACA6mC,EACA9Z,EACAlB,GAEA,IAAMxa,EAAUrR,EAAMmoB,kBAChBjsB,EAAa8D,EAAM1D,KAAKxH,WAC9BT,KAAK2hC,KAAK,qBAAuB95B,EAAa,IAAMmV,GAC/Chd,KAAKowC,QAAQlc,IAAIrsB,IACpB7H,KAAKowC,QAAQvwC,IAAIgI,EAAY,IAAI2a,KAEnC,YACE7W,EAAM8f,iBAAiBkF,cACpBhlB,EAAM8f,iBAAiBiF,eAC1B,sDAEF,aACG1wB,KAAKowC,QAAQhwC,IAAIyH,GAAaqsB,IAAIlX,GACnC,gDAEF,IAAMy1B,EAAyB,CAC7Bjb,WAAU,EACVD,OAAQib,EACR7mC,MAAK,EACL+sB,IAAG,GAEL14B,KAAKowC,QAAQhwC,IAAIyH,GAAahI,IAAImd,EAASy1B,GAEvCzyC,KAAK0wC,YACP1wC,KAAK0yC,YAAYD,IAIb,YAAAJ,SAAR,SAAiBrgC,GAAjB,WACQ5R,EAAMJ,KAAKswC,iBAAiBt+B,GAClChS,KAAKutC,YAAY,IAAKntC,EAAI0xC,SAAS,SAAC9vC,UAC3B,EAAKsuC,iBAAiBt+B,GAC7B,EAAKw+B,uBAC6B,IAA9B,EAAKA,uBACP,EAAKF,iBAAmB,IAEtBlwC,EAAIo3B,YACNp3B,EAAIo3B,WAAWx1B,OAKb,YAAA0wC,YAAR,SAAoBD,GAApB,WACQ9mC,EAAQ8mC,EAAW9mC,MACnB9D,EAAa8D,EAAM1D,KAAKxH,WACxBuc,EAAUrR,EAAMmoB,kBACtB9zB,KAAK2hC,KAAK,aAAe95B,EAAa,QAAUmV,GAChD,IAAM21B,EAAgC,CAAWZ,EAAGlqC,GAKhD4qC,EAAW/Z,MACbia,EAAG,EAAQhnC,EAAMsmC,cACjBU,EAAG,EAAQF,EAAW/Z,KAGxBia,EAAG,EAAiBF,EAAWlb,SAE/Bv3B,KAAKutC,YAVU,IAUUoF,GAAK,SAAC3wC,GAC7B,IAAMwsC,EAAmBxsC,EAAO,EAC1B23B,EAAS33B,EAAO,EAGtBiuC,EAAqB2C,sBAAsBpE,EAAS7iC,IAGlD,EAAKykC,QAAQhwC,IAAIyH,IACjB,EAAKuoC,QAAQhwC,IAAIyH,GAAazH,IAAI4c,MAEVy1B,IACxB,EAAK9Q,KAAK,kBAAmB3/B,GAEd,OAAX23B,GACF,EAAKkZ,cAAchrC,EAAYmV,GAG7By1B,EAAWjb,YACbib,EAAWjb,WAAWmC,EAAQ6U,QAMvB,EAAAoE,sBAAf,SAAqCpE,EAAkB7iC,GACrD,GAAI6iC,GAA8B,kBAAZA,GAAwB,YAASA,EAAS,KAAM,CAEpE,IAAMsE,EAAW,YAAQtE,EAAgB,KACzC,GAAInsC,MAAMC,QAAQwwC,KAAcA,EAAS1nC,QAAQ,YAAa,CAC5D,IAAM2nC,EACJ,gBAAkBpnC,EAAM8f,iBAAiBnJ,WAAW7hB,WAAa,IAC7DuyC,EAAYrnC,EAAM1D,KAAKxH,WAC7B6C,EACE,wGAC6CyvC,EAAS,OACjDC,EAAS,sDAStB,YAAA1D,iBAAA,SAAiBC,GACfvvC,KAAKkxC,WAAa3B,EAClBvvC,KAAK2hC,KAAK,wBACN3hC,KAAKkxC,WACPlxC,KAAKizC,UAIDjzC,KAAK0wC,YACP1wC,KAAKutC,YAAY,SAAU,IAAI,eAInCvtC,KAAKkzC,uCAAuC3D,IAGtC,YAAA2D,uCAAR,SAA+CC,IAGpBA,GAAoC,KAAtBA,EAAWhxC,QAC1B,YAAQgxC,MAC9BnzC,KAAK2hC,KACH,iEAEF3hC,KAAK4wC,mBA9U4B,MAsVrC,YAAAqC,QAAA,sBACE,GAAIjzC,KAAK0wC,YAAc1wC,KAAKkxC,WAAY,CACtC,IAAM,EAAQlxC,KAAKkxC,WACbkC,EAAa,YAAc,GAAS,OAAS,QAC7CC,EAAwC,CAAEC,KAAM,GAC3B,OAAvBtzC,KAAKgwC,cACPqD,EAAW,QAAa,EACe,kBAAvBrzC,KAAKgwC,gBACrBqD,EAAW,QAAcrzC,KAAKgwC,eAEhChwC,KAAKutC,YACH6F,EACAC,GACA,SAACE,GACC,IAAM5Z,EAAS4Z,EAAG,EACZ/vC,EAAQ+vC,EAAG,GAA6B,QAE1C,EAAKrC,aAAe,IACP,OAAXvX,EACF,EAAKyX,uBAAyB,EAG9B,EAAKoC,eAAe7Z,EAAQn2B,SAWxC,YAAAiwC,SAAA,SAAS9nC,EAAc+sB,GACrB,IAAM7wB,EAAa8D,EAAM1D,KAAKxH,WACxBuc,EAAUrR,EAAMmoB,kBAEtB9zB,KAAK2hC,KAAK,uBAAyB95B,EAAa,IAAMmV,GAEtD,YACErR,EAAM8f,iBAAiBkF,cACpBhlB,EAAM8f,iBAAiBiF,eAC1B,wDAEa1wB,KAAK6yC,cAAchrC,EAAYmV,IAChChd,KAAK0wC,YACjB1wC,KAAK0zC,cAAc7rC,EAAYmV,EAASrR,EAAMsmC,cAAevZ,IAIzD,YAAAgb,cAAR,SACE7rC,EACAmV,EACA22B,EACAjb,GAEA14B,KAAK2hC,KAAK,eAAiB95B,EAAa,QAAUmV,GAElD,IAAM21B,EAAgC,CAAWZ,EAAGlqC,GAGhD6wB,IACFia,EAAG,EAAQgB,EACXhB,EAAG,EAAQja,GAGb14B,KAAKutC,YAPU,IAOUoF,IAM3B,YAAAnD,gBAAA,SACE3nC,EACArE,EACAg0B,GAEIx3B,KAAK0wC,WACP1wC,KAAK4zC,kBAAkB,IAAK/rC,EAAYrE,EAAMg0B,GAE9Cx3B,KAAKywC,0BAA0B/rC,KAAK,CAClCmD,WAAU,EACVoK,OAAQ,IACRzO,KAAI,EACJg0B,WAAU,KAQhB,YAAAiY,kBAAA,SACE5nC,EACArE,EACAg0B,GAEIx3B,KAAK0wC,WACP1wC,KAAK4zC,kBAAkB,KAAM/rC,EAAYrE,EAAMg0B,GAE/Cx3B,KAAKywC,0BAA0B/rC,KAAK,CAClCmD,WAAU,EACVoK,OAAQ,KACRzO,KAAI,EACJg0B,WAAU,KAQhB,YAAAkY,mBAAA,SACE7nC,EACA2vB,GAEIx3B,KAAK0wC,WACP1wC,KAAK4zC,kBAAkB,KAAM/rC,EAAY,KAAM2vB,GAE/Cx3B,KAAKywC,0BAA0B/rC,KAAK,CAClCmD,WAAU,EACVoK,OAAQ,KACRzO,KAAM,KACNg0B,WAAU,KAKR,YAAAoc,kBAAR,SACE3hC,EACApK,EACArE,EACAg0B,GAEA,IAAMsa,EAAU,CAAWC,EAAGlqC,EAAqBg/B,EAAGrjC,GACtDxD,KAAK2hC,KAAK,gBAAkB1vB,EAAQ6/B,GACpC9xC,KAAKutC,YAAYt7B,EAAQ6/B,GAAS,SAAC+B,GAC7Brc,GACFtwB,YAAW,WACTswB,EACEqc,EAAQ,EACRA,EAAQ,KAETjuC,KAAKI,MAAM,QAQpB,YAAAqpC,IAAA,SACExnC,EACArE,EACAg0B,EACAplB,GAEApS,KAAK8zC,YAAY,IAAKjsC,EAAYrE,EAAMg0B,EAAYplB,IAMtD,YAAA+T,MAAA,SACEte,EACArE,EACAg0B,EACAplB,GAEApS,KAAK8zC,YAAY,IAAKjsC,EAAYrE,EAAMg0B,EAAYplB,IAGtD,YAAA0hC,YAAA,SACE7hC,EACApK,EACArE,EACAg0B,EACAplB,GAEA,IAAM0/B,EAAoC,CAC/BC,EAAGlqC,EACHg/B,EAAGrjC,QAGDkL,IAAT0D,IACF0/B,EAAO,EAAiB1/B,GAI1BpS,KAAKqwC,iBAAiB3rC,KAAK,CACzBuN,OAAM,EACN6/B,QAAO,EACPta,WAAU,IAGZx3B,KAAKuwC,uBACL,IAAMv+B,EAAQhS,KAAKqwC,iBAAiBluC,OAAS,EAEzCnC,KAAK0wC,WACP1wC,KAAK+zC,SAAS/hC,GAEdhS,KAAK2hC,KAAK,kBAAoB95B,IAI1B,YAAAksC,SAAR,SAAiB/hC,GAAjB,WACQC,EAASjS,KAAKqwC,iBAAiBr+B,GAAOC,OACtC6/B,EAAU9xC,KAAKqwC,iBAAiBr+B,GAAO8/B,QACvCta,EAAax3B,KAAKqwC,iBAAiBr+B,GAAOwlB,WAChDx3B,KAAKqwC,iBAAiBr+B,GAAOgiC,OAASh0C,KAAK0wC,WAE3C1wC,KAAKutC,YAAYt7B,EAAQ6/B,GAAS,SAAC9vC,GACjC,EAAK2/B,KAAK1vB,EAAS,YAAajQ,UAEzB,EAAKquC,iBAAiBr+B,GAC7B,EAAKu+B,uBAG6B,IAA9B,EAAKA,uBACP,EAAKF,iBAAmB,IAGtB7Y,GACFA,EACEx1B,EAAO,EACPA,EAAO,OASf,YAAA87B,YAAA,SAAYH,GAAZ,WAEE,GAAI39B,KAAK0wC,WAAY,CACnB,IAAMoB,EAAU,CAAe9sC,EAAG24B,GAClC39B,KAAK2hC,KAAK,cAAemQ,GAEzB9xC,KAAKutC,YAAsB,IAAKuE,GAAS,SAAAt+B,GAEvC,GAAe,OADAA,EAAM,EACA,CACnB,IAAMygC,EAAczgC,EAAM,EAC1B,EAAKmuB,KAAK,cAAe,wBAA0BsS,SAMnD,YAAA3F,eAAR,SAAuBtsC,GACrB,GAAI,MAAOA,EAAS,CAElBhC,KAAK2hC,KAAK,gBAAkB,YAAU3/B,IACtC,IAAMkyC,EAASlyC,EAAO,EAChB2vC,EAAa3xC,KAAK+wC,eAAemD,GACnCvC,WACK3xC,KAAK+wC,eAAemD,GAC3BvC,EAAW3vC,EAAO,QAEf,IAAI,UAAWA,EACpB,KAAM,qCAAuCA,EAAO,MAC3C,MAAOA,GAEhBhC,KAAKm0C,YAAYnyC,EAAO,EAAiBA,EAAO,KAI5C,YAAAmyC,YAAR,SAAoBliC,EAAgBwwB,GAClCziC,KAAK2hC,KAAK,sBAAuB1vB,EAAQwwB,GAC1B,MAAXxwB,EACFjS,KAAK4vC,cACHnN,EAAI,EACJA,EAAI,GACQ,EACZA,EAAI,GAEc,MAAXxwB,EACTjS,KAAK4vC,cACHnN,EAAI,EACJA,EAAI,GACS,EACbA,EAAI,GAEc,MAAXxwB,EACTjS,KAAKo0C,iBACH3R,EAAI,EACJA,EAAI,GAEc,OAAXxwB,EACTjS,KAAKwzC,eACH/Q,EAAI,EACJA,EAAI,GAEc,OAAXxwB,EACTjS,KAAKq0C,uBAAuB5R,GAE5Bt/B,EACE,6CACE,YAAU8O,GACV,uCAKA,YAAA45B,SAAR,SAAiBiD,EAAmBE,GAClChvC,KAAK2hC,KAAK,oBACV3hC,KAAK0wC,YAAa,EAClB1wC,KAAKuxC,gCAAiC,IAAI+C,MAAOC,UACjDv0C,KAAKw0C,iBAAiB1F,GACtB9uC,KAAKuhC,cAAgByN,EACjBhvC,KAAKqxC,kBACPrxC,KAAKy0C,oBAEPz0C,KAAK00C,gBACL10C,KAAKqxC,kBAAmB,EACxBrxC,KAAK6vC,kBAAiB,IAGhB,YAAA2B,iBAAR,SAAyBlqC,GAAzB,WACE,aACGtH,KAAKixC,UACN,0DAGEjxC,KAAK8wC,2BACP3N,aAAanjC,KAAK8wC,2BAMpB9wC,KAAK8wC,0BAA4B5pC,YAAW,WAC1C,EAAK4pC,0BAA4B,KACjC,EAAK6D,yBAEJ/uC,KAAKI,MAAMsB,KAGR,YAAAmqC,WAAR,SAAmB3sB,GAGfA,IACC9kB,KAAKigC,UACNjgC,KAAK2wC,kBAAoB3wC,KAAK4wC,qBAE9B5wC,KAAK2hC,KAAK,2CACV3hC,KAAK2wC,gBAAkBhB,GAElB3vC,KAAKixC,WACRjxC,KAAKwxC,iBAAiB,IAG1BxxC,KAAKigC,SAAWnb,GAGV,YAAA4sB,UAAR,SAAkBkD,GACZA,GACF50C,KAAK2hC,KAAK,wBACV3hC,KAAK2wC,gBAAkBhB,GAClB3vC,KAAKixC,WACRjxC,KAAKwxC,iBAAiB,KAGxBxxC,KAAK2hC,KAAK,8CACN3hC,KAAKixC,WACPjxC,KAAKixC,UAAUtM,UAKb,YAAAkQ,sBAAR,WAWE,GAVA70C,KAAK2hC,KAAK,4BACV3hC,KAAK0wC,YAAa,EAClB1wC,KAAKixC,UAAY,KAGjBjxC,KAAK80C,0BAGL90C,KAAK+wC,eAAiB,GAElB/wC,KAAK+0C,mBAAoB,CAC3B,GAAK/0C,KAAKigC,UAIH,GAAIjgC,KAAKuxC,+BAAgC,EAG5C,IAAI+C,MAAOC,UAAYv0C,KAAKuxC,+BA1tBA,MA4tB5BvxC,KAAK2wC,gBAAkBhB,IAEzB3vC,KAAKuxC,+BAAiC,WAVtCvxC,KAAK2hC,KAAK,8CACV3hC,KAAK2wC,gBAAkB3wC,KAAK4wC,mBAC5B5wC,KAAKsxC,4BAA6B,IAAIgD,MAAOC,UAW/C,IAAMS,GACJ,IAAIV,MAAOC,UAAYv0C,KAAKsxC,2BAC1B2D,EAAiBrvC,KAAKuE,IACxB,EACAnK,KAAK2wC,gBAAkBqE,GAEzBC,EAAiBrvC,KAAKmnB,SAAWkoB,EAEjCj1C,KAAK2hC,KAAK,0BAA4BsT,EAAiB,MACvDj1C,KAAKwxC,iBAAiByD,GAGtBj1C,KAAK2wC,gBAAkB/qC,KAAKG,IAC1B/F,KAAK4wC,mBA/uBsB,IAgvB3B5wC,KAAK2wC,iBAGT3wC,KAAK6vC,kBAAiB,IAGhB,YAAA8E,qBAAR,sBACE,GAAI30C,KAAK+0C,mBAAoB,CAC3B/0C,KAAK2hC,KAAK,+BACV3hC,KAAKsxC,4BAA6B,IAAIgD,MAAOC,UAC7Cv0C,KAAKuxC,+BAAiC,KACtC,IAAM,EAAgBvxC,KAAKsuC,eAAetrC,KAAKhD,MACzC,EAAUA,KAAK6rC,SAAS7oC,KAAKhD,MAC7B,EAAeA,KAAK60C,sBAAsB7xC,KAAKhD,MAC/C,EAASA,KAAKuB,GAAK,IAAM0uC,EAAqBiF,oBAC9C,EAAOl1C,KACP,EAAgBA,KAAKuhC,cACvB,GAAW,EACX,EAAgC,KAC9B,EAAU,WACV,EACF,EAAWoD,SAEX,GAAW,EACX,MAWJ3kC,KAAKixC,UAAY,CACftM,MAAO,EACP4I,YAVoB,SAAUE,GAC9B,YACE,EACA,0DAEF,EAAWF,YAAYE,KAQzB,IAAM0H,EAAen1C,KAAKmxC,mBAC1BnxC,KAAKmxC,oBAAqB,EAG1BnxC,KAAK+vC,mBACFqF,SAASD,GACTE,MAAK,SAAA7hC,GACC,EAiBHzQ,EAAI,0CAhBJA,EAAI,8CACJ,EAAKmuC,WAAa19B,GAAUA,EAAO8hC,YACnC,EAAa,IAAIC,GACf,EACA,EAAK5J,UACL,EAAKC,eACL,EACA,EACA,GACc,SAAAxR,GACZ92B,EAAK82B,EAAS,KAAO,EAAKuR,UAAUlrC,WAAa,KACjD,EAAK+0C,UAzyBgB,iBA2yBvB,OAMLH,KAAK,MAAM,SAAAlyC,GACV,EAAKw+B,KAAK,wBAA0Bx+B,GAC/B,IACC,EAAKwoC,UAAU5gC,WAIjBzH,EAAKH,GAEP,UAMV,YAAAqyC,UAAA,SAAUpb,GACRr3B,EAAI,uCAAyCq3B,GAC7Cp6B,KAAKmwC,kBAAkB/V,IAAU,EAC7Bp6B,KAAKixC,UACPjxC,KAAKixC,UAAUtM,SAEX3kC,KAAK8wC,4BACP3N,aAAanjC,KAAK8wC,2BAClB9wC,KAAK8wC,0BAA4B,MAE/B9wC,KAAK0wC,YACP1wC,KAAK60C,0BAKX,YAAAY,OAAA,SAAOrb,GACLr3B,EAAI,mCAAqCq3B,UAClCp6B,KAAKmwC,kBAAkB/V,GAC1B,YAAQp6B,KAAKmwC,qBACfnwC,KAAK2wC,gBAAkBhB,GAClB3vC,KAAKixC,WACRjxC,KAAKwxC,iBAAiB,KAKpB,YAAAgD,iBAAR,SAAyB1F,GACvB,IAAMzT,EAAQyT,GAAY,IAAIwF,MAAOC,UACrCv0C,KAAK8vC,oBAAoB,CAAE4F,iBAAkBra,KAGvC,YAAAyZ,wBAAR,WACE,IAAK,IAAI7yC,EAAI,EAAGA,EAAIjC,KAAKqwC,iBAAiBluC,OAAQF,IAAK,CACrD,IAAMotC,EAAMrvC,KAAKqwC,iBAAiBpuC,GAC9BotC,GAAgB,MAAOA,EAAIyC,SAAWzC,EAAI2E,SACxC3E,EAAI7X,YACN6X,EAAI7X,WAAW,qBAGVx3B,KAAKqwC,iBAAiBpuC,GAC7BjC,KAAKuwC,wBAKyB,IAA9BvwC,KAAKuwC,uBACPvwC,KAAKqwC,iBAAmB,KAIpB,YAAA+D,iBAAR,SAAyBvsC,EAAoB8D,GAE3C,IAAIqR,EAIFA,EAHGrR,EAGOA,EAAMitB,KAAI,SAAAoZ,GAAK,OAAAztC,EAAkBytC,MAAI3rC,KAAK,KAF1C,UAIZ,IAAMksC,EAASvyC,KAAK6yC,cAAchrC,EAAYmV,GAC1Cu1B,GAAUA,EAAO/a,YACnB+a,EAAO/a,WAAW,sBAId,YAAAqb,cAAR,SAAsBhrC,EAAoBmV,GACxC,IACIu1B,EADEoD,EAAuB,IAAI5tC,EAAKF,GAAYpH,WAElD,GAAIT,KAAKowC,QAAQlc,IAAIyhB,GAAuB,CAC1C,IAAM/c,EAAM54B,KAAKowC,QAAQhwC,IAAIu1C,GAC7BpD,EAAS3Z,EAAIx4B,IAAI4c,GACjB4b,EAAIhW,OAAO5F,GACM,IAAb4b,EAAIrC,MACNv2B,KAAKowC,QAAQxtB,OAAO+yB,QAItBpD,OAAS7jC,EAEX,OAAO6jC,GAGD,YAAAiB,eAAR,SAAuBoC,EAAoBC,GACzC9yC,EAAI,uBAAyB6yC,EAAa,IAAMC,GAChD71C,KAAKkxC,WAAa,KAClBlxC,KAAKmxC,oBAAqB,EAC1BnxC,KAAKixC,UAAUtM,QACI,kBAAfiR,GAAiD,sBAAfA,IAIpC51C,KAAKoxC,yBACDpxC,KAAKoxC,wBAz5BsB,IA25B7BpxC,KAAK2wC,gBAj6B0B,IAq6B/B3wC,KAAK+vC,mBAAmB+F,2BAKtB,YAAAzB,uBAAR,SAA+B5R,GACzBziC,KAAK6wC,uBACP7wC,KAAK6wC,uBAAuBpO,GAExB,QAASA,GACXsT,QAAQhzC,IACN,aAAgB0/B,EAAI,IAAmBr1B,QAAQ,KAAM,kBAMrD,YAAAsnC,cAAR,W,YAEE10C,KAAKizC,U,IAIL,IAAsB,kBAAAjzC,KAAKowC,QAAQrtB,UAAQ,8BAAE,CAAxC,IAAM8U,EAAO,Q,IAChB,IAAyB,4BAAAA,EAAQ9U,WAAQ,8BAAE,CAAtC,IAAM0vB,EAAU,QACnBzyC,KAAK0yC,YAAYD,I,oMAIrB,IAAK,IAAIxwC,EAAI,EAAGA,EAAIjC,KAAKqwC,iBAAiBluC,OAAQF,IAC5CjC,KAAKqwC,iBAAiBpuC,IACxBjC,KAAK+zC,SAAS9xC,GAIlB,KAAOjC,KAAKywC,0BAA0BtuC,QAAQ,CAC5C,IAAM2vC,EAAU9xC,KAAKywC,0BAA0B1J,QAC/C/mC,KAAK4zC,kBACH9B,EAAQ7/B,OACR6/B,EAAQjqC,WACRiqC,EAAQtuC,KACRsuC,EAAQta,YAIZ,IAASv1B,EAAI,EAAGA,EAAIjC,KAAKswC,iBAAiBnuC,OAAQF,IAC5CjC,KAAKswC,iBAAiBruC,IACxBjC,KAAKqyC,SAASpwC,IAQZ,YAAAwyC,kBAAR,WACE,IAAM9W,EAAiC,GAEnCqY,EAAa,KACb,gBAEAA,EADEh2C,KAAK2rC,UAAU5gC,UACJ,aAEA,QAIjB4yB,EAAM,OAASqY,EAAa,IAAM9N,GAAY96B,QAAQ,MAAO,MAAQ,EAEjE,cACFuwB,EAAM,qBAAuB,EACpB,gBACTA,EAAM,yBAA2B,GAEnC39B,KAAK89B,YAAYH,IAGX,YAAAoX,iBAAR,WACE,IAAMH,EAAStU,GAAcJ,cAAcK,kBAC3C,OAAO,YAAQvgC,KAAKmwC,oBAAsByE,GA/5B7B,EAAA1E,4BAA8B,EAK9B,EAAAgF,kBAAoB,EA45BrC,EA58BA,CAA0Ce,ICpD1C,eA8BE,WACUtK,EACAiE,EAMAG,GARV,MAUE,cAAO,K,OATC,EAAApE,YACA,EAAAiE,gBAMA,EAAAG,qBAhCF,EAAApO,KAAqC1+B,EAAW,WAMhD,EAAAizC,SAAoC,G,EAyM9C,OArNwC,iBACtC,YAAApY,YAAA,SAAYH,GACV,MAAM,IAAIt6B,MAAM,4BAYX,EAAA8yC,aAAP,SAAoBxqC,EAAc+sB,GAChC,YAAYhqB,IAARgqB,EACK,OAASA,GAEhB,YACE/sB,EAAM8f,iBAAiBkF,YACvB,kDAEKhlB,EAAM1D,KAAKxH,aAsBtB,YAAA8xC,OAAA,SACE5mC,EACA6mC,EACA9Z,EACAlB,GAJF,WAMQ3vB,EAAa8D,EAAM1D,KAAKxH,WAC9BT,KAAK2hC,KACH,qBAAuB95B,EAAa,IAAM8D,EAAMmoB,mBAIlD,IAAMsiB,EAAWC,EAAmBF,aAAaxqC,EAAO+sB,GAClD4d,EAAa,GACnBt2C,KAAKk2C,SAASE,GAAYE,EAE1B,IAAMC,EAAwBjlB,GAC5B3lB,EAAM8f,kBAGRzrB,KAAKw2C,aACH3uC,EAAa,QACb0uC,GACA,SAACpzC,EAAOqQ,GACN,IAAIhQ,EAAOgQ,GAEG,MAAVrQ,IACFK,EAAO,KACPL,EAAQ,MAGI,OAAVA,GACF,EAAKysC,cAAc/nC,EAAYrE,GAAmB,EAAOk1B,GAGvD,YAAQ,EAAKwd,SAAUE,KAAcE,IAUvC9e,EARKr0B,EAEgB,MAAVA,EACA,oBAEA,cAAgBA,EAJhB,KAOQ,UAO3B,YAAAswC,SAAA,SAAS9nC,EAAc+sB,GACrB,IAAM0d,EAAWC,EAAmBF,aAAaxqC,EAAO+sB,UACjD14B,KAAKk2C,SAASE,IAGvB,YAAAh2C,IAAA,SAAIuL,GAAJ,WACQ4qC,EAAwBjlB,GAC5B3lB,EAAM8f,kBAGF5jB,EAAa8D,EAAM1D,KAAKxH,WAExBoxC,EAAW,IAAI,IA0BrB,OAxBA7xC,KAAKw2C,aACH3uC,EAAa,QACb0uC,GACA,SAACpzC,EAAOqQ,GACN,IAAIhQ,EAAOgQ,EAEG,MAAVrQ,IACFK,EAAO,KACPL,EAAQ,MAGI,OAAVA,GACF,EAAKysC,cACH/nC,EACArE,GACa,EACJ,MAEXquC,EAASM,QAAQ3uC,IAEjBquC,EAASO,OAAO,IAAI/uC,MAAMG,OAIzBquC,EAASS,SAIlB,YAAAhD,iBAAA,SAAiBC,KAQT,YAAAiH,aAAR,SACE3uC,EACA0uC,EACAlX,GAHF,gBAEE,IAAAkX,MAAA,IAGAA,EAAqB,OAAa,SAElCv2C,KAAK+vC,mBACFqF,UAA2B,GAC3BC,MAAK,SAAAoB,GACJ,IAAMC,EAAYD,GAAiBA,EAAcnB,YAC7CoB,IACFH,EAAqB,KAAWG,GAGlC,IAAMrP,GACH,EAAKsE,UAAU/gC,OAAS,WAAa,WACtC,EAAK+gC,UAAUhhC,KACf9C,EAFA,OAKA,EAAK8jC,UAAU9gC,UACf,YAAY0rC,GAEd,EAAK5U,KAAK,4BAA8B0F,GACxC,IAAMsP,EAAM,IAAIC,eAChBD,EAAI7O,mBAAqB,WACvB,GAAIzI,GAA+B,IAAnBsX,EAAInU,WAAkB,CACpC,EAAKb,KACH,qBAAuB0F,EAAM,qBAC7BsP,EAAIhd,OACJ,YACAgd,EAAIE,cAEN,IAAItD,EAAM,KACV,GAAIoD,EAAIhd,QAAU,KAAOgd,EAAIhd,OAAS,IAAK,CACzC,IACE4Z,EAAM,YAASoD,EAAIE,cACnB,MAAO51C,GACPqC,EACE,qCACE+jC,EACA,KACAsP,EAAIE,cAGVxX,EAAS,KAAMkU,QAGI,MAAfoD,EAAIhd,QAAiC,MAAfgd,EAAIhd,QAC5Br2B,EACE,sCACE+jC,EACA,YACAsP,EAAIhd,QAGV0F,EAASsX,EAAIhd,QAEf0F,EAAW,OAIfsX,EAAI7U,KAAK,MAAOuF,GAAuB,GACvCsP,EAAI7R,WAGZ,EArNA,CAAwCmR,I,cCDtC,WACmB/1B,EACA42B,EACAj1B,GAFA,KAAA3B,QACA,KAAA42B,OACA,KAAAj1B,SA2JrB,OAlJE,YAAAnR,IAAA,WAEE,OADA,YAAiB,mBAAoB,EAAG,EAAGqmC,UAAU50C,QAC9CnC,KAAKkgB,MAAMxP,OAQpB,YAAAsmC,UAAA,WAEE,OADA,YAAiB,yBAA0B,EAAG,EAAGD,UAAU50C,QACpDnC,KAAKkgB,MAAMxP,KAAI,IAKxB,YAAAumC,OAAA,WAGE,OADA,YAAiB,sBAAuB,EAAG,EAAGF,UAAU50C,QACjDnC,KAAKg3C,aAQd,YAAAE,OAAA,WAEE,OADA,YAAiB,sBAAuB,EAAG,EAAGH,UAAU50C,SAChDnC,KAAKkgB,MAAMvP,WASrB,YAAA3B,MAAA,SAAMmoC,GACJ,YAAiB,qBAAsB,EAAG,EAAGJ,UAAU50C,QAEvDg1C,EAAkB5uC,OAAO4uC,GACzBtnC,GAAmB,qBAAsB,EAAGsnC,GAAiB,GAE7D,IAAMl5B,EAAY,IAAIlW,EAAKovC,GACrBC,EAAWp3C,KAAK82C,KAAK9nC,MAAMiP,GACjC,OAAO,IAAIo5B,EACTr3C,KAAKkgB,MAAM5O,SAAS2M,GACpBm5B,EACArgC,KAUJ,YAAAxF,SAAA,SAAS4lC,GACP,YAAiB,wBAAyB,EAAG,EAAGJ,UAAU50C,QAC1D0N,GAAmB,wBAAyB,EAAGsnC,GAAiB,GAEhE,IAAMl5B,EAAY,IAAIlW,EAAKovC,GAC3B,OAAQn3C,KAAKkgB,MAAM5O,SAAS2M,GAAWtN,WAQzC,YAAAC,YAAA,WAIE,OAHA,YAAiB,2BAA4B,EAAG,EAAGmmC,UAAU50C,QAGtDnC,KAAKkgB,MAAMtP,cAAcF,OAWlC,YAAAiW,QAAA,SAAQ1U,GAAR,WAIE,GAHA,YAAiB,uBAAwB,EAAG,EAAG8kC,UAAU50C,QACzD,YAAiB,uBAAwB,EAAG8P,GAAQ,GAEhDjS,KAAKkgB,MAAMzP,aACb,OAAO,EAGT,IAAMmrB,EAAe57B,KAAKkgB,MAE1B,QAAS0b,EAAa7pB,aAAa/R,KAAK6hB,QAAQ,SAAC/hB,EAAKmT,GACpD,OAAOhB,EACL,IAAIolC,EAAapkC,EAAM,EAAK6jC,KAAK9nC,MAAMlP,GAAMiX,SASnD,YAAAugC,YAAA,WAGE,OAFA,YAAiB,2BAA4B,EAAG,EAAGP,UAAU50C,SAEzDnC,KAAKkgB,MAAMzP,eAGLzQ,KAAKkgB,MAAMvP,WAIvB,sBAAI,kBAAG,C,IAAP,WACE,OAAO3Q,KAAK82C,KAAKS,U,gCAOnB,YAAAzlC,YAAA,WAGE,OAFA,YAAiB,2BAA4B,EAAG,EAAGilC,UAAU50C,QAEtDnC,KAAKkgB,MAAMpO,eAOpB,YAAA0oB,OAAA,WAGE,OAFA,YAAiB,mBAAoB,EAAG,EAAGuc,UAAU50C,QAE9CnC,KAAK82C,MAGd,sBAAI,kBAAG,C,IAAP,WACE,OAAO92C,KAAKw6B,U,gCAEhB,E,GC5JA,GAME,SACWh6B,EACAg3C,EACFvkC,QAFE,IAAAzS,MAAA,SACA,IAAAg3C,MAAA,WACF,IAAAvkC,MAAA,CAAsB0K,SAAU,GAAI85B,WAAY,IAF9C,KAAAj3C,OACA,KAAAg3C,SACF,KAAAvkC,Q,SAUKykC,GAAe35B,EAAe45B,GAK5C,IAHA,IAAI1vC,EAAO0vC,aAAmB5vC,EAAO4vC,EAAU,IAAI5vC,EAAK4vC,GACpD3oC,EAAQ+O,EACV/D,EAAOhS,EAAaC,GACN,OAAT+R,GAAe,CACpB,IAAMvI,EAAY,YAAQzC,EAAMiE,KAAK0K,SAAU3D,IAAS,CACtD2D,SAAU,GACV85B,WAAY,GAEdzoC,EAAQ,IAAI4oC,GAAQ59B,EAAMhL,EAAOyC,GAEjCuI,EAAOhS,EADPC,EAAOE,EAAaF,IAItB,OAAO+G,E,SAQO6oC,GAAgB95B,GAC9B,OAAOA,EAAK9K,KAAKlT,M,SAQH+3C,GAAgB/5B,EAAehe,GAC7Cge,EAAK9K,KAAKlT,MAAQA,EAClBg4C,GAAkBh6B,G,SAMJi6B,GAAmBj6B,GACjC,OAAOA,EAAK9K,KAAKwkC,WAAa,E,SAehBQ,GACdl6B,EACA9L,GAEA/M,EAAK6Y,EAAK9K,KAAK0K,UAAU,SAAC3O,EAAe6J,GACvC5G,EAAO,IAAI2lC,GAAQ5oC,EAAO+O,EAAMlF,O,SAapBq/B,GACdn6B,EACA9L,EACAkmC,EACAC,GAEID,IAAgBC,GAClBnmC,EAAO8L,GAGTk6B,GAAiBl6B,GAAM,SAAA/O,GACrBkpC,GAAsBlpC,EAAOiD,GAAQ,EAAMmmC,MAGzCD,GAAeC,GACjBnmC,EAAO8L,G,SAkDKs6B,GAAet6B,GAC7B,OAAO,IAAIhW,EACO,OAAhBgW,EAAKy5B,OACDz5B,EAAKvd,KACL63C,GAAYt6B,EAAKy5B,QAAU,IAAMz5B,EAAKvd,MAO9C,SAASu3C,GAAqBh6B,GACR,OAAhBA,EAAKy5B,QAWX,SAA4Bz5B,EAAe1M,EAAmBrC,GAC5D,IAAMspC,E,SApHuBv6B,GAC7B,YAA8BrP,IAAvBmpC,GAAa95B,KAAwBi6B,GAAgBj6B,GAmHzCw6B,CAAYvpC,GACzBwpC,EAAc,YAASz6B,EAAK9K,KAAK0K,SAAUtM,GAC7CinC,GAAcE,UACTz6B,EAAK9K,KAAK0K,SAAStM,GAC1B0M,EAAK9K,KAAKwkC,aACVM,GAAkBh6B,IACRu6B,GAAeE,IACzBz6B,EAAK9K,KAAK0K,SAAStM,GAAarC,EAAMiE,KACtC8K,EAAK9K,KAAKwkC,aACVM,GAAkBh6B,IApBlB06B,CAAgB16B,EAAKy5B,OAAQz5B,EAAKvd,KAAMud,GClG5C,IAAM26B,GAAmB,iBAkDzB,cA2BE,WACS/M,EACAgN,EACAC,EACA7I,GAHA,KAAApE,YACA,KAAAgN,mBACA,KAAAC,MACA,KAAA7I,qBA3BT,KAAA8I,gBAAkB,EAKlB,KAAArb,eAAuC,KACvC,KAAAsb,YAAc,IAAIC,GAClB,KAAAC,aAAe,EAIf,KAAAC,6BAAyE,KAIzE,KAAA/W,cAAgBrG,KAGhB,KAAAqd,sBAAwB,IAAItB,GAG5B,KAAAuB,sBAAqD,KASnDn5C,KAAKF,IAAME,KAAK2rC,UAAUlgC,cAW9B,OALE,YAAAhL,SAAA,WACE,OACGT,KAAK2rC,UAAU/gC,OAAS,WAAa,WAAa5K,KAAK2rC,UAAUhhC,MAGxE,EA7CA,G,SA+CgByuC,GAAUxkB,GAGxB,GAFAA,EAAKgN,OAAS9E,GAA0BlI,EAAK+W,WAEzC/W,EAAK+jB,mBjE+WY,kBAAX73C,QACNA,OAAM,WACNA,OAAM,UAAN,WACF,IAOUu4C,OACR,6FACG,EiE1XLzkB,EAAK0I,QAAU,IAAI+Y,GACjBzhB,EAAK+W,WACL,SACE9jC,EACArE,EACA81C,EACA5gB,GAEA6gB,GAAiB3kB,EAAM/sB,EAAYrE,EAAM81C,EAAS5gB,KAEpD9D,EAAKmb,oBAIP7oC,YAAW,WAAM,OAAAsyC,GAAoB5kB,GAA2B,KAAO,OAClE,CACL,IAAM6kB,EAAe7kB,EAAKgkB,IAAI9P,QAAT,6BAErB,GAA4B,qBAAjB2Q,GAAiD,OAAjBA,EAAuB,CAChE,GAA4B,kBAAjBA,EACT,MAAM,IAAIp2C,MACR,sEAGJ,IACE,YAAUo2C,GACV,MAAOx4C,GACP,MAAM,IAAIoC,MAAM,kCAAoCpC,IAIxD2zB,EAAKukB,sBAAwB,IAAIlJ,GAC/Brb,EAAK+W,UACL/W,EAAKgkB,IAAI9P,QAAQ4Q,OACjB,SACE7xC,EACArE,EACA81C,EACA5gB,GAEA6gB,GAAiB3kB,EAAM/sB,EAAYrE,EAAM81C,EAAS5gB,MAEpD,SAACihB,GACCH,GAAoB5kB,EAAM+kB,MAE5B,SAACl2B,IA8JP,SAAgCmR,EAAYnR,GAC1Cve,EAAKue,GAAS,SAAC3jB,EAAaC,GAC1B65C,GAAehlB,EAAM90B,EAAKC,MA/JtB85C,CAAuBjlB,EAAMnR,KAE/BmR,EAAKmb,mBACL0J,GAGF7kB,EAAK0I,QAAU1I,EAAKukB,sBAGtBvkB,EAAKmb,mBAAmB+J,wBAAuB,SAAAvK,GAC7C3a,EAAK0I,QAAQgS,iBAAiBC,MAKhC3a,EAAKmlB,e,SlB/OLluC,EACAmuC,GAEA,IAAMjd,EAAalxB,EAASpL,WAM5B,OAJKo8B,GAAUE,KACbF,GAAUE,GAAcid,KAGnBnd,GAAUE,GkBsOKkd,CACpBrlB,EAAK+W,WACL,WAAM,WAAIuO,GAActlB,EAAKgN,OAAQhN,EAAK0I,YAI5C1I,EAAKulB,UAAY,IAAIC,GACrBxlB,EAAKylB,cAAgB,IAAIC,GAAS,CAChCljB,eAAgB,SAACzrB,EAAO+sB,EAAK8Z,EAAehb,GAC1C,IAAI+iB,EAAsB,GACpBtnC,EAAO2hB,EAAKulB,UAAU15B,QAAQ9U,EAAM1D,MAa1C,OAVKgL,EAAKtC,YACR4pC,EAAapkB,GACXvB,EAAKylB,cACL1uC,EAAM1D,KACNgL,GAEF/L,YAAW,WACTswB,EAAW,QACV,IAEE+iB,GAET9iB,cAAe,eAEjBmiB,GAAehlB,EAAM,aAAa,GAElCA,EAAK4lB,gBAAkB,IAAIF,GAAS,CAClCljB,eAAgB,SAACzrB,EAAO+sB,EAAK8Z,EAAehb,GAU1C,OATA5C,EAAK0I,QAAQiV,OAAO5mC,EAAO6mC,EAAe9Z,GAAK,SAACiB,EAAQn2B,GACtD,IAAMooB,EAAS4L,EAAWmC,EAAQn2B,GAClCi7B,GACE7J,EAAKkkB,YACLntC,EAAM1D,KACN2jB,MAIG,IAET6L,cAAe,SAAC9rB,EAAO+sB,GACrB9D,EAAK0I,QAAQmW,SAAS9nC,EAAO+sB,M,SAQnB+hB,GAAe7lB,GAC7B,IACM8lB,EADa9lB,EAAKulB,UAAU15B,QAAQ,IAAI1Y,EAAK,2BACxB2I,OAAoB,EAC/C,OAAO,IAAI4jC,MAAOC,UAAYmG,E,SAMhBC,GAAyB/lB,GACvC,OtB/PA7R,GAJAA,EsBmQ0B,CACxB+rB,UAAW2L,GAAe7lB,MtBhQT,IACb,UAAgB7R,EAAM,YAAiB,IAAIuxB,MAAOC,UACjDxxB,EAPyB,IAChCA,EsB2QF,SAASw2B,GACP3kB,EACA/sB,EACArE,EACA81C,EACA5gB,GAGA9D,EAAKikB,kBACL,IAAM5wC,EAAO,IAAIF,EAAKF,GACtBrE,EAAOoxB,EAAKqkB,6BACRrkB,EAAKqkB,6BAA6BpxC,EAAYrE,GAC9CA,EACJ,IAAIooB,EAAS,GACb,GAAI8M,EACF,GAAI4gB,EAAS,CACX,IAAMsB,EAAiB,YACrBp3C,GACA,SAACq3C,GAAiB,UAAaA,MAEjCjvB,E,SvB0FJ6J,EACAxtB,EACA+gB,EACA0P,GAEA,IAAMD,EAAWmB,GAAwBnE,EAAUiD,GACnD,GAAID,EAAU,CACZ,IAAMoB,EAAIC,GAAuBrB,GAC3BsB,EAAYF,EAAE5xB,KAClB+U,EAAU6c,EAAE7c,QACRoB,EAAenV,EAAgB8wB,EAAW9xB,GAC1C8tB,EAAa/X,GAAcF,WAAWkL,GAM5C,OAAOgR,GAA8BvE,EAAUsE,EALpC,IAAI9Z,GACblD,GAAoCC,GACpCoB,EACA2X,IAKF,MAAO,GuB9GI+kB,CACPlmB,EAAK4lB,gBACLvyC,EACA2yC,EACAliB,OAEG,CACL,IAAMqiB,EAAa1qC,GAAa7M,GAChCooB,E,SvBqDJ6J,EACAxtB,EACA4X,EACA6Y,GAEA,IAAMD,EAAWmB,GAAwBnE,EAAUiD,GACnD,GAAgB,MAAZD,EAAkB,CACpB,IAAMoB,EAAIC,GAAuBrB,GAC3BsB,EAAYF,EAAE5xB,KAClB+U,EAAU6c,EAAE7c,QACRoB,EAAenV,EAAgB8wB,EAAW9xB,GAMhD,OAAO+xB,GAA8BvE,EAAUsE,EALpC,IAAIha,GACbhD,GAAoCC,GACpCoB,EACAyB,IAKF,MAAO,GuBxEIm7B,CACPpmB,EAAK4lB,gBACLvyC,EACA8yC,EACAriB,QAGC,GAAI4gB,EAAS,CAClB,IAAMtwB,EAAkB,YACtBxlB,GACA,SAACq3C,GAAiB,UAAaA,MAEjCjvB,E,SvBpIF6J,EACAxtB,EACA+gB,GAEA,IAAM+M,EAAa/X,GAAcF,WAAWkL,GAE5C,OAAO4M,GACLH,EACA,IAAIxV,GxBtMC,CACLhD,UAAU,EACVC,YAAY,EACZF,QAAS,KACTG,QAAQ,GwBkM8BlV,EAAM8tB,IuB4HnCklB,CACPrmB,EAAK4lB,gBACLvyC,EACA+gB,OAEG,CACL,IAAMnJ,EAAOxP,GAAa7M,GAC1BooB,EAASuK,GAA6BvB,EAAK4lB,gBAAiBvyC,EAAM4X,GAEpE,IAAIiC,EAAe7Z,EACf2jB,EAAOzpB,OAAS,IAGlB2f,EAAeo5B,GAAsBtmB,EAAM3sB,IAE7Cw2B,GAAoC7J,EAAKkkB,YAAah3B,EAAc8J,GAWtE,SAAS4tB,GAAoB5kB,EAAY+kB,GACvCC,GAAehlB,EAAM,YAAa+kB,IACZ,IAAlBA,GAkNN,SAAmC/kB,GACjCumB,GAAQvmB,EAAM,sBAEd,IAAMkG,EAAe6f,GAAyB/lB,GACxCwmB,EAA2Bvf,KACjCK,GACEtH,EAAKsN,cACLp6B,KACA,SAACG,EAAMgL,GACL,IAAMooC,EAAW9f,GACftzB,EACAgL,EACA2hB,EAAK4lB,gBACL1f,GAEFgB,GAA2Bsf,EAA0BnzC,EAAMozC,MAG/D,IAAIzvB,EAAkB,GAEtBsQ,GACEkf,EACAtzC,KACA,SAACG,EAAM4X,GACL+L,EAASA,EAAOsH,OACdiD,GAA6BvB,EAAK4lB,gBAAiBvyC,EAAM4X,IAE3D,IAAMiC,EAAew5B,GAAsB1mB,EAAM3sB,GACjDizC,GAAsBtmB,EAAM9S,MAIhC8S,EAAKsN,cAAgBrG,KACrB4C,GAAoC7J,EAAKkkB,YAAahxC,IAAgB8jB,GAlPpE2vB,CAA0B3mB,GAU9B,SAASglB,GAAehlB,EAAY/sB,EAAoB9H,GACtD,IAAMkI,EAAO,IAAIF,EAAK,UAAYF,GAC5B2O,EAAUnG,GAAatQ,GAC7B60B,EAAKulB,UAAU5d,eAAet0B,EAAMuO,GACpC,IAAMoV,EAASuK,GACbvB,EAAKylB,cACLpyC,EACAuO,GAEFioB,GAAoC7J,EAAKkkB,YAAa7wC,EAAM2jB,GAG9D,SAAS4vB,GAAmB5mB,GAC1B,OAAOA,EAAKokB,e,SAsDEyC,GACd7mB,EACA3sB,EACAyzC,EACA1gC,EACAwc,GAEA2jB,GAAQvmB,EAAM,MAAO,CACnB3sB,KAAMA,EAAKxH,WACXV,MAAO27C,EACPrtC,SAAU2M,IAKZ,IAAM8f,EAAe6f,GAAyB/lB,GACxC+mB,EAAoBtrC,GAAaqrC,EAAQ1gC,GACzCgY,EAAWgG,GAA+BpE,EAAK4lB,gBAAiBvyC,GAChEuO,EAAUilB,GACdkgB,EACA3oB,EACA8H,GAGItW,EAAUg3B,GAAmB5mB,GAC7BhJ,EAAS4J,GACbZ,EAAK4lB,gBACLvyC,EACAuO,EACAgO,GACA,GAEFyZ,GAAsBrJ,EAAKkkB,YAAaltB,GACxCgJ,EAAK0I,QAAQ+R,IACXpnC,EAAKxH,WACLk7C,EAAkBjrC,KAAgB,IAClC,SAACipB,EAAQsa,GACP,IAAM2H,EAAqB,OAAXjiB,EACXiiB,GACHt4C,EAAK,UAAY2E,EAAO,YAAc0xB,GAGxC,IAAMkiB,EAAc7lB,GAClBpB,EAAK4lB,gBACLh2B,GACCo3B,GAEHnd,GAAoC7J,EAAKkkB,YAAa7wC,EAAM4zC,GAC5DC,GAA2BlnB,EAAM4C,EAAYmC,EAAQsa,MAGzD,IAAMnyB,EAAew5B,GAAsB1mB,EAAM3sB,GACjDizC,GAAsBtmB,EAAM9S,GAE5B2c,GAAoC7J,EAAKkkB,YAAah3B,EAAc,I,SAGtDi6B,GACdnnB,EACA3sB,EACA+zC,EACAxkB,GAEA2jB,GAAQvmB,EAAM,SAAU,CAAE3sB,KAAMA,EAAKxH,WAAYV,MAAOi8C,IAGxD,IAAI/4B,GAAQ,EACN6X,EAAe6f,GAAyB/lB,GACxC5L,EAAyC,GAW/C,GAVA9jB,EAAK82C,GAAiB,SAACC,EAAoBC,GACzCj5B,GAAQ,EACR+F,EAAgBizB,GAAc1gB,GAC5B1yB,EAAUZ,EAAMg0C,GAChB5rC,GAAa6rC,GACbtnB,EAAK4lB,gBACL1f,MAIC7X,EA6CHlgB,EAAI,wDACJ+4C,GAA2BlnB,EAAM4C,EAAY,UAAM9oB,OA9CzC,CACV,IAAM,EAAU8sC,GAAmB5mB,GAC7BhJ,EAASiK,GACbjB,EAAK4lB,gBACLvyC,EACA+gB,EACA,GAEFiV,GAAsBrJ,EAAKkkB,YAAaltB,GACxCgJ,EAAK0I,QAAQnX,MACXle,EAAKxH,WACLu7C,GACA,SAACriB,EAAQsa,GACP,IAAM2H,EAAqB,OAAXjiB,EACXiiB,GACHt4C,EAAK,aAAe2E,EAAO,YAAc0xB,GAG3C,IAAMkiB,EAAc7lB,GAClBpB,EAAK4lB,gBACL,GACCoB,GAEG95B,EACJ+5B,EAAY15C,OAAS,EAAI+4C,GAAsBtmB,EAAM3sB,GAAQA,EAC/Dw2B,GACE7J,EAAKkkB,YACLh3B,EACA+5B,GAEFC,GAA2BlnB,EAAM4C,EAAYmC,EAAQsa,MAIzD/uC,EAAK82C,GAAiB,SAACtd,GACrB,IAAM5c,EAAew5B,GACnB1mB,EACA/rB,EAAUZ,EAAMy2B,IAElBwc,GAAsBtmB,EAAM9S,MAI9B2c,GAAoC7J,EAAKkkB,YAAa7wC,EAAM,K,SA8ChDk0C,GACdvnB,EACA3sB,EACAuvB,GAEA5C,EAAK0I,QAAQoS,mBAAmBznC,EAAKxH,YAAY,SAACk5B,EAAQsa,GACzC,OAAXta,GACFsC,GAAyBrH,EAAKsN,cAAej6B,GAE/C6zC,GAA2BlnB,EAAM4C,EAAYmC,EAAQsa,M,SAIzCmI,GACdxnB,EACA3sB,EACAlI,EACAy3B,GAEA,IAAMhhB,EAAUnG,GAAatQ,GAC7B60B,EAAK0I,QAAQkS,gBACXvnC,EAAKxH,WACL+V,EAAQ9F,KAAgB,IACxB,SAACipB,EAAQsa,GACQ,OAAXta,GACFmC,GAA2BlH,EAAKsN,cAAej6B,EAAMuO,GAEvDslC,GAA2BlnB,EAAM4C,EAAYmC,EAAQsa,M,SAK3CoI,GACdznB,EACA3sB,EACAlI,EACAsO,EACAmpB,GAEA,IAAMhhB,EAAUnG,GAAatQ,EAAOsO,GACpCumB,EAAK0I,QAAQkS,gBACXvnC,EAAKxH,WACL+V,EAAQ9F,KAAgB,IACxB,SAACipB,EAAQsa,GACQ,OAAXta,GACFmC,GAA2BlH,EAAKsN,cAAej6B,EAAMuO,GAEvDslC,GAA2BlnB,EAAM4C,EAAYmC,EAAQsa,M,SAK3CqI,GACd1nB,EACA3sB,EACA+zC,EACAxkB,GAEA,GAAI,YAAQwkB,GAGV,OAFAj5C,EAAI,4EACJ+4C,GAA2BlnB,EAAM4C,EAAY,UAAM9oB,GAIrDkmB,EAAK0I,QAAQmS,kBACXxnC,EAAKxH,WACLu7C,GACA,SAACriB,EAAQsa,GACQ,OAAXta,GACFz0B,EAAK82C,GAAiB,SAAC3qC,EAAmBI,GACxC,IAAME,EAAetB,GAAaoB,GAClCqqB,GACElH,EAAKsN,cACLr5B,EAAUZ,EAAMoJ,GAChBM,MAINmqC,GAA2BlnB,EAAM4C,EAAYmC,EAAQsa,M,SAK3CsI,GACd3nB,EACAjpB,EACA+mB,GAEA,IAAI9G,EAEFA,EAD+B,UAA7B5jB,EAAa2D,EAAM1D,MACZiwB,GACPtD,EAAKylB,cACL1uC,EACA+mB,GAGOwF,GACPtD,EAAK4lB,gBACL7uC,EACA+mB,GAGJ4L,GAA4B1J,EAAKkkB,YAAantC,EAAM1D,KAAM2jB,G,SAG5C4wB,GACd5nB,EACAjpB,EACA+mB,GAIA,IAAI9G,EAEFA,EAD+B,UAA7B5jB,EAAa2D,EAAM1D,MACZmuB,GACPxB,EAAKylB,cACL1uC,EACA+mB,GAGO0D,GACPxB,EAAK4lB,gBACL7uC,EACA+mB,GAGJ4L,GAA4B1J,EAAKkkB,YAAantC,EAAM1D,KAAM2jB,G,SAG5C6wB,GAAc7nB,GACxBA,EAAKukB,uBACPvkB,EAAKukB,sBAAsB3D,UAAUkD,I,SAIzBgE,GAAW9nB,GACrBA,EAAKukB,uBACPvkB,EAAKukB,sBAAsB1D,OAAOiD,IAwCtC,SAASyC,GAAQvmB,G,IAAY,wDAC3B,IAAI1xB,EAAS,GACT0xB,EAAKukB,wBACPj2C,EAAS0xB,EAAKukB,sBAAsB53C,GAAK,KAE3CwB,EAAG,0BAACG,GAAM,YAAKhB,K,SAGD45C,GACdlnB,EACAyK,EACA1F,EACAsa,GAEI5U,GACFp4B,GAAe,WACb,GAAe,OAAX0yB,EACF0F,EAAS,UACJ,CACL,IAAMlF,GAAQR,GAAU,SAASU,cAC7Br4B,EAAUm4B,EACV8Z,IACFjyC,GAAW,KAAOiyC,GAGpB,IAAM9wC,EAAQ,IAAIE,MAAMrB,GAGvBmB,EAAcg3B,KAAOA,EACtBkF,EAASl8B,O,SAMDw5C,GAAgB/nB,GAC9B,OAAOA,EAAKgoB,aAAehoB,EAAKgoB,WAAa,IAAIC,GAASjoB,I,SAY5CkoB,GACdloB,EACA3sB,EACA80C,EACAvlB,EACAwlB,GAEA7B,GAAQvmB,EAAM,kBAAoB3sB,GAGlC,IAAMg1C,EAAgB,aAChBC,EAAW,IAAIC,GAAUvoB,EAAM3sB,GACrCi1C,EAAS3d,GAAG,QAAS0d,GACrB,IAKMG,EAA2B,CAC/Bn1C,KAAI,EACJtG,OAAQo7C,EACRvlB,WAAU,EAEVmC,OAAQ,KAGR0jB,MAAO/7C,IAEP07C,aAAY,EAEZM,WAAY,EAEZC,UAnBgB,WAChBL,EAASxd,IAAI,QAASud,IAoBtBO,YAAa,KACbC,eAAgB,KAChBC,qBAAsB,KACtBC,yBAA0B,KAC1BC,8BAA+B,MAI3BC,EAAeC,GAAmBlpB,EAAM3sB,OAAMyG,GACpD0uC,EAAYM,qBAAuBG,EACnC,IAAMnC,EAAS0B,EAAYz7C,OAAOk8C,EAAantC,OAC/C,QAAehC,IAAXgtC,GAKF,GAHA0B,EAAYG,YACZH,EAAYO,yBAA2B,KACvCP,EAAYQ,8BAAgC,KACxCR,EAAY5lB,WAAY,CAE1B,IAAMumB,EAAW,IAAI1G,GACnB+F,EAAYM,qBACZ,IAAIP,GAAUvoB,EAAMwoB,EAAYn1C,MAChC8O,IAEFqmC,EAAY5lB,WAAW,MAAM,EAAOumB,QAEjC,CACLpvC,GACE,qCACA+sC,EACA0B,EAAYn1C,MAIdm1C,EAAYzjB,OAAM,EAClB,IAAMqkB,EAAYtG,GAAY9iB,EAAKskB,sBAAuBjxC,GACpDg2C,EAAYpG,GAAamG,IAAc,GAC7CC,EAAUv5C,KAAK04C,GAEftF,GAAakG,EAAWC,GAMxB,IAAIC,OAAe,EACnB,GACoB,kBAAXxC,GACI,OAAXA,GACA,YAASA,EAAQ,aAGjBwC,EAAkB,YAAQxC,EAAe,aACzC,YACEttC,GAAgB8vC,GAChB,yHAOFA,GAFEllB,GAA+BpE,EAAK4lB,gBAAiBvyC,IACrD4S,GAAa7J,YACeJ,cAAcF,MAG9C,IAAMoqB,EAAe6f,GAAyB/lB,GACxC+mB,EAAoBtrC,GAAaqrC,EAAQwC,GACzC1nC,EAAUilB,GACdkgB,EACAkC,EACA/iB,GAEFsiB,EAAYO,yBAA2BhC,EACvCyB,EAAYQ,8BAAgCpnC,EAC5C4mC,EAAYK,eAAiBjC,GAAmB5mB,GAEhD,IAAMhJ,EAAS4J,GACbZ,EAAK4lB,gBACLvyC,EACAuO,EACA4mC,EAAYK,eACZL,EAAYJ,cAEdve,GAAoC7J,EAAKkkB,YAAa7wC,EAAM2jB,GAE5DuyB,GAA0BvpB,EAAMA,EAAKskB,wBAOzC,SAAS4E,GACPlpB,EACA3sB,EACAm2C,GAEA,OACEplB,GAA+BpE,EAAK4lB,gBAAiBvyC,EAAMm2C,IAC3DvjC,GAAa7J,WAajB,SAASmtC,GACPvpB,EACA3hB,GAOA,QAPA,IAAAA,MAA4B2hB,EAAKskB,uBAG5BjmC,GACHorC,GAAwCzpB,EAAM3hB,GAG5C4kC,GAAa5kC,GAAO,CACtB,IAAMqrC,EAAQC,GAA0B3pB,EAAM3hB,GAC9C,YAAOqrC,EAAMn8C,OAAS,EAAG,yCAEVm8C,EAAME,OACnB,SAACpB,GAA6B,OAAkB,IAAlBA,EAAYzjB,WAqBhD,SACE/E,EACA3sB,EACAq2C,GASA,IANA,IAAMG,EAAeH,EAAM1lB,KAAI,SAAA8lB,GAC7B,OAAOA,EAAIjB,kBAEPkB,EAAcb,GAAmBlpB,EAAM3sB,EAAMw2C,GAC/CG,EAAaD,EACXE,EAAaF,EAAYvsC,OACtBnQ,EAAI,EAAGA,EAAIq8C,EAAMn8C,OAAQF,IAAK,CACrC,IAAMy8C,EAAMJ,EAAMr8C,GAClB,YACY,IAAVy8C,EAAI/kB,OACJ,iEAEF+kB,EAAI/kB,OAAM,EACV+kB,EAAIpB,aACJ,IAAMl/B,EAAenV,EAAgBhB,EAAMy2C,EAAIz2C,MAE/C22C,EAAaA,EAAWhtC,YACtBwM,EACAsgC,EAAIf,0BAIR,IAAMmB,EAAaF,EAAWluC,KAAI,GAC5BquC,EAAa92C,EAGnB2sB,EAAK0I,QAAQ+R,IACX0P,EAAWt+C,WACXq+C,GACA,SAACnlB,GACCwhB,GAAQvmB,EAAM,2BAA4B,CACxC3sB,KAAM82C,EAAWt+C,WACjBk5B,OAAM,IAGR,IAAI/N,EAAkB,GACtB,GAAe,OAAX+N,EAAiB,CAKnB,IADA,IAAMqlB,EAAY,GACT/8C,EAAI,EAAGA,EAAIq8C,EAAMn8C,OAAQF,IAAK,CAKrC,GAJAq8C,EAAMr8C,GAAG03B,OAAM,EACf/N,EAASA,EAAOsH,OACd8C,GAAqBpB,EAAK4lB,gBAAiB8D,EAAMr8C,GAAGw7C,iBAElDa,EAAMr8C,GAAGu1B,WAAY,CAGvB,IAAMvkB,EAAOqrC,EAAMr8C,GAAG27C,8BAChBqB,EAAM,IAAI9B,GAAUvoB,EAAM0pB,EAAMr8C,GAAGgG,MACnC81C,EAAW,IAAI1G,GAAapkC,EAAMgsC,EAAKloC,IAC7CioC,EAAUt6C,KACR45C,EAAMr8C,GAAGu1B,WAAWx0B,KAAK,KAAM,MAAM,EAAM+6C,IAG/CO,EAAMr8C,GAAGs7C,YAIXc,GACEzpB,EACA8iB,GAAY9iB,EAAKskB,sBAAuBjxC,IAG1Ck2C,GAA0BvpB,EAAMA,EAAKskB,uBAErCza,GAAoC7J,EAAKkkB,YAAa7wC,EAAM2jB,GAG5D,IAAS3pB,EAAI,EAAGA,EAAI+8C,EAAU78C,OAAQF,IACpCgF,EAAe+3C,EAAU/8C,QAEtB,CAEL,GAAe,cAAX03B,EACF,IAAS13B,EAAI,EAAGA,EAAIq8C,EAAMn8C,OAAQF,IACb,IAAfq8C,EAAMr8C,GAAG03B,OACX2kB,EAAMr8C,GAAG03B,OAAM,EAEf2kB,EAAMr8C,GAAG03B,OAAM,MAGd,CACLr2B,EACE,kBAAoBy7C,EAAWt+C,WAAa,YAAck5B,GAE5D,IAAS13B,EAAI,EAAGA,EAAIq8C,EAAMn8C,OAAQF,IAChCq8C,EAAMr8C,GAAG03B,OAAM,EACf2kB,EAAMr8C,GAAGu7C,YAAc7jB,EAI3BuhB,GAAsBtmB,EAAM3sB,MAGhC42C,GAtHEK,CAAyBtqB,EAAMyjB,GAAYplC,GAAOqrC,QAE3CtG,GAAgB/kC,IACzBglC,GAAiBhlC,GAAM,SAAAxB,GACrB0sC,GAA0BvpB,EAAMnjB,MAiItC,SAASypC,GAAsBtmB,EAAY8J,GACzC,IAAMygB,EAA0BC,GAC9BxqB,EACA8J,GAEIz2B,EAAOowC,GAAY8G,GAKzB,OAUF,SACEvqB,EACA0pB,EACAr2C,GAEA,GAAqB,IAAjBq2C,EAAMn8C,OACR,OAeF,IATA,IAAM68C,EAAY,GACdpzB,EAAkB,GAKhB6yB,EAHcH,EAAM54B,QAAO,SAAAssB,GAC/B,OAAe,IAARA,EAAErY,UAEsBf,KAAI,SAAAoZ,GACnC,OAAOA,EAAEyL,kBAEFx7C,EAAI,EAAGA,EAAIq8C,EAAMn8C,OAAQF,IAAK,CACrC,IAAMm7C,EAAckB,EAAMr8C,GACpBmc,EAAenV,EAAgBhB,EAAMm1C,EAAYn1C,MACnDo3C,GAAmB,EACrB7B,OAAW,EAMb,GALA,YACmB,OAAjBp/B,EACA,iEAGoB,IAAlBg/B,EAAYzjB,OACd0lB,GAAmB,EACnB7B,EAAcJ,EAAYI,YAC1B5xB,EAASA,EAAOsH,OACd8C,GACEpB,EAAK4lB,gBACL4C,EAAYK,gBACZ,SAGC,GAAsB,IAAlBL,EAAYzjB,OACrB,GAAIyjB,EAAYE,YAlmCU,GAmmCxB+B,GAAmB,EACnB7B,EAAc,WACd5xB,EAASA,EAAOsH,OACd8C,GACEpB,EAAK4lB,gBACL4C,EAAYK,gBACZ,QAGC,CAEL,IAAM6B,EAAcxB,GAClBlpB,EACAwoB,EAAYn1C,KACZw2C,GAEFrB,EAAYM,qBAAuB4B,EACnC,IAAM5pB,EAAU4oB,EAAMr8C,GAAGN,OAAO29C,EAAY5uC,OAC5C,QAAgBhC,IAAZgnB,EAAuB,CACzB/mB,GACE,qCACA+mB,EACA0nB,EAAYn1C,MAEd,IAAIs3C,EAAclvC,GAAaqlB,GAEV,kBAAZA,GACI,MAAXA,GACA,YAASA,EAAS,eAGlB6pB,EAAcA,EAAYruC,eAAeouC,EAAY1uC,gBAGvD,IAAM4uC,EAAapC,EAAYK,eACzB3iB,EAAe6f,GAAyB/lB,GACxC6qB,EAAkBhkB,GACtB8jB,EACAD,EACAxkB,GAGFsiB,EAAYO,yBAA2B4B,EACvCnC,EAAYQ,8BAAgC6B,EAC5CrC,EAAYK,eAAiBjC,GAAmB5mB,GAEhD6pB,EAAa75B,OAAO65B,EAAarzC,QAAQo0C,GAAa,GAUtD5zB,GATAA,EAASA,EAAOsH,OACdsC,GACEZ,EAAK4lB,gBACL4C,EAAYn1C,KACZw3C,EACArC,EAAYK,eACZL,EAAYJ,gBAGA9pB,OACd8C,GAAqBpB,EAAK4lB,gBAAiBgF,GAAY,SAGzDH,GAAmB,EACnB7B,EAAc,SACd5xB,EAASA,EAAOsH,OACd8C,GACEpB,EAAK4lB,gBACL4C,EAAYK,gBACZ,IAQV,GAFAhf,GAAoC7J,EAAKkkB,YAAa7wC,EAAM2jB,GAC5DA,EAAS,GACLyzB,IAEFf,EAAMr8C,GAAG03B,OAAM,EAKJ4jB,EAERe,EAAMr8C,GAAGs7C,UADVr2C,WAAWq2C,EAAW33C,KAAKI,MAAM,IAG/Bs4C,EAAMr8C,GAAGu1B,YACX,GAAoB,WAAhBgmB,EAA0B,CAC5B,IAAMyB,EAAM,IAAI9B,GAAUvoB,EAAM0pB,EAAMr8C,GAAGgG,MAEnCy3C,EAAiCpB,EAAMr8C,GAAGy7C,qBAC1CK,EAAW,IAAI1G,GAAaqI,EAAWT,EAAKloC,IAClDioC,EAAUt6C,KAAK45C,EAAMr8C,GAAGu1B,WAAWx0B,KAAK,KAAM,MAAM,EAAO+6C,SAE3DiB,EAAUt6C,KACR45C,EAAMr8C,GAAGu1B,WAAWx0B,KAAK,KAAM,IAAIK,MAAMm6C,IAAc,EAAO,OAbpE,IAAWD,EAqBfc,GAAwCzpB,EAAMA,EAAKskB,uBAGnD,IAASj3C,EAAI,EAAGA,EAAI+8C,EAAU78C,OAAQF,IACpCgF,EAAe+3C,EAAU/8C,IAI3Bk8C,GAA0BvpB,EAAMA,EAAKskB,uBArKrCyG,CAA0B/qB,EADZ2pB,GAA0B3pB,EAAMuqB,GACPl3C,GAEhCA,EA8KT,SAASm3C,GACPxqB,EACA3sB,GAEA,IAAI4J,EAIA+tC,EAAkBhrB,EAAKskB,sBAE3B,IADArnC,EAAQ7J,EAAaC,GACJ,OAAV4J,QAAoDnD,IAAlCmpC,GAAa+H,IACpCA,EAAkBlI,GAAYkI,EAAiB/tC,GAE/CA,EAAQ7J,EADRC,EAAOE,EAAaF,IAItB,OAAO23C,EAUT,SAASrB,GACP3pB,EACAgrB,GAGA,IAAMC,EAAkC,GAUxC,OATAC,GACElrB,EACAgrB,EACAC,GAIFA,EAAiBl7C,MAAK,SAACZ,EAAGC,GAAM,OAAAD,EAAEs5C,MAAQr5C,EAAEq5C,SAErCwC,EAGT,SAASC,GACPlrB,EACA3hB,EACAqrC,GAEA,IAAML,EAAYpG,GAAa5kC,GAC/B,GAAIgrC,EACF,IAAK,IAAIh8C,EAAI,EAAGA,EAAIg8C,EAAU97C,OAAQF,IACpCq8C,EAAM55C,KAAKu5C,EAAUh8C,IAIzBg2C,GAAiBhlC,GAAM,SAAAjE,GACrB8wC,GAAsClrB,EAAM5lB,EAAOsvC,MAOvD,SAASD,GACPzpB,EACA3hB,GAEA,IAAMqrC,EAAQzG,GAAa5kC,GAC3B,GAAIqrC,EAAO,CAET,IADA,IAAIyB,EAAK,EACAj9B,EAAO,EAAGA,EAAOw7B,EAAMn8C,OAAQ2gB,IAChB,IAAlBw7B,EAAMx7B,GAAM6W,SACd2kB,EAAMyB,GAAMzB,EAAMx7B,GAClBi9B,KAGJzB,EAAMn8C,OAAS49C,EACfjI,GAAa7kC,EAAMqrC,EAAMn8C,OAAS,EAAIm8C,OAAQ5vC,GAGhDupC,GAAiBhlC,GAAM,SAAAxB,GACrB4sC,GAAwCzpB,EAAMnjB,MAWlD,SAAS6pC,GAAsB1mB,EAAY3sB,GACzC,IAAM6Z,EAAeu2B,GAAY+G,GAA+BxqB,EAAM3sB,IAEhE23C,EAAkBlI,GAAY9iB,EAAKskB,sBAAuBjxC,GAYhE,O,SD/xCA8V,EACA9L,EACAkmC,GAGA,IADA,IAAIllC,EAAOklC,EAAcp6B,EAAOA,EAAKy5B,OACrB,OAATvkC,GAAe,CACpB,GAAIhB,EAAOgB,GACT,OAAO,EAETA,EAAOA,EAAKukC,QC4wCdwI,CAAoBJ,GAAiB,SAAC3sC,GACpCgtC,GAA4BrrB,EAAM3hB,MAGpCgtC,GAA4BrrB,EAAMgrB,GAElC1H,GAAsB0H,GAAiB,SAAC3sC,GACtCgtC,GAA4BrrB,EAAM3hB,MAG7B6O,EAQT,SAASm+B,GACPrrB,EACA3hB,GAEA,IAAMqrC,EAAQzG,GAAa5kC,GAC3B,GAAIqrC,EAAO,CAUT,IANA,IAAMU,EAAY,GAIdpzB,EAAkB,GAClBs0B,GAAY,EACPj+C,EAAI,EAAGA,EAAIq8C,EAAMn8C,OAAQF,IAChC,GAAmB,IAAfq8C,EAAMr8C,GAAG03B,aAEN,GAAmB,IAAf2kB,EAAMr8C,GAAG03B,OAClB,YACEumB,IAAaj+C,EAAI,EACjB,mDAEFi+C,EAAWj+C,EAEXq8C,EAAMr8C,GAAG03B,OAAM,EACf2kB,EAAMr8C,GAAGu7C,YAAc,WAevB,GAbA,YACiB,IAAfc,EAAMr8C,GAAG03B,OACT,0CAGF2kB,EAAMr8C,GAAGs7C,YACT3xB,EAASA,EAAOsH,OACd8C,GACEpB,EAAK4lB,gBACL8D,EAAMr8C,GAAGw7C,gBACT,IAGAa,EAAMr8C,GAAGu1B,WAAY,CAEvBwnB,EAAUt6C,KACR45C,EAAMr8C,GAAGu1B,WAAWx0B,KAAK,KAAM,IAAIK,MAAM,QAAQ,EAFb,QAO1B,IAAd68C,EAEFpI,GAAa7kC,OAAMvE,GAGnB4vC,EAAMn8C,OAAS+9C,EAAW,EAI5BzhB,GACE7J,EAAKkkB,YACLT,GAAYplC,GACZ2Y,GAEF,IAAS3pB,EAAI,EAAGA,EAAI+8C,EAAU78C,OAAQF,IACpCgF,EAAe+3C,EAAU/8C,K,ICh8C3Bk+C,G,cCjCF,WAAoBC,EAAqBtxC,GAArB,KAAAsxC,QAAqB,KAAAtxC,QAyG3C,OAvGE,YAAAuxC,OAAA,SAAO7oB,GACL,YAAiB,sBAAuB,EAAG,EAAGuf,UAAU50C,QACxD,YAAiB,sBAAuB,EAAGq1B,GAAY,GACvD,IAAMqa,EAAW,IAAI,IAMrB,OALAsK,GACEn8C,KAAKogD,MACLpgD,KAAK8O,MACL+iC,EAASyO,aAAa9oB,IAEjBqa,EAASS,SAGlB,YAAA/xC,OAAA,SAAOi3B,GACL,YAAiB,sBAAuB,EAAG,EAAGuf,UAAU50C,QACxD4N,GAAqB,sBAAuB/P,KAAK8O,OACjD,YAAiB,sBAAuB,EAAG0oB,GAAY,GACvD,IAAMqa,EAAW,IAAI,IAOrB,OANAuK,GACEp8C,KAAKogD,MACLpgD,KAAK8O,MACL,KACA+iC,EAASyO,aAAa9oB,IAEjBqa,EAASS,SAGlB,YAAAzyC,IAAA,SAAIE,EAAgBy3B,GAClB,YAAiB,mBAAoB,EAAG,EAAGuf,UAAU50C,QACrD4N,GAAqB,mBAAoB/P,KAAK8O,OAC9CR,GAAwB,mBAAoB,EAAGvO,EAAOC,KAAK8O,OAAO,GAClE,YAAiB,mBAAoB,EAAG0oB,GAAY,GACpD,IAAMqa,EAAW,IAAI,IAOrB,OANAuK,GACEp8C,KAAKogD,MACLpgD,KAAK8O,MACL/O,EACA8xC,EAASyO,aAAa9oB,IAEjBqa,EAASS,SAGlB,YAAAiO,gBAAA,SACExgD,EACAsO,EACAmpB,GAEA,YAAiB,+BAAgC,EAAG,EAAGuf,UAAU50C,QACjE4N,GAAqB,+BAAgC/P,KAAK8O,OAC1DR,GACE,+BACA,EACAvO,EACAC,KAAK8O,OACL,GAEFW,GAAiB,+BAAgC,EAAGpB,GAAU,GAC9D,YAAiB,+BAAgC,EAAGmpB,GAAY,GAEhE,IAAMqa,EAAW,IAAI,IAQrB,OAPAwK,GACEr8C,KAAKogD,MACLpgD,KAAK8O,MACL/O,EACAsO,EACAwjC,EAASyO,aAAa9oB,IAEjBqa,EAASS,SAGlB,YAAA3wC,OAAA,SACE6+C,EACAhpB,GAIA,GAFA,YAAiB,sBAAuB,EAAG,EAAGuf,UAAU50C,QACxD4N,GAAqB,sBAAuB/P,KAAK8O,OAC7CzM,MAAMC,QAAQk+C,GAAgB,CAEhC,IADA,IAAMC,EAA6C,GAC1Cx+C,EAAI,EAAGA,EAAIu+C,EAAcr+C,SAAUF,EAC1Cw+C,EAAiB,GAAKx+C,GAAKu+C,EAAcv+C,GAE3Cu+C,EAAgBC,EAChBn9C,EACE,gOAIJ8L,GACE,sBACA,EACAoxC,EACAxgD,KAAK8O,OACL,GAEF,YAAiB,sBAAuB,EAAG0oB,GAAY,GACvD,IAAMqa,EAAW,IAAI,IAOrB,OANAyK,GACEt8C,KAAKogD,MACLpgD,KAAK8O,MACL0xC,EACA3O,EAASyO,aAAa9oB,IAEjBqa,EAASS,SAEpB,E,GC1HA,cAIE,WAAmBoO,EAA2B3C,GAA3B,KAAA2C,YAA2B,KAAA3C,WAQhD,OAJE,YAAA9G,OAAA,WAEE,OADA,YAAiB,2BAA4B,EAAG,EAAGF,UAAU50C,QACtD,CAAEu+C,UAAW1gD,KAAK0gD,UAAW3C,SAAU/9C,KAAK+9C,SAAS9G,WAEhE,EAZA,GC0BA,cAOE,WACStnC,EACA+iB,EACAqrB,EACA5xB,GAHA,KAAAxc,YACA,KAAA+iB,oBACA,KAAAqrB,WACA,KAAA5xB,WAyCX,OAnCE,YAAAkS,QAAA,WACE,IAAM4gB,EAAMj/C,KAAK+9C,SAASvjB,SAC1B,MAAuB,UAAnBx6B,KAAK2P,UACAsvC,EAAIh3C,KAEJg3C,EAAI0B,YAAY14C,MAO3B,YAAA24C,aAAA,WACE,OAAO5gD,KAAK2P,WAMd,YAAAqvB,eAAA,WACE,OAAOh/B,KAAK0yB,kBAAkBsM,eAAeh/B,OAM/C,YAAAS,SAAA,WACE,OACET,KAAKq+B,UAAU59B,WACf,IACAT,KAAK2P,UACL,IACA,YAAU3P,KAAK+9C,SAAS/G,cAG9B,EApDA,GAsDA,cACE,WACStkB,EACAvvB,EACA8E,GAFA,KAAAyqB,oBACA,KAAAvvB,QACA,KAAA8E,OA8BX,OAxBE,YAAAo2B,QAAA,WACE,OAAOr+B,KAAKiI,MAMd,YAAA24C,aAAA,WACE,MAAO,UAMT,YAAA5hB,eAAA,WACE,OAAOh/B,KAAK0yB,kBAAkBsM,eAAeh/B,OAM/C,YAAAS,SAAA,WACE,OAAOT,KAAKiI,KAAKxH,WAAa,WAElC,EAlCA,GCpCA,cACE,WACUogD,EACAC,EACAC,GAFA,KAAAF,YACA,KAAAC,kBACA,KAAAC,WA8EZ,OAxEE,YAAAz0B,WAAA,SAAW3c,GACT,MAAqB,UAAdA,GAMT,YAAA4c,YAAA,SAAY9J,EAAgB9W,GAC1B,IAAMqG,EAAQrG,EAAM8f,iBAAiBnJ,WACrC,OAAO,IAAI0+B,GACT,QACAhhD,KACA,IAAIq3C,GAAa50B,EAAOjB,aAAc7V,EAAM6uB,SAAUxoB,KAO1D,YAAAgtB,eAAA,SAAeF,GACb,IAAMmiB,EAAMjhD,KAAK+gD,SACjB,GAAiC,WAA7BjiB,EAAU8hB,eAA6B,CACzC,YACE5gD,KAAK8gD,gBACL,gEAEF,IAAM,EAAW9gD,KAAK8gD,gBACtB,OAAO,WAEL,EAASI,KAAKD,EAAMniB,EAA0B37B,QAGhD,IAAM,EAAKnD,KAAK6gD,UAChB,OAAO,WACL,EAAGK,KAAKD,EAAMniB,EAAwBif,YAQ5C,YAAAjrB,kBAAA,SAAkB3vB,EAAc8E,GAC9B,OAAIjI,KAAK8gD,gBACA,IAAIK,GAAYnhD,KAAMmD,EAAO8E,GAE7B,MAOX,YAAAkmB,QAAA,SAAQtkB,GACN,OAAMA,aAAiBu3C,KAEXv3C,EAAMg3C,YAAc7gD,KAAK6gD,WAKjCh3C,EAAMg3C,YAAc7gD,KAAK6gD,WAAah3C,EAAMk3C,WAAa/gD,KAAK+gD,WAQpE,YAAA9tB,eAAA,WACE,OAA0B,OAAnBjzB,KAAK6gD,WAEhB,EAlFA,GA0FA,cACE,WACUQ,EAGAP,EACAC,GAJA,KAAAM,aAGA,KAAAP,kBACA,KAAAC,WAiHZ,OA3GE,YAAAz0B,WAAA,SAAW3c,GACT,IAAI2xC,EACY,mBAAd3xC,EAAiC,cAAgBA,EAGnD,OAFA2xC,EACmB,qBAAjBA,EAAsC,gBAAkBA,EACnD,YAASthD,KAAKqhD,WAAYC,IAMnC,YAAAxuB,kBAAA,SAAkB3vB,EAAc8E,GAC9B,OAAIjI,KAAK8gD,gBACA,IAAIK,GAAYnhD,KAAMmD,EAAO8E,GAE7B,MAOX,YAAAskB,YAAA,SAAY9J,EAAgB9W,GAC1B,YAA2B,MAApB8W,EAAOpR,UAAmB,yCACjC,IAAM4tC,EAAMtzC,EAAM6uB,SAASxrB,MAAMyT,EAAOpR,WAClCW,EAAQrG,EAAM8f,iBAAiBnJ,WACrC,OAAO,IAAI0+B,GACTv+B,EAAO3W,KACP9L,KACA,IAAIq3C,GAAa50B,EAAOjB,aAAcy9B,EAAKjtC,GAC3CyQ,EAAO0J,WAOX,YAAA6S,eAAA,SAAeF,GACb,IAAMmiB,EAAMjhD,KAAK+gD,SACjB,GAAiC,WAA7BjiB,EAAU8hB,eAA6B,CACzC,YACE5gD,KAAK8gD,gBACL,gEAEF,IAAM,EAAW9gD,KAAK8gD,gBACtB,OAAO,WAEL,EAASI,KAAKD,EAAMniB,EAA0B37B,QAGhD,IAAM,EAAKnD,KAAKqhD,WAAYviB,EAAwBnvB,WACpD,OAAO,WACL,EAAGuxC,KACDD,EACCniB,EAAwBif,SACxBjf,EAAwB3S,YASjC,YAAAgC,QAAA,SAAQtkB,GAAR,WACE,GAAIA,aAAiB03C,EAAwB,CAC3C,IAAKvhD,KAAKqhD,aAAex3C,EAAMw3C,WAC7B,OAAO,EACF,GAAIrhD,KAAK+gD,WAAal3C,EAAMk3C,SAAU,CAC3C,IAAMS,EAAYllC,OAAO9X,KAAKqF,EAAMw3C,YAC9BI,EAAWnlC,OAAO9X,KAAKxE,KAAKqhD,YAC5BK,EAAaF,EAAUr/C,OAE7B,GAAIu/C,IADcD,EAASt/C,OACG,CAK5B,GAAmB,IAAfu/C,EAAkB,CACpB,IAAMC,EAAWH,EAAU,GACrBI,EAAUH,EAAS,GACzB,OACEG,IAAYD,KACV93C,EAAMw3C,WAAWM,KAChB3hD,KAAKqhD,WAAWO,IACjB/3C,EAAMw3C,WAAWM,KAAc3hD,KAAKqhD,WAAWO,IAInD,OAAOH,EAASjD,OACd,SAAA7uC,GACE,OAAA9F,EAAMw3C,WAAW1xC,KAAe,EAAK0xC,WAAW1xC,QAO5D,OAAO,GAMT,YAAAsjB,eAAA,WACE,OAA2B,OAApBjzB,KAAKqhD,YAEhB,EAvHA,G,cJ9DE,WACSzsB,EACA3sB,EACC45C,EACAC,GAHD,KAAAltB,OACA,KAAA3sB,OACC,KAAA45C,eACA,KAAAC,iBAkkBZ,OA/kBE,sBAAW,2BAAsB,C,IAIjC,WAEE,OADA,YAAO3B,GAAwB,oCACxBA,I,IANT,SAAkCzvC,GAChCyvC,GAAyBzvC,G,gCAkBZ,EAAAqxC,wBAAf,SAAuCh2C,GACrC,IAAIi2C,EAAY,KACZC,EAAU,KAQd,GAPIl2C,EAAOsiB,aACT2zB,EAAYj2C,EAAOyiB,sBAEjBziB,EAAO0iB,WACTwzB,EAAUl2C,EAAO6iB,oBAGf7iB,EAAOuW,aAAe9K,GAAW,CACnC,IAAM0qC,EACJ,mGAEIC,EACJ,oIAEF,GAAIp2C,EAAOsiB,WAAY,CAErB,GADkBtiB,EAAOwiB,sBACP3qB,EAChB,MAAM,IAAIP,MAAM6+C,GACX,GAAyB,kBAAdF,EAChB,MAAM,IAAI3+C,MAAM8+C,GAGpB,GAAIp2C,EAAO0iB,SAAU,CAEnB,GADgB1iB,EAAO4iB,oBACP9qB,EACd,MAAM,IAAIR,MAAM6+C,GACX,GAAuB,kBAAZD,EAChB,MAAM,IAAI5+C,MAAM8+C,SAGf,GAAIp2C,EAAOuW,aAAevL,IAC/B,GACgB,MAAbirC,IAAsB5zC,GAAgB4zC,IAC3B,MAAXC,IAAoB7zC,GAAgB6zC,GAErC,MAAM,IAAI5+C,MACR,gMAWJ,GALA,YACE0I,EAAOuW,qBAAsBmP,IAC3B1lB,EAAOuW,aAAe8K,GACxB,uBAGc,MAAb40B,GAA0C,kBAAdA,GACjB,MAAXC,GAAsC,kBAAZA,EAE3B,MAAM,IAAI5+C,MACR,qHAUO,EAAA++C,eAAf,SAA8Br2C,GAC5B,GACEA,EAAOsiB,YACPtiB,EAAO0iB,UACP1iB,EAAOykB,aACNzkB,EAAO0kB,mBAER,MAAM,IAAIptB,MACR,kIASE,YAAAg/C,+BAAR,SAAuC9zC,GACrC,IAA4B,IAAxBvO,KAAK8hD,eACP,MAAM,IAAIz+C,MAAMkL,EAAS,gDAI7B,YAAAkd,eAAA,WACE,OAAOzrB,KAAK6hD,cAGd,YAAArnB,OAAA,WAKE,OAJA,YAAiB,YAAa,EAAG,EAAGuc,UAAU50C,QAIvC,IAAImgD,EAAMnC,uBAAuBngD,KAAK40B,KAAM50B,KAAKiI,OAG1D,YAAAs3B,GAAA,SACE5vB,EACA0vB,EACAkjB,EACAjjB,GAEA,YAAiB,WAAY,EAAG,EAAGyX,UAAU50C,QAC7CuN,GAAkB,WAAY,EAAGC,GAAW,GAC5C,YAAiB,WAAY,EAAG0vB,GAAU,GAE1C,IAAMmjB,EAAMF,EAAMG,yBAChB,WACAF,EACAjjB,GAGF,GAAkB,UAAd3vB,EACF3P,KAAK0iD,aAAarjB,EAAUmjB,EAAInC,OAAQmC,EAAIljB,aACvC,CACL,IAAM0f,EAA8C,GACpDA,EAAUrvC,GAAa0vB,EACvBr/B,KAAK2iD,aAAa3D,EAAWwD,EAAInC,OAAQmC,EAAIljB,SAE/C,OAAOD,GAGC,YAAAqjB,aAAV,SACErjB,EACAujB,EACAtjB,GAEA,IAAMujB,EAAY,IAAIzB,GACpB/hB,EACAujB,GAAkB,KAClBtjB,GAAW,MAEbid,GAA6Bv8C,KAAK40B,KAAM50B,KAAM6iD,IAGhD,YAAAF,aAAA,SACE3D,EACA4D,EACAtjB,GAEA,IAAMujB,EAAY,IAAItB,GACpBvC,EACA4D,EACAtjB,GAEFid,GAA6Bv8C,KAAK40B,KAAM50B,KAAM6iD,IAGhD,YAAAnjB,IAAA,SACE/vB,EACA0vB,EACAC,GAEA,YAAiB,YAAa,EAAG,EAAGyX,UAAU50C,QAC9CuN,GAAkB,YAAa,EAAGC,GAAW,GAC7C,YAAiB,YAAa,EAAG0vB,GAAU,GAC3C,YAAsB,YAAa,EAAGC,GAAS,GAE/C,IAAIujB,EAAsC,KACtC7D,EAAqD,KACzD,GAAkB,UAAdrvC,EAAuB,CACzB,IAAMstC,EAAgB5d,GAAY,KAClCwjB,EAAY,IAAIzB,GACdnE,EACA,KACA3d,GAAW,WAEJ3vB,IACL0vB,KACF2f,EAAY,IACFrvC,GAAa0vB,GAEzBwjB,EAAY,IAAItB,GAAuBvC,EAAW,KAAM1f,GAAW,OAErEkd,GAAgCx8C,KAAK40B,KAAM50B,KAAM6iD,IAMnD,YAAAziD,IAAA,WACE,O,SDqKyBw0B,EAAYjpB,GAEvC,IAAMm3C,EAAS7pB,GAAuBrE,EAAK4lB,gBAAiB7uC,GAC5D,OAAc,MAAVm3C,EACKC,QAAQ5Q,QACb,IAAIkF,GACFyL,EACAn3C,EAAM6uB,SACN7uB,EAAM8f,iBAAiBnJ,aAItBsS,EAAK0I,QAAQl9B,IAAIuL,GAAO0pC,MAC7B,SAAA7G,GACE,IAAMv7B,EAAO5C,GAAam+B,GACpB5iB,EAASuK,GACbvB,EAAK4lB,gBACL7uC,EAAM1D,KACNgL,GAGF,OADAqrB,GAA4B1J,EAAKkkB,YAAantC,EAAM1D,KAAM2jB,GACnDm3B,QAAQ5Q,QACb,IAAIkF,GACFpkC,EACAtH,EAAM6uB,SACN7uB,EAAM8f,iBAAiBnJ,gBAI7B,SAAA0gC,GAEE,OADA7H,GAAQvmB,EAAM,iBAAmB,YAAUjpB,GAAS,YAAcq3C,GAC3DD,QAAQ3Q,OAAO,IAAI/uC,MAAM2/C,OCpM3BC,CAAajjD,KAAK40B,KAAM50B,OAMjC,YAAAkjD,KAAA,SACEvzC,EACAwzC,EACAC,EACA9jB,GAJF,WAME,YAAiB,aAAc,EAAG,EAAGyX,UAAU50C,QAC/CuN,GAAkB,aAAc,EAAGC,GAAW,GAC9C,YAAiB,aAAc,EAAGwzC,GAAc,GAEhD,IAAMX,EAAMF,EAAMG,yBAChB,aACAW,EACA9jB,GAOE+jB,GAAY,EACVxR,EAAW,IAAI,IAGrBA,EAASS,QAAQgR,OAAM,eAEvB,IAAMC,EAAe,SAAfA,EAAgBxF,GAGhBsF,IACFA,GAAY,EACZ,EAAK3jB,IAAI/vB,EAAW4zC,GAEhBJ,GACFA,EAAangD,KAAKw/C,EAAIljB,QAAtB6jB,CAA+BpF,GAEjClM,EAASM,QAAQ4L,KAgBrB,OAZA/9C,KAAKu/B,GACH5vB,EACA4zC,GACY,SAAAP,GACV,EAAKtjB,IAAI/vB,EAAW4zC,GAEhBf,EAAInC,QACNmC,EAAInC,OAAOr9C,KAAKw/C,EAAIljB,QAApBkjB,CAA6BQ,GAE/BnR,EAASO,OAAO4Q,MAGbnR,EAASS,SAMlB,YAAAkR,aAAA,SAAaC,GAEX,GADA,YAAiB,qBAAsB,EAAG,EAAG1M,UAAU50C,QAEpC,kBAAVshD,GACP79C,KAAKI,MAAMy9C,KAAWA,GACtBA,GAAS,EAET,MAAM,IAAIpgD,MACR,kEAGJ,GAAIrD,KAAK6hD,aAAarxB,WACpB,MAAM,IAAIntB,MACR,uGAKJ,OAAO,IAAIi/C,EACTtiD,KAAK40B,KACL50B,KAAKiI,KACL4oB,GAAwB7wB,KAAK6hD,aAAc4B,GAC3CzjD,KAAK8hD,iBAOT,YAAA4B,YAAA,SAAYD,GAEV,GADA,YAAiB,oBAAqB,EAAG,EAAG1M,UAAU50C,QAEnC,kBAAVshD,GACP79C,KAAKI,MAAMy9C,KAAWA,GACtBA,GAAS,EAET,MAAM,IAAIpgD,MACR,iEAGJ,GAAIrD,KAAK6hD,aAAarxB,WACpB,MAAM,IAAIntB,MACR,sGAKJ,OAAO,IAAIi/C,EACTtiD,KAAK40B,KACL50B,KAAKiI,KACL+oB,GAAuBhxB,KAAK6hD,aAAc4B,GAC1CzjD,KAAK8hD,iBAOT,YAAA6B,aAAA,SAAa17C,GAEX,GADA,YAAiB,qBAAsB,EAAG,EAAG8uC,UAAU50C,QAC1C,SAAT8F,EACF,MAAM,IAAI5E,MACR,2EAEG,GAAa,cAAT4E,EACT,MAAM,IAAI5E,MACR,qFAEG,GAAa,WAAT4E,EACT,MAAM,IAAI5E,MACR,+EAGJwM,GAAmB,qBAAsB,EAAG5H,GAAM,GAClDjI,KAAKqiD,+BAA+B,sBACpC,IAAMuB,EAAa,IAAI77C,EAAKE,GAC5B,GAAIe,EAAY46C,GACd,MAAM,IAAIvgD,MACR,qFAGJ,IAAM2O,EAAQ,IAAIyf,GAAUmyB,GACtB7yB,EAAYM,GAAmBrxB,KAAK6hD,aAAc7vC,GAGxD,OAFAswC,EAAMP,wBAAwBhxB,GAEvB,IAAIuxB,EAAMtiD,KAAK40B,KAAM50B,KAAKiI,KAAM8oB,GAA8B,IAMvE,YAAA8yB,WAAA,WACE,YAAiB,mBAAoB,EAAG,EAAG9M,UAAU50C,QACrDnC,KAAKqiD,+BAA+B,oBACpC,IAAMtxB,EAAYM,GAAmBrxB,KAAK6hD,aAAcrqC,IAExD,OADA8qC,EAAMP,wBAAwBhxB,GACvB,IAAIuxB,EAAMtiD,KAAK40B,KAAM50B,KAAKiI,KAAM8oB,GAA8B,IAMvE,YAAA+yB,gBAAA,WACE,YAAiB,wBAAyB,EAAG,EAAG/M,UAAU50C,QAC1DnC,KAAKqiD,+BAA+B,yBACpC,IAAMtxB,EAAYM,GAAmBrxB,KAAK6hD,aAAc9qC,IAExD,OADAurC,EAAMP,wBAAwBhxB,GACvB,IAAIuxB,EAAMtiD,KAAK40B,KAAM50B,KAAKiI,KAAM8oB,GAA8B,IAMvE,YAAAgzB,aAAA,WACE,YAAiB,qBAAsB,EAAG,EAAGhN,UAAU50C,QACvDnC,KAAKqiD,+BAA+B,sBACpC,IAAMtxB,EAAYM,GAAmBrxB,KAAK6hD,aAAcz0B,IAExD,OADAk1B,EAAMP,wBAAwBhxB,GACvB,IAAIuxB,EAAMtiD,KAAK40B,KAAM50B,KAAKiI,KAAM8oB,GAA8B,IAGvE,YAAAizB,QAAA,SACEjkD,EACAS,QADA,IAAAT,MAAA,MAGA,YAAiB,gBAAiB,EAAG,EAAGg3C,UAAU50C,QAClDmM,GAAwB,gBAAiB,EAAGvO,EAAOC,KAAKiI,MAAM,GAC9D2H,GAAY,gBAAiB,EAAGpP,GAAM,GAEtC,IAAMuwB,EAAYE,GAAmBjxB,KAAK6hD,aAAc9hD,EAAOS,GAG/D,GAFA8hD,EAAMF,eAAerxB,GACrBuxB,EAAMP,wBAAwBhxB,GAC1B/wB,KAAK6hD,aAAaxzB,WACpB,MAAM,IAAIhrB,MACR,0FAWJ,YALcqL,IAAV3O,IACFA,EAAQ,KACRS,EAAO,MAGF,IAAI8hD,EAAMtiD,KAAK40B,KAAM50B,KAAKiI,KAAM8oB,EAAW/wB,KAAK8hD,iBAGzD,YAAAmC,WAAA,SACElkD,EACAS,QADA,IAAAT,MAAA,MAGA,YAAiB,mBAAoB,EAAG,EAAGg3C,UAAU50C,QACrDmM,GAAwB,mBAAoB,EAAGvO,EAAOC,KAAKiI,MAAM,GACjE2H,GAAY,mBAAoB,EAAGpP,GAAM,GAEzC,IAAMuwB,EAAYG,GAAsBlxB,KAAK6hD,aAAc9hD,EAAOS,GAGlE,GAFA8hD,EAAMF,eAAerxB,GACrBuxB,EAAMP,wBAAwBhxB,GAC1B/wB,KAAK6hD,aAAaxzB,WACpB,MAAM,IAAIhrB,MACR,yGAKJ,OAAO,IAAIi/C,EAAMtiD,KAAK40B,KAAM50B,KAAKiI,KAAM8oB,EAAW/wB,KAAK8hD,iBAGzD,YAAAoC,MAAA,SACEnkD,EACAS,QADA,IAAAT,MAAA,MAGA,YAAiB,cAAe,EAAG,EAAGg3C,UAAU50C,QAChDmM,GAAwB,cAAe,EAAGvO,EAAOC,KAAKiI,MAAM,GAC5D2H,GAAY,cAAe,EAAGpP,GAAM,GAEpC,IAAMuwB,EAAYI,GAAiBnxB,KAAK6hD,aAAc9hD,EAAOS,GAG7D,GAFA8hD,EAAMF,eAAerxB,GACrBuxB,EAAMP,wBAAwBhxB,GAC1B/wB,KAAK6hD,aAAapzB,SACpB,MAAM,IAAIprB,MACR,gGAKJ,OAAO,IAAIi/C,EAAMtiD,KAAK40B,KAAM50B,KAAKiI,KAAM8oB,EAAW/wB,KAAK8hD,iBAGzD,YAAAqC,UAAA,SACEpkD,EACAS,QADA,IAAAT,MAAA,MAGA,YAAiB,kBAAmB,EAAG,EAAGg3C,UAAU50C,QACpDmM,GAAwB,kBAAmB,EAAGvO,EAAOC,KAAKiI,MAAM,GAChE2H,GAAY,kBAAmB,EAAGpP,GAAM,GAExC,IAAMuwB,EAAYK,GAAqBpxB,KAAK6hD,aAAc9hD,EAAOS,GAGjE,GAFA8hD,EAAMF,eAAerxB,GACrBuxB,EAAMP,wBAAwBhxB,GAC1B/wB,KAAK6hD,aAAapzB,SACpB,MAAM,IAAIprB,MACR,oGAKJ,OAAO,IAAIi/C,EAAMtiD,KAAK40B,KAAM50B,KAAKiI,KAAM8oB,EAAW/wB,KAAK8hD,iBAOzD,YAAAsC,QAAA,SAAQrkD,EAAyCS,GAI/C,GAHA,YAAiB,gBAAiB,EAAG,EAAGu2C,UAAU50C,QAClDmM,GAAwB,gBAAiB,EAAGvO,EAAOC,KAAKiI,MAAM,GAC9D2H,GAAY,gBAAiB,EAAGpP,GAAM,GAClCR,KAAK6hD,aAAaxzB,WACpB,MAAM,IAAIhrB,MACR,qGAIJ,GAAIrD,KAAK6hD,aAAapzB,SACpB,MAAM,IAAIprB,MACR,gGAIJ,OAAOrD,KAAKgkD,QAAQjkD,EAAOS,GAAM0jD,MAAMnkD,EAAOS,IAMhD,YAAAC,SAAA,WAGE,OAFA,YAAiB,iBAAkB,EAAG,EAAGs2C,UAAU50C,QAE5CnC,KAAK40B,KAAKn0B,WAAa4H,EAAuBrI,KAAKiI,OAK5D,YAAAgvC,OAAA,WAGE,OADA,YAAiB,eAAgB,EAAG,EAAGF,UAAU50C,QAC1CnC,KAAKS,YAMd,YAAAwxC,YAAA,WACE,O,S3B/MF3kC,GAEA,IAAMhJ,EAA+B,GAerC,GAdIgJ,EAAYqiB,YACdrrB,EAAG,GACDgJ,EAAY4iB,iBACV5iB,EAAYsiB,gBACdtrB,EAAG,GACDgJ,EAAY6iB,kBAGd7iB,EAAYwiB,UACdxrB,EAAG,GAA4CgJ,EAAY8iB,eACvD9iB,EAAYyiB,cACdzrB,EAAG,GAA2CgJ,EAAY+iB,gBAG1D/iB,EAAYoiB,UAAW,CACzBprB,EAAG,EAAkCgJ,EAAYwhB,OACjD,IAAIu1B,EAAW/2C,EAAY2iB,UACV,KAAbo0B,IAEAA,EADE/2C,EAAY2hB,iBACH,IAEA,KAGf3qB,EAAG,GAAsC+/C,EAM3C,OAHI/2C,EAAYuU,SAAW9K,KACzBzS,EAAG,EAAkCgJ,EAAYuU,OAAOphB,YAEnD6D,E2B8KEggD,CAA0BtkD,KAAK6hD,eAGxC,YAAA/tB,gBAAA,WACE,IAAMxvB,EAAMtE,KAAKiyC,cACX1wC,EAAKgD,EAAkBD,GAC7B,MAAc,OAAP/C,EAAc,UAAYA,GAMnC,YAAAgjD,QAAA,SAAQ16C,GAEN,GADA,YAAiB,gBAAiB,EAAG,EAAGktC,UAAU50C,UAC5C0H,aAAiBy4C,GAAQ,CAC7B,IAAMn/C,EACJ,uFACF,MAAM,IAAIE,MAAMF,GAGlB,IAAMqhD,EAAWxkD,KAAK40B,OAAS/qB,EAAM+qB,KAC/B6vB,EAAW76C,GAAW5J,KAAKiI,KAAM4B,EAAM5B,MACvCy8C,EACJ1kD,KAAK8zB,oBAAsBjqB,EAAMiqB,kBAEnC,OAAO0wB,GAAYC,GAAYC,GAQlB,EAAAjC,yBAAf,SACEl0C,EACAo2C,EACArlB,GAEA,IAAMkjB,EAGF,CAAEnC,OAAQ,KAAM/gB,QAAS,MAC7B,GAAIqlB,GAAmBrlB,EACrBkjB,EAAInC,OAASsE,EACb,YAAiBp2C,EAAQ,EAAGi0C,EAAInC,QAAQ,GAExCmC,EAAIljB,QAAUA,EACd,YAAsB/wB,EAAQ,EAAGi0C,EAAIljB,SAAS,QACzC,GAAIqlB,EAET,GAA+B,kBAApBA,GAAoD,OAApBA,EAEzCnC,EAAIljB,QAAUqlB,MACT,IAA+B,oBAApBA,EAGhB,MAAM,IAAIthD,MACR,YAAYkL,EAAQ,GAAG,GACrB,0DAJJi0C,EAAInC,OAASsE,EAQjB,OAAOnC,GAGT,sBAAI,kBAAG,C,IAAP,WACE,OAAOxiD,KAAKw6B,U,gCAEhB,E,kBK7lBE,WAAY5F,EAAY3sB,GACtB,KAAM2sB,aAAgBgwB,IACpB,MAAM,IAAIvhD,MACR,6D,OAKJ,YAAMuxB,EAAM3sB,EAAM,IAAI2oB,IAAe,IAAM,KA4R/C,OA/S+B,iBAuB7B,YAAA2mB,OAAA,WAGE,OAFA,YAAiB,gBAAiB,EAAG,EAAGR,UAAU50C,QAE9C6G,EAAYhJ,KAAKiI,MACZ,KAEAG,EAAYpI,KAAKiI,OAI5B,YAAA+G,MAAA,SAAMnH,GAYJ,OAXA,YAAiB,kBAAmB,EAAG,EAAGkvC,UAAU50C,QAC1B,kBAAf0F,EACTA,EAAaU,OAAOV,GACTA,aAAsBE,IACD,OAA5BC,EAAahI,KAAKiI,MACpB6H,GAAuB,kBAAmB,EAAGjI,GAAY,GAEzDgI,GAAmB,kBAAmB,EAAGhI,GAAY,IAIlD,IAAIs1C,EAAUn9C,KAAK40B,KAAM/rB,EAAU7I,KAAKiI,KAAMJ,KAIvD,YAAA84C,UAAA,WACE,YAAiB,mBAAoB,EAAG,EAAG5J,UAAU50C,QAErD,IAAM0iD,EAAal8C,EAAW3I,KAAKiI,MACnC,OAAsB,OAAf48C,EAAsB,KAAO,IAAI1H,EAAUn9C,KAAK40B,KAAMiwB,IAI/D,YAAAC,QAAA,WACE,YAAiB,iBAAkB,EAAG,EAAG/N,UAAU50C,QAGnD,IADA,IAAI88C,EAAiBj/C,KACM,OAApBi/C,EAAI0B,aACT1B,EAAMA,EAAI0B,YAEZ,OAAO1B,GAIT,YAAA8F,aAAA,WACE,OAAOpI,GAAgB38C,KAAK40B,OAG9B,YAAA/0B,IAAA,SACE67C,EACAlkB,GAEA,YAAiB,gBAAiB,EAAG,EAAGuf,UAAU50C,QAClD4N,GAAqB,gBAAiB/P,KAAKiI,MAC3CqG,GAAwB,gBAAiB,EAAGotC,EAAQ17C,KAAKiI,MAAM,GAC/D,YAAiB,gBAAiB,EAAGuvB,GAAY,GAEjD,IAAMqa,EAAW,IAAI,IAQrB,OAPA4J,GACEz7C,KAAK40B,KACL50B,KAAKiI,KACLyzC,EACc,KACd7J,EAASyO,aAAa9oB,IAEjBqa,EAASS,SAGlB,YAAA3wC,OAAA,SACE6+C,EACAhpB,GAKA,GAHA,YAAiB,mBAAoB,EAAG,EAAGuf,UAAU50C,QACrD4N,GAAqB,mBAAoB/P,KAAKiI,MAE1C5F,MAAMC,QAAQk+C,GAAgB,CAEhC,IADA,IAAMC,EAA6C,GAC1Cx+C,EAAI,EAAGA,EAAIu+C,EAAcr+C,SAAUF,EAC1Cw+C,EAAiB,GAAKx+C,GAAKu+C,EAAcv+C,GAE3Cu+C,EAAgBC,EAChBn9C,EACE,wMAMJ8L,GACE,mBACA,EACAoxC,EACAxgD,KAAKiI,MACL,GAEF,YAAiB,mBAAoB,EAAGuvB,GAAY,GACpD,IAAMqa,EAAW,IAAI,IAOrB,OANAkK,GACE/7C,KAAK40B,KACL50B,KAAKiI,KACLu4C,EACA3O,EAASyO,aAAa9oB,IAEjBqa,EAASS,SAGlB,YAAAiO,gBAAA,SACE7E,EACA1gC,EACAwc,GAcA,GAZA,YAAiB,4BAA6B,EAAG,EAAGuf,UAAU50C,QAC9D4N,GAAqB,4BAA6B/P,KAAKiI,MACvDqG,GACE,4BACA,EACAotC,EACA17C,KAAKiI,MACL,GAEFwH,GAAiB,4BAA6B,EAAGuL,GAAa,GAC9D,YAAiB,4BAA6B,EAAGwc,GAAY,GAEvC,YAAlBx3B,KAAKu3C,UAA4C,UAAlBv3C,KAAKu3C,SACtC,KACE,qCACAv3C,KAAKu3C,SACL,0BAIJ,IAAM1F,EAAW,IAAI,IAQrB,OAPA4J,GACEz7C,KAAK40B,KACL50B,KAAKiI,KACLyzC,EACA1gC,EACA62B,EAASyO,aAAa9oB,IAEjBqa,EAASS,SAGlB,YAAA/xC,OAAA,SAAOi3B,GAKL,OAJA,YAAiB,mBAAoB,EAAG,EAAGuf,UAAU50C,QACrD4N,GAAqB,mBAAoB/P,KAAKiI,MAC9C,YAAiB,mBAAoB,EAAGuvB,GAAY,GAE7Cx3B,KAAKH,IAAI,KAAM23B,IAGxB,YAAA4lB,YAAA,SACEL,EACAvlB,EACAwlB,GAUA,GARA,YAAiB,wBAAyB,EAAG,EAAGjG,UAAU50C,QAC1D4N,GAAqB,wBAAyB/P,KAAKiI,MACnD,YAAiB,wBAAyB,EAAG80C,GAAmB,GAChE,YAAiB,wBAAyB,EAAGvlB,GAAY,GAGzDtnB,GAAgB,wBAAyB,EAAG8sC,GAAc,GAEpC,YAAlBh9C,KAAKu3C,UAA4C,UAAlBv3C,KAAKu3C,SACtC,KACE,iCACAv3C,KAAKu3C,SACL,+BAIiB7oC,IAAjBsuC,IACFA,GAAe,GAGjB,IAAMnL,EAAW,IAAI,IACK,oBAAfra,GACTqa,EAASS,QAAQgR,OAAM,eAGzB,IAAM0B,EAAkB,SACtB7hD,EACAu9C,EACA3C,GAEI56C,EACF0uC,EAASO,OAAOjvC,GAEhB0uC,EAASM,QAAQ,IAAI8S,GAAkBvE,EAAW3C,IAE1B,oBAAfvmB,GACTA,EAAWr0B,EAAOu9C,EAAW3C,IAWjC,OARAjB,GACE98C,KAAK40B,KACL50B,KAAKiI,KACL80C,EACAiI,EACAhI,GAGKnL,EAASS,SAGlB,YAAA4S,YAAA,SACE72C,EACAmpB,GAEA,YAAiB,wBAAyB,EAAG,EAAGuf,UAAU50C,QAC1D4N,GAAqB,wBAAyB/P,KAAKiI,MACnDwH,GAAiB,wBAAyB,EAAGpB,GAAU,GACvD,YAAiB,wBAAyB,EAAGmpB,GAAY,GAEzD,IAAMqa,EAAW,IAAI,IAQrB,OAPA4J,GACEz7C,KAAK40B,KACL/rB,EAAU7I,KAAKiI,KAAM,aACrBoG,EACA,KACAwjC,EAASyO,aAAa9oB,IAEjBqa,EAASS,SAGlB,YAAA5tC,KAAA,SAAK3E,EAAiBy3B,GACpB,YAAiB,iBAAkB,EAAG,EAAGuf,UAAU50C,QACnD4N,GAAqB,iBAAkB/P,KAAKiI,MAC5CqG,GAAwB,iBAAkB,EAAGvO,EAAOC,KAAKiI,MAAM,GAC/D,YAAiB,iBAAkB,EAAGuvB,GAAY,GAElD,IAWI8a,EAXE1lB,EAAM6tB,GAAez6C,KAAK40B,MAC1Bp0B,EAAOisB,GAAWG,GAOlBu4B,EAAmBnlD,KAAKgP,MAAMxO,GAC9B4kD,EAAUplD,KAAKgP,MAAMxO,GAgB3B,OAZE8xC,EADW,MAATvyC,EACQolD,EAAiBtlD,IAAIE,EAAOy3B,GAAY6d,MAAK,WAAM,OAAA+P,KAEnDrC,QAAQ5Q,QAAQiT,GAG5BD,EAAiB9P,KAAO/C,EAAQ+C,KAAKryC,KAAKsvC,GAC1C6S,EAAiB7B,MAAQhR,EAAQ+C,KAAKryC,KAAKsvC,OAAS5jC,GAE1B,oBAAf8oB,GACT8a,EAAQgR,OAAM,eAGT6B,GAGT,YAAAnjB,aAAA,WAEE,OADAjyB,GAAqB,yBAA0B/P,KAAKiI,MAC7C,IAAIo9C,GAAarlD,KAAK40B,KAAM50B,KAAKiI,OAG1C,sBAAI,uBAAQ,C,IAAZ,WACE,OAAOjI,KAAK+kD,gB,gCAGd,sBAAI,kBAAG,C,IAAP,WACE,OAAO/kD,KAAKu3C,U,gCAGd,sBAAI,qBAAM,C,IAAV,WACE,OAAOv3C,KAAK2gD,a,gCAGd,sBAAI,mBAAI,C,IAAR,WACE,OAAO3gD,KAAK8kD,W,gCAEhB,E,CA/S+BxC,IAuT/BA,GAAMnC,uBAAyBhD,G,S9B/S7BzsC,GAEA,aACGghB,GACD,mDAEFA,GAAuBhhB,E8B0SzB40C,CAAiCnI,IC9UjC,kBAEE,WACUoI,EACAC,GAFV,WACU,KAAAD,OACA,KAAAC,gBAHF,KAAAC,MAAqC,KAK3CzlD,KAAKylD,MAAQD,EAAcE,aAAa,CAAEj3C,UAAU,IAC/CzO,KAAKylD,OACRD,EAAcplD,MAAMi1C,MAAK,SAAAsQ,GAAQ,OAAC,EAAKF,MAAQE,KAgErD,OA5DE,YAAAvQ,SAAA,SAASD,GACP,OAAKn1C,KAAKylD,MAIHzlD,KAAKylD,MAAMrQ,SAASD,GAAcmO,OAAM,SAAAngD,GAG7C,OAAIA,GAAwB,+BAAfA,EAAMg3B,MACjBp3B,EAAI,kEACG,MAEAggD,QAAQ3Q,OAAOjvC,MAVjB4/C,QAAQ5Q,QAAQ,OAe3B,YAAA2H,uBAAA,SAAuB5iB,GAGjBl3B,KAAKylD,MACPzlD,KAAKylD,MAAMG,qBAAqB1uB,IAEhChwB,YAAW,WAAM,OAAAgwB,EAAS,QAAO,GACjCl3B,KAAKwlD,cACFplD,MACAi1C,MAAK,SAAAsQ,GAAQ,OAAAA,EAAKC,qBAAqB1uB,QAI9C,YAAA2uB,0BAAA,SAA0B3uB,GACxBl3B,KAAKwlD,cACFplD,MACAi1C,MAAK,SAAAsQ,GAAQ,OAAAA,EAAKG,wBAAwB5uB,OAG/C,YAAA4e,sBAAA,WACE,IAAIiQ,EACF,0DACA/lD,KAAKulD,KAAK/kD,KADV,iFAIE,eAAgBR,KAAKulD,KAAKzc,QAC5Bid,GACE,uJAGO,mBAAoB/lD,KAAKulD,KAAKzc,QACvCid,GACE,2JAIFA,GACE,kKAIJziD,EAAKyiD,IAET,EAxEA,GA2EA,4BAkBA,OAfE,YAAA3Q,SAAA,SAASD,GACP,OAAO4N,QAAQ5Q,QAAQ,CACrBmD,YAAa0Q,EAA2BC,uBAI5C,YAAAnM,uBAAA,SAAuB5iB,GAGrBA,EAAS8uB,EAA2BC,sBAGtC,YAAAJ,0BAAA,SAA0B3uB,KAE1B,YAAA4e,sBAAA,aAhBe,EAAAmQ,oBAAsB,QAiBvC,EAlBA,GCxDMC,GAIF,GAKAC,IAAgB,E,SA4BJC,GACdxN,EACAyN,EACAhf,EACAt8B,GAEA,IAAIu7C,EAA4Bjf,GAAOuR,EAAI9P,QAAQyd,iBACrC73C,IAAV43C,IACG1N,EAAI9P,QAAQ0d,WACfpjD,EACE,kHAKJL,EAAI,kCAAmC61C,EAAI9P,QAAQ0d,WACnDF,EAAW1N,EAAI9P,QAAQ0d,UAAS,gCAGlC,IAGIC,EAHAn6C,EAAYF,GAAck6C,EAAOv7C,GACjCc,EAAWS,EAAUT,SAIrB66C,OAAqCh4C,EAClB,qBAAZs6B,IACT0d,EAAiB,qNAGfA,GACFD,GAAa,EACbH,EAAQ,UAAUI,EAAc,OAAO76C,EAAShB,UAEhDgB,GADAS,EAAYF,GAAck6C,EAAOv7C,IACZc,UAErB46C,GAAcn6C,EAAUT,SAASjB,OAGnC,IAAM+7C,EACJ57C,GAAa07C,EACT,IAAIT,GACJ,IAAIY,GAA0BhO,EAAKyN,GAYzC,OAVAr2C,GAAY,gCAAiC,EAAG1D,GAC3CtD,EAAYsD,EAAUrE,OACzB7E,EACE,4FAOGu5C,G,SA2BP9wC,EACA+sC,EACA+N,GAEA,IAAIE,EAAW,YAAQX,GAAOtN,EAAIp4C,MAE7BqmD,IACHA,EAAW,GACXX,GAAMtN,EAAIp4C,MAAQqmD,GAGpB,IAAIjyB,EAAO,YAAQiyB,EAAUh7C,EAASJ,eAClCmpB,GACFxxB,EACE,2HAMJ,OAHAwxB,EAAO,IAAIgwB,GAAK/4C,EAAUs6C,GAAevN,EAAK+N,GAC9CE,EAASh7C,EAASJ,eAAiBmpB,EAE5BA,EAjDMkyB,CAAsBj7C,EAAU+sC,EAAK+N,I,kBCtFlD,WAAoBI,GAApB,WAAoB,KAAAA,gBArBZ,KAAAC,kBAA4B,EA6BpC,KAAAC,SAAW,CACTrkC,OAAQ,0D,4CACN5iB,KAAKknD,cAAc,U,SDqFatyB,GACpC,IAAMiyB,EAAW,YAAQX,GAAOtxB,EAAKgkB,IAAIp4C,MAEpCqmD,GAAY,YAAQA,EAAUjyB,EAAK90B,OAAS80B,GAC/CxxB,EACE,YAAYwxB,EAAKgkB,IAAIp4C,KAAI,IAAIo0B,EAAK+W,UAAS,+BAG/C8Q,GAAc7nB,UACPiyB,EAASjyB,EAAK90B,KC7FjBqnD,CAAsBnnD,KAAKogD,OAC3BpgD,KAAK+mD,cAAgB,KACrB/mD,KAAKonD,cAAgB,K,YAZjBL,aAAyBnC,IAC7BxhD,EACE,wEAiIR,OAnHE,sBAAY,oBAAK,C,IAAjB,WAKE,OAJKpD,KAAKgnD,mBACR5N,GAAUp5C,KAAK+mD,eACf/mD,KAAKgnD,kBAAmB,GAEnBhnD,KAAK+mD,e,gCAGd,sBAAI,oBAAK,C,IAAT,WAKE,OAJK/mD,KAAKonD,gBACRpnD,KAAKonD,cAAgB,IAAIjK,GAAUn9C,KAAKogD,MAAOt4C,MAG1C9H,KAAKonD,e,gCAGd,sBAAI,kBAAG,C,IAAP,WACE,OAAOpnD,KAAKogD,MAAMxH,K,gCAWpB,YAAAyO,YAAA,SAAY18C,EAAckC,GACxB7M,KAAKknD,cAAc,eACflnD,KAAKgnD,iBACP5jD,EACE,0E,SDpCNwxB,EACAjqB,EACAkC,GAEA+nB,EAAK+W,UAAY,IAAIh/B,GAChBhC,EAAI,IAAIkC,GACG,EACd+nB,EAAK+W,UAAU9gC,UACf+pB,EAAK+W,UAAU7gC,cACf8pB,EAAK+W,UAAU5gC,UACf6pB,EAAK+W,UAAU3gC,eACf4pB,EAAK+W,UAAU1gC,+BAGb2pB,EAAK+W,UAAU5gC,YACjB6pB,EAAKmb,mBAAqB,IAAIiW,IC2B9BsB,CAAiCtnD,KAAK+mD,cAAep8C,EAAMkC,IAe7D,YAAAoyC,IAAA,SAAIh3C,GAIF,OAHAjI,KAAKknD,cAAc,OACnB,YAAiB,eAAgB,EAAG,EAAGnQ,UAAU50C,QAE7C8F,aAAgBk1C,GACXn9C,KAAKunD,WAAWt/C,EAAKxH,iBAGdiO,IAATzG,EAAqBjI,KAAKwV,MAAMxG,MAAM/G,GAAQjI,KAAKwV,OAS5D,YAAA+xC,WAAA,SAAWlgB,GAET,IAAMmgB,EAAU,sBAChBxnD,KAAKknD,cAAcM,GACnB,YAAiBA,EAAS,EAAG,EAAGzQ,UAAU50C,QAC1C,IAAMslD,EAAYr7C,GAAci7B,EAAKrnC,KAAKogD,MAAMzU,UAAU5gC,WAC1DiF,GAAYw3C,EAAS,EAAGC,GAExB,IAAM57C,EAAW47C,EAAU57C,SAgB3B,OAdG7L,KAAKogD,MAAMzU,UAAUpgC,gBACtBM,EAASlB,OAAS3K,KAAKogD,MAAMzU,UAAUhhC,MAEvCvH,EACEokD,6DAGE37C,EAASlB,KACT,iBACA3K,KAAKogD,MAAMzU,UAAUhhC,KACrB,KAIC3K,KAAKi/C,IAAIwI,EAAUx/C,KAAKxH,aAGzB,YAAAymD,cAAR,SAAsBM,GACO,OAAvBxnD,KAAK+mD,eACP3jD,EAAM,eAAiBokD,EAAU,4BAKrC,YAAAE,UAAA,WACE,YAAiB,qBAAsB,EAAG,EAAG3Q,UAAU50C,QACvDnC,KAAKknD,cAAc,aACnBzK,GAAcz8C,KAAKogD,QAGrB,YAAAuH,SAAA,WACE,YAAiB,oBAAqB,EAAG,EAAG5Q,UAAU50C,QACtDnC,KAAKknD,cAAc,YACnBxK,GAAW18C,KAAKogD,QAlJF,EAAAwH,YAAc,CAC5BC,UAAW,CACT,MAAO,aAETC,UAAW,SAACzsB,GACV,MAAO,CACL,MAAO,CACL,UAAaA,MA6IvB,E,yDC/IgC,WAC9BsN,GAAoBzE,gBACpBF,GAAsBD,c,gBAGO,WAC7BC,GAAsBE,iB,sBAIa,WACnC,OAAOyE,GAAmB,e,yBAGY,SACtCsW,EACA5f,GAGC4f,EAAIrqB,KAAKukB,sBAA8BtI,uBAAyBxR,G,MAG9C,SAAU4f,EAAgB8I,I,SVytBrBnzB,EAAYmzB,GACpC,QADoC,IAAAA,OAAA,GACb,qBAAZhS,QAAX,CAIA,IAAIpY,EACAoqB,GACGnzB,EAAK4I,iBACR5I,EAAK4I,eAAiB,IAAIC,GAAc7I,EAAKgN,SAE/CjE,EAAQ/I,EAAK4I,eAAep9B,OAE5Bu9B,EAAQ/I,EAAKgN,OAAOxhC,MAGtB,IAAM4nD,EAAc1rC,OAAO9X,KAAKm5B,GAAOsqB,QACrC,SAACC,EAAeC,GACd,OAAAviD,KAAKuE,IAAIg+C,EAAahmD,OAAQ+lD,KAChC,GAGFhjD,EAAKy4B,GAAO,SAACP,EAAcr9B,GAGzB,IAFA,IAAIqoD,EAAahrB,EAERn7B,EAAIm7B,EAAKj7B,OAAQF,EAAI+lD,EAAc,EAAG/lD,IAC7CmmD,GAAc,IAEhBrS,QAAQhzC,IAAIqlD,EAAaroD,OUnvB3BsoD,CAAUpJ,EAAIrqB,KAAMmzB,I,sBAGe,SAAU9I,EAAgBqJ,I,SVovBrB1zB,EAAY0zB,G,IhBlvBpDC,EACAnrB,EgBkvBAxI,EAAKgN,OAAOlF,iBAAiB4rB,GhBnvB7BC,EgBovByB3zB,EAAKmlB,ehBnvB9B3c,EgBmvB8CkrB,EhBjvB9CC,EAAShrB,eAAeH,IAAQ,E0BJhCorB,CAA0BvJ,EAAIrqB,KAAM0zB,I,gBAGP,SAAUrJ,GACvC,OAAOA,EAAIrqB,KAAKikB,iB,oBAGiB,SACjCoG,EACA5f,GAEA,O,SV8TAzK,EACAyK,GAEAzK,EAAKqkB,6BAA+B5Z,EUjU7BopB,CAAwBxJ,EAAIrqB,KAAMyK,I,wBAYT,G,IAChCuZ,EAAG,MACHvR,EAAG,MACHe,EAAO,UACPsgB,EAAc,iBACd79C,EAAS,YACT,IAAAE,iBAAS,IAAG,GAAK,EAYjBo9B,GAAcC,GAMd,IAAMie,EAAe,IAAI,IACvB,gBACA,IAAI,IAAmB,wBAMzB,OAJAA,EAAasC,aACX,IAAI,IAAU,iBAAiB,WAAM,OAAAD,IAAc,YAG9C,CACLE,SAAUxC,GACRxN,EACAyN,EACAhf,EACAt8B,GAEFF,UAAS,MChHAg+C,GAAiB5Y,GAG7BA,GAAqB6Y,UAAkBC,aAAe,SACrDlhD,EACA2vB,GAEAx3B,KAAKutC,YAAY,IAAK,CAAEwE,EAAGlqC,GAAc2vB,IAI1CyY,GAAqB6Y,UAAkBE,KAAO,SAC7CxlD,EACAylD,GAEAjpD,KAAKutC,YAAY,OAAQ,CAAE1G,EAAGrjC,GAAQylD,IAIjC,IAAMC,GAAqB3T,GAoBrB4T,GAAmBx8C,G,oFAlBN,SAAUy8C,GAClC,IAAMC,EAASpZ,GAAqB6Y,UAAUzZ,IAY9C,OAXAY,GAAqB6Y,UAAUzZ,IAAM,SACnCxnC,EACArE,EACAg0B,EACAplB,QAEa1D,IAAT0D,IACFA,EAAOg3C,KAETC,EAAOnI,KAAKlhD,KAAM6H,EAAYrE,EAAMg0B,EAAYplB,IAE3C,WACL69B,GAAqB6Y,UAAUzZ,IAAMga,I,oCAMV,SAAU19C,GACvC,OAAOA,EAAMmoB,mB,gBAMgB,SAAU,I,SH+HEw1B,GACzCnD,GAAgBmD,EG/HhBC,CAA2B,MCpCvB3B,GAAc/K,GAAS+K,a,SAEIgB,GAE/BzgB,GAAcygB,EAAS1gB,aAGvB,IAAMr9B,EAAa+9C,EAAgC3B,SAASuC,kBAC1D,IAAI,IACF,YACA,SAAC3G,EAAW,G,IAAsBxb,EAAG,qBAMnC,OAAO+e,GAHKvD,EAAU4G,YAAY,OAAO/D,eACpB7C,EAAU4G,YAAY,iBAEUpiB,OAAK34B,KAC3D,UAGAg7C,gBAEC,CACEvM,UAAS,GACTmF,MAAK,GACLzF,SAAQ,GACRxF,aAAY,GACZ30C,cAAa,EACbukD,SAAQ,GACRW,YAAW,GACX+B,YAAW,KAGdC,sBAAqB,IAG1BhB,EAASiB,gB,8BAEL,gBACFC,EAAOC,QAAUl/C,GAIrBm/C,CAAiB,O","file":"static/js/6.72ab42d5.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key The key to save the value under\n   * @param value The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @return The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @return Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../../api/Query';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\nimport { SessionStorage } from '../storage/storage';\nimport { Logger, LogLevel } from '@firebase/logger';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str The string to hash\n * @return {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ A flag to turn on logging, or a custom logger\n * @param persistent Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @return {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str The string\n * @param segsize The maximum number of chars in the string.\n * @return The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj The object or array to iterate over\n * @param fn The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback Callback function.\n * @param context Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport const errorForServerCode = function (code: string, query: Query): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query.path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n};\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback Optional onComplete callback.\n * @param varArgs Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @return {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn Function to run.\n * @param time Milliseconds to wait before running.\n * @return The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from './util';\nimport { stringLength } from '@firebase/util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @return The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @return True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @return The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @return -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @return true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @return True if this path is a parent (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path Initial Path.\n   * @param errorPrefix_ Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { PersistentStorage } from './storage/storage';\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host Hostname portion of the url for the repo\n   * @param secure Whether or not this repo is accessed over ssl\n   * @param namespace The namespace represented by the repo\n   * @param webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin Whether this instance uses Admin SDK credentials\n   * @param persistenceKey Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../Path';\nimport { RepoInfo } from '../../RepoInfo';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @return key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      nodeAdmin,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (\n  dataURL: string\n): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\nimport { Indexable } from '../util/misc';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\nimport { each, isInvalidJSONNumber } from './util';\n\nimport { RepoInfo } from '../RepoInfo';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  argumentNumber: number,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  validateFirebaseData(\n    errorPrefixFxn(fnName, argumentNumber, optional),\n    data,\n    path\n  );\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  argumentNumber: number,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, argumentNumber, optional);\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  argumentNumber: number,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateEventType = function (\n  fnName: string,\n  argumentNumber: number,\n  eventType: string,\n  optional: boolean\n) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n          '\"child_changed\", or \"child_moved\".'\n      );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentNumber: number,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\nexport const validatePathString = function (\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\n\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  argumentNumber: number,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, false) +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateCredential = function (\n  fnName: string,\n  argumentNumber: number,\n  cred: unknown,\n  optional: boolean\n) {\n  if (optional && cred === undefined) {\n    return;\n  }\n  if (!(typeof cred === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid credential (a string).'\n    );\n  }\n};\n\nexport const validateBoolean = function (\n  fnName: string,\n  argumentNumber: number,\n  bool: unknown,\n  optional: boolean\n) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) + 'must be a boolean.'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentNumber: number,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentNumber: number,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentNumber: number,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\nimport { priorityHashText, validatePriorityNode } from './snap';\nimport { Node } from './Node';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { Index } from './indexes/Index';\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Indexable } from '../util/misc';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @return The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(): Node {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    /**\n     * @inheritDoc\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { LeafNode } from '../LeafNode';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @return String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node Node to iterate.\n   * @param isReverse_ Whether or not to iterate in reverse\n   * @param resultGenerator_\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = ({ key: node.key, value: node.value } as unknown) as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return ({ key: node.key, value: node.value } as unknown) as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key Key associated with this node.\n   * @param value Value associated with this node.\n   * @param color Whether this node is red.\n   * @param left Left child.\n   * @param right Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key New key for the node, or null.\n   * @param value New value for the node, or null.\n   * @param color New color for the node, or null.\n   * @param left New left child for the node, or null.\n   * @param right New right child for the node, or null.\n   * @return The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @return The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @return True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @return The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @return The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @return The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @return The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key Key to insert.\n   * @param value Value to insert.\n   * @param comparator Comparator.\n   * @return New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @return New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key The key of the item to remove.\n   * @param comparator Comparator.\n   * @return New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @return Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @return New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @return New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @return New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @return New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @return New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @return Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @return True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @return The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key Key to be added.\n   * @param value Value to be added.\n   * @param comparator Comparator.\n   * @return New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key The key to remove.\n   * @param comparator Comparator.\n   * @return New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @return The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @return True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @return Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ Key comparator.\n   * @param root_ (Optional) Root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key Key to be added.\n   * @param value Value to be added.\n   * @return New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key The key to remove.\n   * @return New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key The key to look up.\n   * @return The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key The key to find the predecessor of\n   * @return The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @return True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @return The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @return The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @return The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @return The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @return Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @return The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode New priority to set for the node.\n   * @return Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName The name of the child to retrieve.\n   * @return The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path The path of the child to retrieve.\n   * @return The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName The name of the child to find the predecessor of.\n   * @param childNode The node to find the predecessor of.\n   * @param index The index to use to determine the predecessor\n   * @return The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName The name of the child to update.\n   * @param newChildNode The new child node\n   * @return The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path The path of the child to update.\n   * @param newChildNode The new child node, which may be an empty node\n   * @return The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @return True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @return The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @return The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat True for export format (also wire protocol format).\n   * @return Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @return hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other Another node\n   * @return -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @return Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @return This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node, NamedNode } from '../Node';\nimport { MIN_NAME } from '../../util/util';\nimport { Comparator } from '../../util/SortedMap';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @return A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @return True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @return a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @return a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @return String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { Node, NamedNode } from '../Node';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildrenNode } from '../ChildrenNode';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @return String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\nimport { buildChildSet } from './childSet';\n\nimport { NamedNode, Node } from './Node';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { Index } from './indexes/Index';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ List of children of this node..\n   * @param priorityNode_ The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[(key as unknown) as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList Unsorted list of children\n * @param cmp The comparison method to be used\n * @param keyFn An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          (namedNode.node as unknown) as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { contains, assert } from '@firebase/util';\n\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { IndexMap } from './IndexMap';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\nimport { Indexable } from '../util/misc';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json JSON to create a node for.\n * @param priority Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\nimport { ImmutableTree } from '../util/ImmutableTree';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap } from './SortedMap';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\n   * on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath The remainder of the path\n   * @param predicate The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(\n            pathPopFront(relativePath),\n            predicate\n          );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @return The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath Path to set value at.\n   * @param toSet Value to set.\n   * @return Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath Path to value to remove.\n   * @return Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath Path to get value for.\n   * @return Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath Path to replace subtree for.\n   * @param newTree New tree.\n   * @return Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\nimport { Node } from '../snap/Node';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { assert } from '@firebase/util';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Node } from '../snap/Node';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './CacheNode';\nimport { Node } from '../snap/Node';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type The event type */\n  type: ChangeType;\n  /** @param snapshotNode The data */\n  snapshotNode: Node;\n  /** @param childName The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { Node } from '../../snap/Node';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\nimport { assert, assertionError } from '@firebase/util';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { NamedNode, Node } from './snap/Node';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { assert } from '@firebase/util';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite The CompoundWrite to remove.\n * @param path The path at which a write and all deeper writes should be removed\n * @return The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite The CompoundWrite to check.\n * @param path The path to check for\n * @return Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite The CompoundWrite to get the node from.\n * @param path The path to get a complete write\n * @return The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite The CompoundWrite to get children from.\n * @return A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @return Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node The node to apply this CompoundWrite to\n * @return The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { NamedNode, Node } from './snap/Node';\nimport { CacheNode } from './view/CacheNode';\nimport { Index } from './snap/indexes/Index';\nimport { each } from './util/util';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @return true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude An optional set to be excluded\n * @param includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude Optional writes to exclude.\n * @param includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './CacheNode';\nimport { NamedNode, Node } from '../snap/Node';\nimport { Index } from '../snap/indexes/Index';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport { Change, changeValue } from './Change';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\nimport { Overwrite } from '../operation/Overwrite';\nimport { Merge } from '../operation/Merge';\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Node } from '../snap/Node';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(\n            writesCache,\n            changePath,\n            oldEventSnap.getNode(),\n            serverNode\n          );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === undefined;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../snap/Node';\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { assertionError } from '@firebase/util';\nimport { Query } from '../../api/Query';\nimport { Index } from '../snap/indexes/Index';\nimport { EventRegistration } from './EventRegistration';\nimport { Event } from './Event';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: Query) {\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { NamedNode, Node } from '../Node';\nimport { nameCompare } from '../../util/util';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nexport class ValueIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @return String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { Index } from './Index';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { NodeFilter } from './NodeFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RangedFilter } from './RangedFilter';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { assert } from '@firebase/util';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { IndexedFilter } from './IndexedFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\nimport { MIN_NAME, MAX_NAME } from '../util/util';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { RangedFilter } from './filter/RangedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { Index } from '../snap/indexes/Index';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false;\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false;\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_ = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @return True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @return True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue as string);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let childKey: string;\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue as string);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @return query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[REST_QUERY_CONSTANTS.START_AT] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[REST_QUERY_CONSTANTS.START_AT] +=\n        ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[REST_QUERY_CONSTANTS.END_AT] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[REST_QUERY_CONSTANTS.END_AT] +=\n        ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { assert } from '@firebase/util';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Query } from '../../api/Query';\nimport { EventRegistration } from './EventRegistration';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\nimport { CancelEvent, Event } from './Event';\nimport { queryParamsGetNodeFilter } from './QueryParams';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: Query, initialViewCache: ViewCache) {\n    const params = this.query_.getQueryParams();\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): Query {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query.getQueryParams().loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration If null, remove all callbacks.\n * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\n * @return Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query.path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './view/CacheNode';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { assert } from '@firebase/util';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { Operation } from './operation/Operation';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { Event } from './view/Event';\nimport { ReferenceConstructor } from '../api/Reference';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @return Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: Query,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query.queryIdentifier();\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache Complete server cache, if we have it.\n * @param serverCacheComplete\n * @return Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: Query,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query.queryIdentifier())) {\n    syncPoint.views.set(query.queryIdentifier(), view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration If null, remove all callbacks.\n * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\n * @return removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: Query,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: Query[]; events: Event[] } {\n  const queryId = query.queryIdentifier();\n  const removed: Query[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query.getQueryParams().loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query.getQueryParams().loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query.repo, query.path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query.getQueryParams().loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path The path to the desired complete snapshot\n * @return A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: Query\n): View | null {\n  const params = query.getQueryParams();\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query.queryIdentifier();\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: Query\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query.getQueryParams().loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { each, errorForServerCode } from './util/util';\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport {\n  newWriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\nimport { Query } from '../api/Query';\nimport { Node } from './snap/Node';\nimport { Event } from './view/Event';\nimport { EventRegistration } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * @typedef {{\n *   startListening: function(\n *     !Query,\n *     ?number,\n *     function():string,\n *     function(!string, *):!Array.<!Event>\n *   ):!Array.<!Event>,\n *\n *   stopListening: function(!Query, ?number)\n * }}\n */\nexport interface ListenProvider {\n  startListening(\n    query: Query,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: Query, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_ = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @return Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @return Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert True if the given write failed and needs to be reverted\n * @return Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @return Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @return Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @return Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @return Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration If null, all callbacks are removed.\n * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\n * @return Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: Query,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query.path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query.queryIdentifier() === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n    const removingDefault =\n      -1 !==\n      removed.findIndex(query => {\n        return query.getQueryParams().loadsAllData();\n      });\n    const covered = syncTree.syncPointTree_.findOnPath(\n      path,\n      (relativePath, parentSyncPoint) =>\n        syncPointHasCompleteView(parentSyncPoint)\n    );\n\n    if (removingDefault && !covered) {\n      const subtree = syncTree.syncPointTree_.subtree(path);\n      // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n        // Ok, we've collected all the listens we need. Set them up.\n        for (let i = 0; i < newViews.length; ++i) {\n          const view = newViews[i],\n            newQuery = view.query;\n          const listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(\n            syncTreeQueryForListening_(newQuery),\n            syncTreeTagForQuery_(syncTree, newQuery),\n            listener.hashFn,\n            listener.onComplete\n          );\n        }\n      } else {\n        // There's nothing below us, so nothing we need to start listening on\n      }\n    }\n    // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        const defaultTag: number | null = null;\n        syncTree.listenProvider_.stopListening(\n          syncTreeQueryForListening_(query),\n          defaultTag\n        );\n      } else {\n        removed.forEach((queryToRemove: Query) => {\n          const tagToRemove = syncTree.queryToTagMap.get(\n            syncTreeMakeQueryKey_(queryToRemove)\n          );\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(queryToRemove),\n            tagToRemove\n          );\n        });\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @return Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @return Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @return Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: Query,\n  eventRegistration: EventRegistration\n): Event[] {\n  const path = query.path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path The path to the data we want\n * @param writeIdsToExclude A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: Query\n): Node | null {\n  const path = query.path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query.path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query.path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query.path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery_(syncTree: SyncTree, query: Query): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: Query): string {\n  return query.path.toString() + '$' + query.queryIdentifier();\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(\n  queryKey: string\n): { queryId: string; path: Path } {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @return The normalized query\n */\nfunction syncTreeQueryForListening_(query: Query): Query {\n  if (\n    query.getQueryParams().loadsAllData() &&\n    !query.getQueryParams().isDefault()\n  ) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return query.getRef()!;\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: Query[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery.getQueryParams().loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @return This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: Query,\n  view: View\n): Event[] {\n  const path = query.path;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<Query[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: Query[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: Query[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery_(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path, pathChild } from './Path';\nimport { LeafNode } from '../snap/LeafNode';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\nimport { Indexable } from './misc';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path path to which write is relative\n * @param node new data written at path\n * @param syncTree current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path Path to look up snapshot for.\n * @return The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path Path to look up snapshot for.\n * @param data The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path Path to look up snapshot for.\n * @return True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath Path to look up node for.\n * @param func The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Path } from './util/Path';\nimport { Node } from './snap/Node';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { RepoInfo } from '../RepoInfo';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { each } from '../util/util';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\nimport { setTimeoutNonBlocking, each } from '../util/util';\nimport { StatsListener } from './StatsListener';\nimport { StatsCollection } from './StatsCollection';\nimport { ServerActions } from '../ServerActions';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  /**\n   * @param collection\n   * @param server_\n   */\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path The path to raise events for.\n * @param eventDataList The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath The path to raise events for.\n * @param eventDataList The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @return {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from './EventEmitter';\nimport { assert } from '@firebase/util';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport {\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { Transport } from './Transport';\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param transportSessionId Optional transportSessionid if we are reconnecting for an existing\n   *                                         transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has already created a\n   *                                     connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) =>\n      repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n  }\n\n  /**\n   * @param onMessage Callback when messages arrive\n   * @param onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[\n          FIREBASE_LONGPOLL_CALLBACK_ID_PARAM\n        ] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[\n        FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier\n      ] = onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = (newScript as any).readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = (newScript as any).onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n// SDK_VERSION should be set before any database instance is created\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Transport } from './Transport';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { SDK_VERSION } from '../core/version';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId Optional lastSessionId if there was a previous connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo The info for the websocket endpoint.\n   * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId Optional lastSessionId if there was a previous connection\n   * @return connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage Callback when messages arrive\n   * @param onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options: { [k: string]: object } = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @return Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { WebSocketConnection } from './WebSocketConnection';\nimport { warn } from '../core/util/util';\nimport { TransportConstructor } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param repoInfo Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @return The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @return The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { PROTOCOL_VERSION } from './Constants';\nimport { TransportManager } from './TransportManager';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Transport, TransportConstructor } from './Transport';\nimport { Indexable } from '../core/util/misc';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      undefined,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../api/Query';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: Query, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: Query): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  isEmpty,\n  safeGet,\n  stringify,\n  assert,\n  isAdmin,\n  isValidFormat,\n  isMobileCordova,\n  isReactNative,\n  isNodeSdk,\n  Deferred\n} from '@firebase/util';\n\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { Path } from './util/Path';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { OnlineMonitor } from './util/OnlineMonitor';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { ServerActions } from './ServerActions';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { Query } from '../api/Query';\nimport { SDK_VERSION } from './version';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_AUTH_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: Query;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  /** Map<path, Map<queryId, ListenSpec>> */\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ Data about the namespace we are connecting to\n   * @param applicationId_ The Firebase App ID for this project\n   * @param onDataUpdate_ A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n    this.scheduleConnect_(0);\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: Query): Promise<string> {\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query.path.toString(),\n      q: query.queryObject()\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          this.onDataUpdate_(\n            request['p'],\n            payload,\n            /*isMerge*/ false,\n            /*tag*/ null\n          );\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (!this.connected_) {\n      setTimeout(() => {\n        const get = this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n        this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const queryId = query.queryIdentifier();\n    const pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: Query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query.getQueryParams().getIndex().toString() + '\"';\n        const indexPath = query.path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: Query, tag: number | null) {\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const self = this;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      // First fetch auth token, and establish connection after fetching the token was successful\n      this.authTokenProvider_\n        .getToken(forceRefresh)\n        .then(result => {\n          if (!canceled) {\n            log('getToken() completed. Creating connection.');\n            self.authToken_ = result && result.accessToken;\n            connection = new Connection(\n              connId,\n              self.repoInfo_,\n              self.applicationId_,\n              onDataMessage,\n              onReady,\n              onDisconnect,\n              /* onKill= */ reason => {\n                warn(reason + ' (' + self.repoInfo_.toString() + ')');\n                self.interrupt(SERVER_KILL_INTERRUPT_REASON);\n              },\n              lastSessionId\n            );\n          } else {\n            log('getToken() completed but was canceled');\n          }\n        })\n        .then(null, error => {\n          self.log_('Failed to get token: ' + error);\n          if (!canceled) {\n            if (this.repoInfo_.nodeAdmin) {\n              // This may be a critical error for the Admin Node.js SDK, so log a warning.\n              // But getToken() may also just have temporarily failed, so we still want to\n              // continue retrying.\n              warn(error);\n            }\n            closeFn();\n          }\n        });\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\nimport { logWrapper, warn } from './util/util';\n\nimport { ServerActions } from './ServerActions';\nimport { RepoInfo } from './RepoInfo';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { Query } from '../api/Query';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: Query, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query.getQueryParams().isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query.path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ Data about the namespace we are connecting to\n   * @param onDataUpdate_ A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query.path.toString();\n    this.log_(\n      'Listen called for ' + pathString + ' ' + query.queryIdentifier()\n    );\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query.getQueryParams()\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: Query, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: Query): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query.getQueryParams()\n    );\n\n    const pathString = query.path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    this.authTokenProvider_\n      .getToken(/*forceRefresh=*/ false)\n      .then(authTokenData => {\n        const authToken = authTokenData && authTokenData.accessToken;\n        if (authToken) {\n          queryStringParameters['auth'] = authToken;\n        }\n\n        const url =\n          (this.repoInfo_.secure ? 'https://' : 'http://') +\n          this.repoInfo_.host +\n          pathString +\n          '?' +\n          'ns=' +\n          this.repoInfo_.namespace +\n          querystring(queryStringParameters);\n\n        this.log_('Sending REST request for ' + url);\n        const xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = () => {\n          if (callback && xhr.readyState === 4) {\n            this.log_(\n              'REST Response for ' + url + ' received. status:',\n              xhr.status,\n              'response:',\n              xhr.responseText\n            );\n            let res = null;\n            if (xhr.status >= 200 && xhr.status < 300) {\n              try {\n                res = jsonEval(xhr.responseText);\n              } catch (e) {\n                warn(\n                  'Failed to parse JSON response for ' +\n                    url +\n                    ': ' +\n                    xhr.responseText\n                );\n              }\n              callback(null, res);\n            } else {\n              // 401 and 404 are expected.\n              if (xhr.status !== 401 && xhr.status !== 404) {\n                warn(\n                  'Got unsuccessful REST response for ' +\n                    url +\n                    ' Status: ' +\n                    xhr.status\n                );\n              }\n              callback(xhr.status);\n            }\n            callback = null;\n          }\n        };\n\n        xhr.open('GET', url, /*asynchronous=*/ true);\n        xhr.send();\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport { validatePathString } from '../core/util/validation';\nimport { Path } from '../core/util/Path';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { Reference } from './Reference';\nimport { Index } from '../core/snap/indexes/Index';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot {\n  /**\n   * @param node_ A SnapshotNode to wrap.\n   * @param ref_ The ref of the location this snapshot came from.\n   * @param index_ The iteration order for this snapshot\n   */\n  constructor(\n    private readonly node_: Node,\n    private readonly ref_: Reference,\n    private readonly index_: Index\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @return JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): unknown {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @return JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): unknown {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): unknown {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @return Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param childPathString Path to a child.\n   * @return DataSnapshot for child node.\n   */\n  child(childPathString: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    const childRef = this.ref_.child(childPath);\n    return new DataSnapshot(\n      this.node_.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param childPathString Path to a child.\n   * @return Whether the child exists.\n   */\n  hasChild(childPathString: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @return The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this.node_.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param action Callback function to be called\n   * for each child.\n   * @return True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (d: DataSnapshot) => boolean | void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 1, action, false);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this.node_ as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this.index_, (key, node) => {\n      return action(\n        new DataSnapshot(node, this.ref_.child(key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @return True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    } else {\n      return !this.node_.isEmpty();\n    }\n  }\n\n  get key() {\n    return this.ref_.getKey();\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @return The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n\n    return this.node_.numChildren();\n  }\n\n  /**\n   * @return The Firebase reference for the location this snapshot's data came\n   * from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n\n    return this.ref_;\n  }\n\n  get ref() {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\nimport { Path, pathGetFront, pathPopFront } from './Path';\n\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name Optional name of the node.\n   * @param parent Optional parent node.\n   * @param node Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj Path to look up.\n * @return Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @return The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @return Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @return Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action Action to be called for each child.\n * @param includeSelf Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf Whether to call action on this node as well.\n * @return true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @return The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName The name of the child to update.\n * @param child The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  newSparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration\n} from './SyncTree';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\n\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { Database } from '../api/Database';\nimport { DataSnapshot } from '../api/DataSnapshot';\nimport { ServerActions } from './ServerActions';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { Event } from './view/Event';\nimport { Node } from './snap/Node';\nimport { Indexable } from './util/misc';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Reference } from '../api/Reference';\nimport { FirebaseAppLike } from './RepoManager';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (a: Error | null, b: boolean, c: DataSnapshot | null) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n  __database: Database;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_ = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public app: FirebaseAppLike,\n    public authTokenProvider_: AuthTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @return The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(repo: Repo): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    const authOverride = repo.app.options['databaseAuthVariableOverride'];\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      repo.app.options.appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query.path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query.path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query.path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @return The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will try to\n * establish a connection and request the value for `query`. If\n * the client is not able to retrieve the query result, it reports\n * an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(repo: Repo, query: Query): Promise<DataSnapshot> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(\n      new DataSnapshot(\n        cached,\n        query.getRef(),\n        query.getQueryParams().getIndex()\n      )\n    );\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload as string);\n      const events = syncTreeApplyServerOverwrite(\n        repo.serverSyncTree_,\n        query.path,\n        node\n      );\n      eventQueueRaiseEventsAtPath(repo.eventQueue_, query.path, events);\n      return Promise.resolve(\n        new DataSnapshot(\n          node,\n          query.getRef(),\n          query.getQueryParams().getIndex()\n        )\n      );\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: Query,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query.path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query.path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: Query,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query.path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query.path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\nexport function repoGetDatabase(repo: Repo): Database {\n  return repo.__database || (repo.__database = new Database(repo));\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path Path at which to do transaction.\n * @param transactionUpdate Update callback.\n * @param onComplete Completion callback.\n * @param applyLocally Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Add a watch to make sure we get server updates.\n  const valueCallback = function () {};\n  const watchRef = new Reference(repo, path);\n  watchRef.on('value', valueCallback);\n  const unwatcher = function () {\n    watchRef.off('value', valueCallback);\n  };\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      // We just set the input snapshot, so this cast should be safe\n      const snapshot = new DataSnapshot(\n        transaction.currentInputSnapshot,\n        new Reference(repo, transaction.path),\n        PRIORITY_INDEX\n      );\n      transaction.onComplete(null, false, snapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path The location of the queue.\n * @param queue Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            const node = queue[i].currentOutputSnapshotResolved as Node;\n            const ref = new Reference(repo, queue[i].path);\n            const snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n            callbacks.push(\n              queue[i].onComplete.bind(null, null, true, snapshot)\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath The path in mergedData that changed.\n * @return The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue The queue of transactions to run.\n * @param path The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          const ref = new Reference(repo, queue[i].path);\n          // We set this field immediately, so it's safe to cast to an actual snapshot\n          const lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\n          const snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n        } else {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path The location to start at.\n * @return The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @return The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          const snapshot: DataSnapshot | null = null;\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, snapshot)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  Deferred,\n  errorPrefix,\n  validateArgCount,\n  validateCallback,\n  validateContextObject\n} from '@firebase/util';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { MAX_NAME, MIN_NAME, ObjectToUniqueKey } from '../core/util/util';\nimport {\n  Path,\n  pathEquals,\n  pathIsEmpty,\n  pathToUrlEncodedString\n} from '../core/util/Path';\nimport {\n  isValidPriority,\n  validateEventType,\n  validateFirebaseDataArg,\n  validateKey,\n  validatePathString\n} from '../core/util/validation';\n\nimport {\n  ChildEventRegistration,\n  EventRegistration,\n  ValueEventRegistration\n} from '../core/view/EventRegistration';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery\n} from '../core/Repo';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\nimport { Reference } from './Reference';\nimport { DataSnapshot } from './DataSnapshot';\n\nlet __referenceConstructor: new (repo: Repo, path: Path) => Query;\n\nexport interface SnapshotCallback {\n  (a: DataSnapshot, b?: string | null): unknown;\n}\n\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nexport class Query {\n  static set __referenceConstructor(val) {\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  constructor(\n    public repo: Repo,\n    public path: Path,\n    private queryParams_: QueryParams,\n    private orderByCalled_: boolean\n  ) {}\n\n  /**\n   * Validates start/end values for queries.\n   */\n  private static validateQueryEndpoints_(params: QueryParams) {\n    let startNode = null;\n    let endNode = null;\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n\n    if (params.getIndex() === KEY_INDEX) {\n      const tooManyArgsError =\n        'Query: When ordering by key, you may only pass one argument to ' +\n        'startAt(), endAt(), or equalTo().';\n      const wrongArgTypeError =\n        'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n        'endAt(), endBefore(), or equalTo() must be a string.';\n      if (params.hasStart()) {\n        const startName = params.getIndexStartName();\n        if (startName !== MIN_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n      if (params.hasEnd()) {\n        const endName = params.getIndexEndName();\n        if (endName !== MAX_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (\n        (startNode != null && !isValidPriority(startNode)) ||\n        (endNode != null && !isValidPriority(endNode))\n      ) {\n        throw new Error(\n          'Query: When ordering by priority, the first argument passed to startAt(), ' +\n            'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n            '(null, a number, or a string).'\n        );\n      }\n    } else {\n      assert(\n        params.getIndex() instanceof PathIndex ||\n          params.getIndex() === VALUE_INDEX,\n        'unknown index type.'\n      );\n      if (\n        (startNode != null && typeof startNode === 'object') ||\n        (endNode != null && typeof endNode === 'object')\n      ) {\n        throw new Error(\n          'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n            'equalTo() cannot be an object.'\n        );\n      }\n    }\n  }\n\n  /**\n   * Validates that limit* has been called with the correct combination of parameters\n   */\n  private static validateLimit_(params: QueryParams) {\n    if (\n      params.hasStart() &&\n      params.hasEnd() &&\n      params.hasLimit() &&\n      !params.hasAnchoredLimit()\n    ) {\n      throw new Error(\n        \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n          'limitToFirst() or limitToLast() instead.'\n      );\n    }\n  }\n\n  /**\n   * Validates that no other order by call has been made\n   */\n  private validateNoPreviousOrderByCall_(fnName: string) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  }\n\n  getQueryParams(): QueryParams {\n    return this.queryParams_;\n  }\n\n  getRef(): Reference {\n    validateArgCount('Query.ref', 0, 0, arguments.length);\n    // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n    return new Query.__referenceConstructor(this.repo, this.path) as Reference;\n  }\n\n  on(\n    eventType: string,\n    callback: SnapshotCallback,\n    cancelCallbackOrContext?: ((a: Error) => unknown) | object | null,\n    context?: object | null\n  ): SnapshotCallback {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    validateCallback('Query.on', 2, callback, false);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.on',\n      cancelCallbackOrContext,\n      context\n    );\n\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      const callbacks: { [k: string]: typeof callback } = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n    return callback;\n  }\n\n  protected onValueEvent(\n    callback: (a: DataSnapshot) => void,\n    cancelCallback: ((a: Error) => void) | null,\n    context: object | null\n  ) {\n    const container = new ValueEventRegistration(\n      callback,\n      cancelCallback || null,\n      context || null\n    );\n    repoAddEventCallbackForQuery(this.repo, this, container);\n  }\n\n  onChildEvent(\n    callbacks: { [k: string]: SnapshotCallback },\n    cancelCallback: ((a: Error) => unknown) | null,\n    context: object | null\n  ) {\n    const container = new ChildEventRegistration(\n      callbacks,\n      cancelCallback,\n      context\n    );\n    repoAddEventCallbackForQuery(this.repo, this, container);\n  }\n\n  off(\n    eventType?: string,\n    callback?: SnapshotCallback,\n    context?: object | null\n  ): void {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    validateCallback('Query.off', 2, callback, true);\n    validateContextObject('Query.off', 3, context, true);\n\n    let container: EventRegistration | null = null;\n    let callbacks: { [k: string]: typeof callback } | null = null;\n    if (eventType === 'value') {\n      const valueCallback = callback || null;\n      container = new ValueEventRegistration(\n        valueCallback,\n        null,\n        context || null\n      );\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n    repoRemoveEventCallbackForQuery(this.repo, this, container);\n  }\n\n  /**\n   * Get the server-value for this query, or return a cached value if not connected.\n   */\n  get(): Promise<DataSnapshot> {\n    return repoGetValue(this.repo, this);\n  }\n\n  /**\n   * Attaches a listener, waits for the first event, and then removes the listener\n   */\n  once(\n    eventType: string,\n    userCallback?: SnapshotCallback,\n    failureCallbackOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): Promise<DataSnapshot> {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    validateCallback('Query.once', 2, userCallback, true);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.once',\n      failureCallbackOrContext,\n      context\n    );\n\n    // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n    let firstCall = true;\n    const deferred = new Deferred<DataSnapshot>();\n\n    // A dummy error handler in case a user wasn't expecting promises\n    deferred.promise.catch(() => {});\n\n    const onceCallback = (snapshot: DataSnapshot) => {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n        this.off(eventType, onceCallback);\n\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n        deferred.resolve(snapshot);\n      }\n    };\n\n    this.on(\n      eventType,\n      onceCallback,\n      /*cancel=*/ err => {\n        this.off(eventType, onceCallback);\n\n        if (ret.cancel) {\n          ret.cancel.bind(ret.context)(err);\n        }\n        deferred.reject(err);\n      }\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Set a limit and anchor it to the start of the window.\n   */\n  limitToFirst(limit: number): Query {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToFirst: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToFirst: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      queryParamsLimitToFirst(this.queryParams_, limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Set a limit and anchor it to the end of the window.\n   */\n  limitToLast(limit: number): Query {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToLast: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToLast: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      queryParamsLimitToLast(this.queryParams_, limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Given a child path, return a new query ordered by the specified grandchild path.\n   */\n  orderByChild(path: string): Query {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    if (path === '$key') {\n      throw new Error(\n        'Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.'\n      );\n    } else if (path === '$priority') {\n      throw new Error(\n        'Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.'\n      );\n    } else if (path === '$value') {\n      throw new Error(\n        'Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.'\n      );\n    }\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    const parsedPath = new Path(path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(this.queryParams_, index);\n    Query.validateQueryEndpoints_(newParams);\n\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the KeyIndex\n   */\n  orderByKey(): Query {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    const newParams = queryParamsOrderBy(this.queryParams_, KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the PriorityIndex\n   */\n  orderByPriority(): Query {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    const newParams = queryParamsOrderBy(this.queryParams_, PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the ValueIndex\n   */\n  orderByValue(): Query {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    const newParams = queryParamsOrderBy(this.queryParams_, VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  startAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n\n    const newParams = queryParamsStartAt(this.queryParams_, value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.startAt: Starting point was already set (by another call to startAt ' +\n          'or equalTo).'\n      );\n    }\n\n    // Calling with no params tells us to start at the beginning.\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  startAfter(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAfter', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAfter', 1, value, this.path, false);\n    validateKey('Query.startAfter', 2, name, true);\n\n    const newParams = queryParamsStartAfter(this.queryParams_, value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.startAfter: Starting point was already set (by another call to startAt, startAfter ' +\n          'or equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  endAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n\n    const newParams = queryParamsEndAt(this.queryParams_, value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.endAt: Ending point was already set (by another call to endAt, endBefore, or ' +\n          'equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  endBefore(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endBefore', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endBefore', 1, value, this.path, false);\n    validateKey('Query.endBefore', 2, name, true);\n\n    const newParams = queryParamsEndBefore(this.queryParams_, value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.endBefore: Ending point was already set (by another call to endAt, endBefore, or ' +\n          'equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * Load the selection of children with exactly the specified value, and, optionally,\n   * the specified name.\n   */\n  equalTo(value: number | string | boolean | null, name?: string) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return this.startAt(value, name).endAt(value, name);\n  }\n\n  /**\n   * @return URL for this location.\n   */\n  toString(): string {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n\n    return this.repo.toString() + pathToUrlEncodedString(this.path);\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  queryObject(): object {\n    return queryParamsGetQueryObject(this.queryParams_);\n  }\n\n  queryIdentifier(): string {\n    const obj = this.queryObject();\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\n   */\n  isEqual(other: Query): boolean {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error =\n        'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    const sameRepo = this.repo === other.repo;\n    const samePath = pathEquals(this.path, other.path);\n    const sameQueryIdentifier =\n      this.queryIdentifier() === other.queryIdentifier();\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  /**\n   * Helper used by .on and .once to extract the context and or cancel arguments.\n   * @param fnName The function name (on or once)\n   *\n   */\n  private static getCancelAndContextArgs_(\n    fnName: string,\n    cancelOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): { cancel: ((a: Error) => void) | null; context: object | null } {\n    const ret: {\n      cancel: ((a: Error) => void) | null;\n      context: object | null;\n    } = { cancel: null, context: null };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext as (a: Error) => void;\n      validateCallback(fnName, 3, ret.cancel, true);\n\n      ret.context = context;\n      validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext as (a: Error) => void;\n      } else {\n        throw new Error(\n          errorPrefix(fnName, 3, true) +\n            ' must either be a cancel callback or a context object.'\n        );\n      }\n    }\n    return ret;\n  }\n\n  get ref(): Reference {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred, validateArgCount, validateCallback } from '@firebase/util';\nimport {\n  validateWritablePath,\n  validateFirebaseDataArg,\n  validatePriority,\n  validateFirebaseMergeDataArg\n} from '../core/util/validation';\nimport { warn } from '../core/util/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { Indexable } from '../core/util/misc';\n\nexport class OnDisconnect {\n  constructor(private repo_: Repo, private path_: Path) {}\n\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this.repo_,\n      this.path_,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this.repo_,\n      this.path_,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  set(value: unknown, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    validateCallback('OnDisconnect.set', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this.repo_,\n      this.path_,\n      value,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      1,\n      value,\n      this.path_,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this.repo_,\n      this.path_,\n      value,\n      priority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  update(\n    objectToMerge: Indexable,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      1,\n      objectToMerge,\n      this.path_,\n      false\n    );\n    validateCallback('OnDisconnect.update', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this.repo_,\n      this.path_,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from './DataSnapshot';\nimport { validateArgCount } from '@firebase/util';\n\nexport class TransactionResult {\n  /**\n   * A type for the resolve value of Firebase.transaction.\n   */\n  constructor(public committed: boolean, public snapshot: DataSnapshot) {}\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): object {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { EventRegistration } from './EventRegistration';\nimport { DataSnapshot } from '../../api/DataSnapshot';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\nexport type EventType =\n  | 'value'\n  | ' child_added'\n  | ' child_changed'\n  | ' child_moved'\n  | ' child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration The function to call to with the event data. User provided\n   * @param snapshot The data backing the event\n   * @param prevName Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: DataSnapshot,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    const ref = this.snapshot.getRef();\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return this.eventType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    return this.path;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return 'cancel';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from '../../api/DataSnapshot';\nimport { DataEvent, CancelEvent, Event, EventType } from './Event';\nimport { contains, assert } from '@firebase/util';\n\nimport { Path } from '../util/Path';\nimport { Change } from './Change';\nimport { Query } from '../../api/Query';\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: Query): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(\n    private callback_: ((d: DataSnapshot) => void) | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_: {} | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(change.snapshotNode, query.getRef(), index)\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callback_;\n      return function () {\n        cb.call(ctx, (eventData as DataEvent).snapshot);\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return (\n        other.callback_ === this.callback_ && other.context_ === this.context_\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callback_ !== null;\n  }\n}\n\n/**\n * Represents the registration of 1 or more child_xxx events.\n *\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\n * register a group of callbacks together in the future.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private callbacks_: {\n      [k: string]: (d: DataSnapshot, s?: string | null) => void;\n    } | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_?: {}\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return contains(this.callbacks_, eventToCheck);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const ref = query.getRef().child(change.childName);\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, ref, index),\n      change.prevName\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callbacks_[(eventData as DataEvent).eventType];\n      return function () {\n        cb.call(\n          ctx,\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        const otherKeys = Object.keys(other.callbacks_);\n        const thisKeys = Object.keys(this.callbacks_);\n        const otherCount = otherKeys.length;\n        const thisCount = thisKeys.length;\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          // If event types don't match, not a match\n          // If count is not 1, exact match across all\n\n          if (otherCount === 1) {\n            const otherKey = otherKeys[0];\n            const thisKey = thisKeys[0];\n            return (\n              thisKey === otherKey &&\n              (!other.callbacks_[otherKey] ||\n                !this.callbacks_[thisKey] ||\n                other.callbacks_[otherKey] === this.callbacks_[thisKey])\n            );\n          } else {\n            // Exact match on each key.\n            return thisKeys.every(\n              eventType =>\n                other.callbacks_[eventType] === this.callbacks_[eventType]\n            );\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callbacks_ !== null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnDisconnect } from './onDisconnect';\nimport { TransactionResult } from './TransactionResult';\nimport { warn } from '../core/util/util';\nimport { nextPushId } from '../core/util/NextPushId';\nimport { Query } from './Query';\nimport {\n  Repo,\n  repoGetDatabase,\n  repoServerTime,\n  repoSetWithPriority,\n  repoStartTransaction,\n  repoUpdate\n} from '../core/Repo';\nimport {\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathIsEmpty,\n  pathParent\n} from '../core/util/Path';\nimport { QueryParams } from '../core/view/QueryParams';\nimport {\n  validateBoolean,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Deferred, validateArgCount, validateCallback } from '@firebase/util';\n\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { Database } from './Database';\nimport { DataSnapshot } from './DataSnapshot';\n\nexport interface ReferenceConstructor {\n  new (repo: Repo, path: Path): Reference;\n}\n\nexport class Reference extends Query {\n  then: Promise<Reference>['then'];\n  catch: Promise<Reference>['catch'];\n\n  /**\n   * Call options:\n   *   new Reference(Repo, Path) or\n   *   new Reference(url: string, string|RepoManager)\n   *\n   * Externally - this is the firebase.database.Reference type.\n   */\n  constructor(repo: Repo, path: Path) {\n    if (!(repo instanceof Repo)) {\n      throw new Error(\n        'new Reference() no longer supported - use app.database().'\n      );\n    }\n\n    // call Query's constructor, passing in the repo and path.\n    super(repo, path, new QueryParams(), false);\n  }\n\n  /** @return {?string} */\n  getKey(): string | null {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n\n    if (pathIsEmpty(this.path)) {\n      return null;\n    } else {\n      return pathGetBack(this.path);\n    }\n  }\n\n  child(pathString: string | Path): Reference {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (pathGetFront(this.path) === null) {\n        validateRootPathString('Reference.child', 1, pathString, false);\n      } else {\n        validatePathString('Reference.child', 1, pathString, false);\n      }\n    }\n\n    return new Reference(this.repo, pathChild(this.path, pathString));\n  }\n\n  /** @return {?Reference} */\n  getParent(): Reference | null {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n\n    const parentPath = pathParent(this.path);\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  }\n\n  /** @return {!Reference} */\n  getRoot(): Reference {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n\n    let ref: Reference = this;\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n    return ref;\n  }\n\n  /** @return {!Database} */\n  databaseProp(): Database {\n    return repoGetDatabase(this.repo);\n  }\n\n  set(\n    newVal: unknown,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    validateCallback('Reference.set', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    repoSetWithPriority(\n      this.repo,\n      this.path,\n      newVal,\n      /*priority=*/ null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  update(\n    objectToMerge: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to Firebase.update() is deprecated. ' +\n          'Use set() if you want to overwrite the existing data, or ' +\n          'an Object with integer keys if you really do want to ' +\n          'only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'Reference.update',\n      1,\n      objectToMerge,\n      this.path,\n      false\n    );\n    validateCallback('Reference.update', 2, onComplete, true);\n    const deferred = new Deferred();\n    repoUpdate(\n      this.repo,\n      this.path,\n      objectToMerge as { [k: string]: unknown },\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  setWithPriority(\n    newVal: unknown,\n    newPriority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg(\n      'Reference.setWithPriority',\n      1,\n      newVal,\n      this.path,\n      false\n    );\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    validateCallback('Reference.setWithPriority', 3, onComplete, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw (\n        'Reference.setWithPriority failed: ' +\n        this.getKey() +\n        ' is a read-only object.'\n      );\n    }\n\n    const deferred = new Deferred();\n    repoSetWithPriority(\n      this.repo,\n      this.path,\n      newVal,\n      newPriority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  remove(onComplete?: (a: Error | null) => void): Promise<unknown> {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    validateCallback('Reference.remove', 1, onComplete, true);\n\n    return this.set(null, onComplete);\n  }\n\n  transaction(\n    transactionUpdate: (a: unknown) => unknown,\n    onComplete?: (a: Error | null, b: boolean, c: DataSnapshot | null) => void,\n    applyLocally?: boolean\n  ): Promise<TransactionResult> {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    validateCallback('Reference.transaction', 2, onComplete, true);\n    // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw (\n        'Reference.transaction failed: ' +\n        this.getKey() +\n        ' is a read-only object.'\n      );\n    }\n\n    if (applyLocally === undefined) {\n      applyLocally = true;\n    }\n\n    const deferred = new Deferred<TransactionResult>();\n    if (typeof onComplete === 'function') {\n      deferred.promise.catch(() => {});\n    }\n\n    const promiseComplete = function (\n      error: Error,\n      committed: boolean,\n      snapshot: DataSnapshot\n    ) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n      if (typeof onComplete === 'function') {\n        onComplete(error, committed, snapshot);\n      }\n    };\n    repoStartTransaction(\n      this.repo,\n      this.path,\n      transactionUpdate,\n      promiseComplete,\n      applyLocally\n    );\n\n    return deferred.promise;\n  }\n\n  setPriority(\n    priority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    validateCallback('Reference.setPriority', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    repoSetWithPriority(\n      this.repo,\n      pathChild(this.path, '.priority'),\n      priority,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  push(value?: unknown, onComplete?: (a: Error | null) => void): Reference {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    validateCallback('Reference.push', 2, onComplete, true);\n\n    const now = repoServerTime(this.repo);\n    const name = nextPushId(now);\n\n    // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n    const thennablePushRef = this.child(name);\n    const pushRef = this.child(name);\n\n    let promise;\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(() => pushRef);\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n\n    if (typeof onComplete === 'function') {\n      promise.catch(() => {});\n    }\n\n    return thennablePushRef;\n  }\n\n  onDisconnect(): OnDisconnect {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  }\n\n  get database(): Database {\n    return this.databaseProp();\n  }\n\n  get key(): string | null {\n    return this.getKey();\n  }\n\n  get parent(): Reference | null {\n    return this.getParent();\n  }\n\n  get root(): Reference {\n    return this.getRoot();\n  }\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nQuery.__referenceConstructor = Reference;\nsyncPointSetReferenceConstructor(Reference);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { log, warn } from './util/util';\nimport { FirebaseAppLike } from './RepoManager';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n  constructor(\n    private app_: FirebaseAppLike,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.get().then(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      setTimeout(() => listener(null), 0);\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.app_.name +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* Auth token provider that the Admin SDK uses to connect to the Emulator. */\nexport class EmulatorAdminTokenProvider implements AuthTokenProvider {\n  private static EMULATOR_AUTH_TOKEN = 'owner';\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp as FirebaseAppExp } from '@firebase/app-exp';\nimport { safeGet } from '@firebase/util';\nimport { Repo, repoGetDatabase, repoInterrupt } from './Repo';\nimport { fatal, log } from './util/util';\nimport { parseRepoInfo } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport { Database } from '../api/Database';\nimport { RepoInfo } from './RepoInfo';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  AuthTokenProvider,\n  EmulatorAdminTokenProvider,\n  FirebaseAuthTokenProvider\n} from './AuthTokenProvider';\nimport { pathIsEmpty } from './util/Path';\n\n/**\n * This variable is also defined in the firebase node.js admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Intersection type that allows the SDK to be used from firebase-exp and\n * firebase v8.\n */\nexport type FirebaseAppLike = FirebaseApp | FirebaseAppExp;\n\n/**\n * Creates and caches Repo instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing repo in place to point to a new host/port.\n */\nexport function repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (repo.repoInfo_.nodeAdmin) {\n    repo.authTokenProvider_ = new EmulatorAdminTokenProvider();\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseAppLike,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined') {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorAdminTokenProvider()\n      : new FirebaseAuthTokenProvider(app, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider);\n\n  return repoGetDatabase(repo);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nexport function repoManagerDeleteRepo(repo: Repo): void {\n  const appRepos = safeGet(repos, repo.app.name);\n  // This should never happen...\n  if (!appRepos || safeGet(appRepos, repo.key) !== repo) {\n    fatal(\n      `Database ${repo.app.name}(${repo.repoInfo_}) has already been deleted.`\n    );\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo The metadata about the Repo\n * @return The Repo object for the specified server / repoName.\n */\nexport function repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseAppLike,\n  authTokenProvider: AuthTokenProvider\n): Repo {\n  let appRepos = safeGet(repos, app.name);\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = safeGet(appRepos, repoInfo.toURLString());\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, app, authTokenProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath } from '../core/util/Path';\nimport { Reference } from './Reference';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport {\n  repoManagerApplyEmulatorSettings,\n  repoManagerDeleteRepo\n} from '../core/RepoManager';\nimport { validateArgCount } from '@firebase/util';\nimport { validateUrl } from '../core/util/validation';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\n\n/**\n * Class representing a firebase database.\n */\nexport class Database implements FirebaseService {\n  /** Track if the instance has been used (root or repo accessed) */\n  private instanceStarted_: boolean = false;\n\n  /** Backing state for root_ */\n  private rootInternal_?: Reference;\n\n  static readonly ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    },\n    increment: (delta: number) => {\n      return {\n        '.sv': {\n          'increment': delta\n        }\n      };\n    }\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   */\n  constructor(private repoInternal_: Repo) {\n    if (!(repoInternal_ instanceof Repo)) {\n      fatal(\n        \"Don't call new Database() directly - please use firebase.database().\"\n      );\n    }\n  }\n\n  INTERNAL = {\n    delete: async () => {\n      this.checkDeleted_('delete');\n      repoManagerDeleteRepo(this.repo_);\n      this.repoInternal_ = null;\n      this.rootInternal_ = null;\n    }\n  };\n\n  private get repo_(): Repo {\n    if (!this.instanceStarted_) {\n      repoStart(this.repoInternal_);\n      this.instanceStarted_ = true;\n    }\n    return this.repoInternal_;\n  }\n\n  get root_(): Reference {\n    if (!this.rootInternal_) {\n      this.rootInternal_ = new Reference(this.repo_, newEmptyPath());\n    }\n\n    return this.rootInternal_;\n  }\n\n  get app(): FirebaseApp {\n    return this.repo_.app as FirebaseApp;\n  }\n\n  /**\n   * Modify this instance to communicate with the Realtime Database emulator.\n   *\n   * <p>Note: This method must be called before performing any other operation.\n   *\n   * @param host the emulator host (ex: localhost)\n   * @param port the emulator port (ex: 8080)\n   */\n  useEmulator(host: string, port: number): void {\n    this.checkDeleted_('useEmulator');\n    if (this.instanceStarted_) {\n      fatal(\n        'Cannot call useEmulator() after instance has already been initialized.'\n      );\n      return;\n    }\n\n    // Modify the repo to apply emulator settings\n    repoManagerApplyEmulatorSettings(this.repoInternal_, host, port);\n  }\n\n  /**\n   * Returns a reference to the root or to the path specified in the provided\n   * argument.\n   *\n   * @param path The relative string path or an existing Reference to a database\n   * location.\n   * @throws If a Reference is provided, throws if it does not belong to the\n   * same project.\n   * @return Firebase reference.\n   */\n  ref(path?: string): Reference;\n  ref(path?: Reference): Reference;\n  ref(path?: string | Reference): Reference {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @return Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    /** @const {string} */\n    const apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const parsedURL = parseRepoInfo(url, this.repo_.repoInfo_.nodeAdmin);\n    validateUrl(apiName, 1, parsedURL);\n\n    const repoInfo = parsedURL.repoInfo;\n    if (\n      !this.repo_.repoInfo_.isCustomHost() &&\n      repoInfo.host !== this.repo_.repoInfo_.host\n    ) {\n      fatal(\n        apiName +\n          ': Host name does not match the current database: ' +\n          '(found ' +\n          repoInfo.host +\n          ' but expected ' +\n          this.repo_.repoInfo_.host +\n          ')'\n      );\n    }\n\n    return this.ref(parsedURL.path.toString());\n  }\n\n  private checkDeleted_(apiName: string) {\n    if (this.repoInternal_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n  // Make individual repo go offline.\n  goOffline(): void {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    repoInterrupt(this.repo_);\n  }\n\n  goOnline(): void {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    repoResume(this.repo_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { Reference } from './Reference';\nimport { repoManagerDatabaseFromApp } from '../core/RepoManager';\nimport { setSDKVersion } from '../core/version';\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport * as types from '@firebase/database-types';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  Provider\n} from '@firebase/component';\nimport {\n  repoInterceptServerData,\n  repoStats,\n  repoStatsIncrementCounter\n} from '../core/Repo';\n\n/**\n * INTERNAL methods for internal-use only (tests, etc.).\n *\n * Customers shouldn't use these or else should be aware that they could break at any time.\n */\n\nexport const forceLongPolling = function () {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nexport const forceWebSockets = function () {\n  BrowserPollConnection.forceDisallow();\n};\n\n/* Used by App Manager */\nexport const isWebSocketsAvailable = function (): boolean {\n  return WebSocketConnection['isAvailable']();\n};\n\nexport const setSecurityDebugCallback = function (\n  ref: Reference,\n  callback: (a: object) => void\n) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (ref.repo.persistentConnection_ as any).securityDebugCallback_ = callback;\n};\n\nexport const stats = function (ref: Reference, showDelta?: boolean) {\n  repoStats(ref.repo, showDelta);\n};\n\nexport const statsIncrementCounter = function (ref: Reference, metric: string) {\n  repoStatsIncrementCounter(ref.repo, metric);\n};\n\nexport const dataUpdateCount = function (ref: Reference): number {\n  return ref.repo.dataUpdateCount;\n};\n\nexport const interceptServerData = function (\n  ref: Reference,\n  callback: ((a: string, b: unknown) => void) | null\n) {\n  return repoInterceptServerData(ref.repo, callback);\n};\n\n/**\n * Used by console to create a database based on the app,\n * passed database URL and a custom auth implementation.\n *\n * @param app A valid FirebaseApp-like object\n * @param url A valid Firebase databaseURL\n * @param version custom version e.g. firebase-admin version\n * @param customAuthImpl custom auth implementation\n */\nexport function initStandalone<T>({\n  app,\n  url,\n  version,\n  customAuthImpl,\n  namespace,\n  nodeAdmin = false\n}: {\n  app: FirebaseApp;\n  url: string;\n  version: string;\n  customAuthImpl: FirebaseAuthInternal;\n  namespace: T;\n  nodeAdmin?: boolean;\n}): {\n  instance: types.Database;\n  namespace: T;\n} {\n  setSDKVersion(version);\n\n  /**\n   * ComponentContainer('database-standalone') is just a placeholder that doesn't perform\n   * any actual function.\n   */\n  const authProvider = new Provider<FirebaseAuthInternalName>(\n    'auth-internal',\n    new ComponentContainer('database-standalone')\n  );\n  authProvider.setComponent(\n    new Component('auth-internal', () => customAuthImpl, ComponentType.PRIVATE)\n  );\n\n  return {\n    instance: repoManagerDatabaseFromApp(\n      app,\n      authProvider,\n      url,\n      nodeAdmin\n    ) as types.Database,\n    namespace\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { repoManagerForceRestClient } from '../core/RepoManager';\nimport { Connection } from '../realtime/Connection';\nimport { Query } from './Query';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\nexport const queryIdentifier = function (query: Query) {\n  return query.queryIdentifier();\n};\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Database } from './src/api/Database';\nimport { DataSnapshot } from './src/api/DataSnapshot';\nimport { Query } from './src/api/Query';\nimport { Reference } from './src/api/Reference';\nimport { enableLogging } from './src/core/util/util';\nimport { repoManagerDatabaseFromApp } from './src/core/RepoManager';\nimport * as INTERNAL from './src/api/internal';\nimport * as TEST_ACCESS from './src/api/test_access';\nimport { isNodeSdk } from '@firebase/util';\nimport * as types from '@firebase/database-types';\nimport { setSDKVersion } from './src/core/version';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from './package.json';\n\nconst ServerValue = Database.ServerValue;\n\nexport function registerDatabase(instance: FirebaseNamespace) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION);\n\n  // Register the Database Service with the 'firebase' namespace.\n  const namespace = (instance as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const authProvider = container.getProvider('auth-internal');\n\n        return repoManagerDatabaseFromApp(app, authProvider, url, undefined);\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps(\n        // firebase.database namespace properties\n        {\n          Reference,\n          Query,\n          Database,\n          DataSnapshot,\n          enableLogging,\n          INTERNAL,\n          ServerValue,\n          TEST_ACCESS\n        }\n      )\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\n\n// Types to export for the admin SDK\nexport { Database, Query, Reference, enableLogging, ServerValue };\n\nexport { DataSnapshot } from './src/api/DataSnapshot';\nexport { OnDisconnect } from './src/api/onDisconnect';\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    database?: {\n      (app?: FirebaseApp): types.FirebaseDatabase;\n      enableLogging: typeof types.enableLogging;\n      ServerValue: types.ServerValue;\n      Database: typeof types.FirebaseDatabase;\n    };\n  }\n  interface FirebaseApp {\n    database?(databaseURL?: string): types.FirebaseDatabase;\n  }\n}\n"],"sourceRoot":""}